section {*LR1\_Property\_Satisfaction\_\_input\_specification\_b*}
theory
  LR1_Property_Satisfaction__input_specification_b

imports
  PRJ_12_04_06_06_04__ENTRY

begin

definition fillWithPreContext :: "
  ('q,'s) DT_l2_l3_nonterminals 
  \<Rightarrow> ('q,'s) DT_l2_l3_nonterminals list
  \<Rightarrow> 'q option
  \<Rightarrow> 'q option
  \<Rightarrow> ('q,'s) DT_l2_l3_nonterminals list" 
  where
    "fillWithPreContext from ignore q1 q2 =
  [ (fillOpt from q1)]
  @((fillOptL ignore q2))"

definition ValidPreContext :: "
  ('q,'s) DT_l2_l3_nonterminals 
  \<Rightarrow> ('q,'s) DT_l2_l3_nonterminals list
  \<Rightarrow> 'q option
  \<Rightarrow> 'q option
  \<Rightarrow> bool"
  where
    "ValidPreContext from ignore q1 q2 = 
  (\<exists>c.
  (proper_l3_l2_seq ((fillWithPreContext from ignore q1 q2) @ c))
  \<and> (ValidFillO from q1)
  \<and> (ValidFillOL ignore q2))"

lemma proper_l3_l2_seqI: "
  proper_l3_l2_seq [cons_l2 q A]"
  apply(simp add: proper_l3_l2_seq_def proper_l3_seq_def only_l3_nonterminals_def only_l3_nonterminals_and_l3_adjacency_def last_back_state_def)
  done

lemma proper_l3_l2_seqI2: "
  proper_l3_l2_seq [cons_l3 q1 A q2, cons_l2 q2 B]"
  apply(simp add: proper_l3_l2_seq_def)
  apply(rule conjI)
   apply(simp add: proper_l3_seq_def)
   apply(rule conjI)
    apply(simp add: only_l3_nonterminals_def)
    apply(clarsimp)
    apply(rename_tac w1 w2 xA)(*strict*)
    apply(case_tac w1)
     apply(rename_tac w1 w2 xA)(*strict*)
     apply(clarsimp)
    apply(rename_tac w1 w2 xA a list)(*strict*)
    apply(clarsimp)
   apply(simp add: only_l3_nonterminals_and_l3_adjacency_def)
  apply(rule disjI2)
  apply(simp add: last_back_state_def)
  done

lemma drop_drop_and_crop_empty: "
  length w \<le> n+k
  \<Longrightarrow> drop n (drop_and_crop w k) = []"
  apply(simp add: drop_and_crop_def butn_def cropTol3l2_def)
  apply(clarsimp)
  apply(force)
  done

lemma proper_l3_l2_seq_nol2_prime: "
  proper_l3_l2_seq (w@cons_l2  q A#wx)
  \<Longrightarrow>wx\<noteq>[]
  \<Longrightarrow> Q"
  apply(subgoal_tac "wx=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   prefer 2
   apply(rule case_list)
  apply(erule disjE)
   apply(force)
  apply(clarsimp)
  apply(rename_tac w' a')(*strict*)
  apply(rule_tac
      w="w"
      in proper_l3_l2_seq_nol2)
  apply(force)
  done

lemma fillOptL_reflects_empty: "
  liftA (fillOptL c q) = []
  \<Longrightarrow> c=[]"
  apply(subgoal_tac "c=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   prefer 2
   apply(rule case_list)
  apply(erule disjE)
   apply(clarsimp)
  apply(clarsimp)
  apply(rename_tac w' a')(*strict*)
  apply(simp add: fillOptL_def)
  apply(case_tac q)
   apply(rename_tac w' a')(*strict*)
   apply(clarsimp)
   apply(simp add: liftA_commutes_over_concat)
  apply(rename_tac w' a' a)(*strict*)
  apply(clarsimp)
  apply(simp add: fillL_def appL_def fill_def)
  apply(simp add: liftA_commutes_over_concat)
  done

definition F2LR1inputx :: "
  (('a, 'b) DT_l2_l3_nonterminals, 'c) cfg
  \<Rightarrow> ('a, 'c, 'b) epda
  \<Rightarrow> bool"
  where
    "F2LR1inputx G' G \<equiv>
   ( valid_simple_dpda G
  \<and> valid_cfg G'
  \<and> \<not> duplicate_marking G
  \<and> valid_cfg (F_SDPDA_TO_CFG_STD G)
  \<and> cfg_sub G' (F_SDPDA_TO_CFG_STD G)
  \<and> \<not> duplicate_markingH G
  \<and> cfg_nonterminals G' = cfgLM_accessible_nonterminals G' \<inter> cfgSTD_Nonblockingness_nonterminals G')"

definition F2LR1input :: "
  (('a, 'b) DT_l2_l3_nonterminals, 'c) cfg
  \<Rightarrow> bool"
  where
    "F2LR1input G' \<equiv>
   (\<exists>G. F2LR1inputx G' G)"

lemma F2LR1input_implies_LR1ProdFormSimp: "
  F2LR1input G
  \<Longrightarrow> LR1ProdFormSimp G"
  apply(simp add: F2LR1inputx_def F2LR1input_def)
  apply(clarsimp)
  apply(rename_tac Ga)(*strict*)
  apply(rule LR1ProdForm_implies_LR1ProdFormSimp)
  apply(rule sub_of_F_SDPDA_TO_CFG_STD__implies_LR1ProdForm)
  apply(force)
  done

lemma translate_into_creating_derivation_hlp: "
 CFGtermLeft G
  \<Longrightarrow> LR1ProdFormSimp G
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr> (\<pi>2 @ [\<pi>2L]) \<lparr>cfg_conf = teB a2 # liftB \<alpha>2 @ liftA \<beta>2\<rparr>
  \<Longrightarrow> \<forall>k<Suc (length \<pi>2). \<forall>w. cfg_conf (the (get_configuration (d2 k))) \<noteq> liftB \<alpha> @ teB b # w
  \<Longrightarrow> valid_simple_dpda G'
  \<Longrightarrow> valid_cfg G
  \<Longrightarrow> valid_cfg (F_SDPDA_TO_CFG_STD G')
  \<Longrightarrow> cfg_sub G (F_SDPDA_TO_CFG_STD G')
  \<Longrightarrow> \<not> duplicate_markingH G'
  \<Longrightarrow> cfg_nonterminals G = cfgLM_accessible_nonterminals G \<inter> cfgSTD_Nonblockingness_nonterminals G
  \<Longrightarrow> liftB \<alpha> @ teB b # w1 = teB a1 # liftB \<alpha>1 @ liftA \<beta>1
  \<Longrightarrow> liftB \<alpha> @ teB b # w2 = teB a2 # liftB \<alpha>2 @ liftA \<beta>2
  \<Longrightarrow> \<exists>d2' e2 c2 e2' c2'. epdaH.derivation_initial G' d2' \<and> d2' (length \<pi>2) = Some (pair e2 c2) \<and> d2' (Suc (length \<pi>2)) = Some (pair e2' c2') \<and> epdaH_conf_history c2' = epdaH_conf_history c2 @ [b] \<and> epdaH_conf_history c2 = \<alpha>"
  apply(clarsimp)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d2 (length \<pi>2) = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
   prefer 2
   apply(simp only: cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac e)(*strict*)
   apply(rule_tac
      m="Suc(length \<pi>2)"
      in cfgLM.step_detail_before_some_position)
     apply(rename_tac e)(*strict*)
     apply(force)
    apply(rename_tac e)(*strict*)
    apply(force)
   apply(rename_tac e)(*strict*)
   apply(force)
  apply(clarsimp)
  apply(rename_tac e1 e2 c1 c2)(*strict*)
  apply(simp add: get_configuration_def)
  apply(case_tac c1)
  apply(rename_tac e1 e2 c1 c2 cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac e1 e2 c2 cfg_confa)(*strict*)
  apply(rename_tac w)
  apply(rename_tac e1 e2 c2 w)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac e1 e2 c2 l r)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac e1 e2 c2 l r)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply(force)
  apply(rename_tac e1 e2 c2 l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac e1 e2 c2 r l')(*strict*)
  apply(thin_tac "setA (liftB l') = {}")
  apply(case_tac e2)
  apply(rename_tac e1 e2 c2 r l' prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac e1 c2 r l' prod_lhs prod_rhs)(*strict*)
  apply(rename_tac A w)
  apply(rename_tac e1 c2 r l' A w)(*strict*)
  apply(subgoal_tac "\<pi>2L=\<lparr>prod_lhs = A, prod_rhs = w\<rparr>")
   apply(rename_tac e1 c2 r l' A w)(*strict*)
   prefer 2
   apply(simp only: cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac e1 c2 r l' A w e)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 r l' A w)(*strict*)
   apply (metis liftB.simps(2) Some_inj getLabel_at_pos length_map less_Suc_eq nth_beyond1)
  apply(rename_tac e1 c2 r l' A w)(*strict*)
  apply(clarsimp)
  apply(case_tac c2)
  apply(rename_tac e1 c2 r l' A w cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac e1 r l' A w)(*strict*)
  apply(subgoal_tac "(\<exists>w1x w2x. cfg_conf \<lparr>cfg_conf = liftB l' @ teA A # r\<rparr> = liftB w1x @ liftA w2x)")
   apply(rename_tac e1 r l' A w)(*strict*)
   prefer 2
   apply(simp add: CFGtermLeft_def)
   apply(erule_tac
      x="derivation_take d2 (length \<pi>2)"
      in allE)
   apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
      in allE)
   apply(erule_tac
      x="take (length \<pi>2) ((\<pi>2 @ [\<lparr>prod_lhs = A, prod_rhs = w\<rparr>]))"
      in allE)
   apply(erule_tac
      x="\<lparr>cfg_conf = liftB l' @ teA A # r\<rparr>"
      in allE)
   apply(erule impE)
    apply(rename_tac e1 r l' A w)(*strict*)
    apply(rule cfgLM_trans_der_crop)
       apply(rename_tac e1 r l' A w)(*strict*)
       apply(force)
      apply(rename_tac e1 r l' A w)(*strict*)
      apply(force)
     apply(rename_tac e1 r l' A w)(*strict*)
     apply(force)
    apply(rename_tac e1 r l' A w)(*strict*)
    apply(simp add: get_configuration_def)
   apply(rename_tac e1 r l' A w)(*strict*)
   apply(erule impE)
    apply(rename_tac e1 r l' A w)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(rule_tac
      x="[cfg_initial G]"
      in exI)
    apply(force)
   apply(rename_tac e1 r l' A w)(*strict*)
   apply(clarsimp)
  apply(rename_tac e1 r l' A w)(*strict*)
  apply(clarsimp)
  apply(rename_tac e1 r l' A w w1x w2x)(*strict*)
  apply(case_tac w2x)
   apply(rename_tac e1 r l' A w w1x w2x)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 r l' A w w1x)(*strict*)
   apply (metis append_Nil2 list.simps(2) maximalPrefixB_liftB maximalPrefixB_drop_liftB maximalPrefixB_front self_append_conv)
  apply(rename_tac e1 r l' A w w1x w2x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac e1 r l' A w w1x a list)(*strict*)
  apply(subgoal_tac "l'=w1x")
   apply(rename_tac e1 r l' A w w1x a list)(*strict*)
   prefer 2
   apply (metis liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_front)
  apply(rename_tac e1 r l' A w w1x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac e1 w w1x a list)(*strict*)
  apply(simp add: cfgLM.trans_der_def)
  apply(clarsimp)
  apply(simp add: LR1ProdFormSimp_def)
  apply(erule_tac
      x="\<lparr>prod_lhs = a, prod_rhs = w\<rparr>"
      in ballE)
   apply(rename_tac e1 w w1x a list)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac e1 w w1x a list)(*strict*)
  apply(erule_tac
      x="length \<pi>2"
      in allE)
  apply(clarsimp)
  apply(erule disjE)
   apply(rename_tac e1 w w1x a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 w1x a list)(*strict*)
   apply(case_tac w1x)
    apply(rename_tac e1 w1x a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac e1 a list)(*strict*)
    apply(case_tac list)
     apply(rename_tac e1 a list)(*strict*)
     apply(force)
    apply(rename_tac e1 a list aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac e1 w1x a list aa lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 a list lista)(*strict*)
   apply(subgoal_tac "lista=\<alpha>2")
    apply(rename_tac e1 a list lista)(*strict*)
    prefer 2
    apply(rule liftB_liftA_inj1)
    apply(force)
   apply(rename_tac e1 a list lista)(*strict*)
   apply(subgoal_tac "list=\<beta>2")
    apply(rename_tac e1 a list lista)(*strict*)
    prefer 2
    apply(rule_tac
      ?w1.0="lista"
      in liftB_liftA_inj2)
    apply(force)
   apply(rename_tac e1 a list lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 a)(*strict*)
   apply(case_tac "\<alpha>")
    apply(rename_tac e1 a)(*strict*)
    apply(force)
   apply(rename_tac e1 a aa list)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 a list)(*strict*)
   apply(case_tac "setA w2={}")
    apply(rename_tac e1 a list)(*strict*)
    apply(subgoal_tac "\<exists>l'. liftB l' = w2")
     apply(rename_tac e1 a list)(*strict*)
     prefer 2
     apply(rule_tac
      x="filterB w2"
      in exI)
     apply (rule liftBDeConv2)
     apply(force)
    apply(rename_tac e1 a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac e1 a list l')(*strict*)
    apply(thin_tac "setA (liftB l') = {}")
    apply(case_tac \<beta>2)
     apply(rename_tac e1 a list l')(*strict*)
     apply(clarsimp)
     apply(subgoal_tac "\<alpha>2=list@b#l'")
      apply(rename_tac e1 a list l')(*strict*)
      prefer 2
      apply (metis liftB.simps(2) liftB_commutes_over_concat liftB_inj)
     apply(rename_tac e1 a list l')(*strict*)
     apply(clarsimp)
     apply(thin_tac "liftB list @ teB b # liftB l' = liftB (list @ b # l')")
     apply(simp add: simpY)
    apply(rename_tac e1 a list l' aa lista)(*strict*)
    apply(clarsimp)
    apply (metis liftA.simps(2) liftB.simps(2) liftB_commutes_over_concat nonterminal_not_in_liftB)
   apply(rename_tac e1 a list)(*strict*)
   apply(subgoal_tac "\<exists>w1x w2x A. w2=liftB w1x @ teA A # w2x")
    apply(rename_tac e1 a list)(*strict*)
    prefer 2
    apply(rule left_most_terminal_exists)
    apply(force)
   apply(rename_tac e1 a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 a list w1x w2x A)(*strict*)
   apply(simp add: simpY)
   apply(subgoal_tac "list@b#w1x=\<alpha>2")
    apply(rename_tac e1 a list w1x w2x A)(*strict*)
    prefer 2
    apply(case_tac \<beta>2)
     apply(rename_tac e1 a list w1x w2x A)(*strict*)
     apply(clarsimp)
     apply (metis Cons_eq_appendI append_assoc append_eq_appendI)
    apply(rename_tac e1 a list w1x w2x A aa lista)(*strict*)
    apply(clarsimp)
    apply(rule identical_temrinal_maximal_prefix)
    apply(simp add: simpY)
   apply(rename_tac e1 a list w1x w2x A)(*strict*)
   apply(clarsimp)
   apply(simp add: simpY)
  apply(rename_tac e1 w w1x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac e1 w w1x a list ba A B)(*strict*)
  apply(erule disjE)
   apply(rename_tac e1 w w1x a list ba A B)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 w1x list ba A B)(*strict*)
   prefer 2
   apply(rename_tac e1 w w1x a list ba A B)(*strict*)
   apply(erule disjE)
    apply(rename_tac e1 w w1x a list ba A B)(*strict*)
    apply(clarsimp)
    apply(rename_tac e1 w1x list A B)(*strict*)
    apply(case_tac w1x)
     apply(rename_tac e1 w1x list A B)(*strict*)
     apply(clarsimp)
    apply(rename_tac e1 w1x list A B a lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac e1 list A B lista)(*strict*)
    apply(case_tac \<beta>2)
     apply(rename_tac e1 list A B lista)(*strict*)
     apply(clarsimp)
     apply (metis liftA.simps(2) nonterminal_not_in_liftB)
    apply(rename_tac e1 list A B lista a listb)(*strict*)
    apply(clarsimp)
    apply(subgoal_tac "lista=\<alpha>2")
     apply(rename_tac e1 list A B lista a listb)(*strict*)
     prefer 2
     apply(rule identical_temrinal_maximal_prefix)
     apply(force)
    apply(rename_tac e1 list A B lista a listb)(*strict*)
    apply(clarsimp)
    apply(rename_tac e1 list A a listb)(*strict*)
    apply(subgoal_tac "list=listb")
     apply(rename_tac e1 list A a listb)(*strict*)
     prefer 2
     apply(rule liftA_inj)
     apply(force)
    apply(rename_tac e1 list A a listb)(*strict*)
    apply(clarsimp)
    apply(rename_tac e1 A a listb)(*strict*)
    apply(case_tac "\<alpha>")
     apply(rename_tac e1 A a listb)(*strict*)
     apply(force)
    apply(rename_tac e1 A a listb aa list)(*strict*)
    apply(clarsimp)
    apply(rename_tac e1 A a listb list)(*strict*)
    apply(case_tac "setA w2={}")
     apply(rename_tac e1 A a listb list)(*strict*)
     apply(subgoal_tac "\<exists>l'. liftB l' = w2")
      apply(rename_tac e1 A a listb list)(*strict*)
      prefer 2
      apply(rule_tac
      x="filterB w2"
      in exI)
      apply (rule liftBDeConv2)
      apply(force)
     apply(rename_tac e1 A a listb list)(*strict*)
     apply(clarsimp)
     apply(rename_tac e1 A a listb list l')(*strict*)
     apply(thin_tac "setA (liftB l') = {}")
     apply(subgoal_tac "False")
      apply(rename_tac e1 A a listb list l')(*strict*)
      apply(force)
     apply(rename_tac e1 A a listb list l')(*strict*)
     apply (metis liftA.simps(2) liftB.simps(2) liftB_commutes_over_concat nonterminal_not_in_liftB)
    apply(rename_tac e1 A a listb list)(*strict*)
    apply(subgoal_tac "\<exists>w1x w2x A. w2=liftB w1x @ teA A # w2x")
     apply(rename_tac e1 A a listb list)(*strict*)
     prefer 2
     apply(rule left_most_terminal_exists)
     apply(force)
    apply(rename_tac e1 A a listb list)(*strict*)
    apply(clarsimp)
    apply(rename_tac e1 A a listb list w1x w2x Aa)(*strict*)
    apply(simp add: simpY)
    apply(subgoal_tac "list@b#w1x=\<alpha>2")
     apply(rename_tac e1 A a listb list w1x w2x Aa)(*strict*)
     prefer 2
     apply(case_tac \<beta>2)
      apply(rename_tac e1 A a listb list w1x w2x Aa)(*strict*)
      apply(clarsimp)
      apply(rule identical_temrinal_maximal_prefix)
      apply(simp add: simpY)
     apply(rename_tac e1 A a listb list w1x w2x Aa aa lista)(*strict*)
     apply(clarsimp)
     apply(rename_tac e1 A a listb list w1x w2x Aa)(*strict*)
     apply(rule identical_temrinal_maximal_prefix)
     apply(simp add: simpY)
    apply(rename_tac e1 A a listb list w1x w2x Aa)(*strict*)
    apply(clarsimp)
    apply(simp add: simpY)
   apply(rename_tac e1 w w1x a list ba A B)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 w1x list A B C)(*strict*)
   apply(case_tac w1x)
    apply(rename_tac e1 w1x list A B C)(*strict*)
    apply(clarsimp)
   apply(rename_tac e1 w1x list A B C a lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 list A B C lista)(*strict*)
   apply(case_tac \<beta>2)
    apply(rename_tac e1 list A B C lista)(*strict*)
    apply(clarsimp)
    apply (metis liftA.simps(2) nonterminal_not_in_liftB)
   apply(rename_tac e1 list A B C lista a listb)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "lista=\<alpha>2")
    apply(rename_tac e1 list A B C lista a listb)(*strict*)
    prefer 2
    apply(rule identical_temrinal_maximal_prefix)
    apply(simp add: simpY)
   apply(rename_tac e1 list A B C lista a listb)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 list A C a listb)(*strict*)
   apply(case_tac listb)
    apply(rename_tac e1 list A C a listb)(*strict*)
    apply(clarsimp)
   apply(rename_tac e1 list A C a listb aa lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 list A a aa lista)(*strict*)
   apply(subgoal_tac "list=lista")
    apply(rename_tac e1 list A a aa lista)(*strict*)
    prefer 2
    apply(rule liftA_inj)
    apply(force)
   apply(rename_tac e1 list A a aa lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 A a aa lista)(*strict*)
   apply(case_tac "\<alpha>")
    apply(rename_tac e1 A a aa lista)(*strict*)
    apply(force)
   apply(rename_tac e1 A a aa lista ab list)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 A a aa lista list)(*strict*)
   apply(case_tac "setA w2={}")
    apply(rename_tac e1 A a aa lista list)(*strict*)
    apply(subgoal_tac "\<exists>l'. liftB l' = w2")
     apply(rename_tac e1 A a aa lista list)(*strict*)
     prefer 2
     apply(rule_tac
      x="filterB w2"
      in exI)
     apply (rule liftBDeConv2)
     apply(force)
    apply(rename_tac e1 A a aa lista list)(*strict*)
    apply(clarsimp)
    apply(rename_tac e1 A a aa lista list l')(*strict*)
    apply(thin_tac "setA (liftB l') = {}")
    apply(subgoal_tac "False")
     apply(rename_tac e1 A a aa lista list l')(*strict*)
     apply(force)
    apply(rename_tac e1 A a aa lista list l')(*strict*)
    apply (metis liftA.simps(2) liftB.simps(2) liftB_commutes_over_concat nonterminal_not_in_liftB)
   apply(rename_tac e1 A a aa lista list)(*strict*)
   apply(subgoal_tac "\<exists>w1x w2x A. w2=liftB w1x @ teA A # w2x")
    apply(rename_tac e1 A a aa lista list)(*strict*)
    prefer 2
    apply(rule left_most_terminal_exists)
    apply(force)
   apply(rename_tac e1 A a aa lista list)(*strict*)
   apply(clarsimp)
   apply(rename_tac e1 A a aa lista list w1x w2x Aa)(*strict*)
   apply(simp add: simpY)
   apply(subgoal_tac "list@b#w1x=\<alpha>2")
    apply(rename_tac e1 A a aa lista list w1x w2x Aa)(*strict*)
    prefer 2
    apply(rule identical_temrinal_maximal_prefix)
    apply(simp add: simpY)
   apply(rename_tac e1 A a aa lista list w1x w2x Aa)(*strict*)
   apply(clarsimp)
   apply(simp add: simpY)
  apply(rename_tac e1 w1x list ba A B)(*strict*)
  apply(case_tac \<beta>2)
   apply(rename_tac e1 w1x list ba A B)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "False")
    apply(rename_tac e1 w1x list ba A B)(*strict*)
    apply(force)
   apply(rename_tac e1 w1x list ba A B)(*strict*)
   apply(rule_tac
      ?w1.0="a2#\<alpha>2"
      and ?v1.0="w1x@[ba]"
      in nonterminal_not_in_liftB)
   apply(rule sym)
   apply(simp add: simpY)
  apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "w1x@[ba] = a2#\<alpha>2")
   apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
   prefer 2
   apply(rule identical_temrinal_maximal_prefix)
   apply(simp add: simpY)
  apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
  apply(subgoal_tac "[teA a]=[teA B]")
   apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
   prefer 2
   apply(rule_tac
      t="teA B"
      and s="(liftB (w1x @ [ba]) @ (teA B # liftA list))!(length(liftB (w1x @ [ba])))"
      in ssubst)
    apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
    apply(rule_tac
      s="((teA B # liftA list))!(length(liftB (w1x @ [ba]))-length(liftB (w1x @ [ba])))"
      and t="(liftB (w1x @ [ba]) @ (teA B # liftA list))!(length(liftB (w1x @ [ba])))"
      in ssubst)
     apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
     apply(rule nth_append_2)
     apply(force)
    apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
   apply(rule_tac
      t="(liftB (w1x @ [ba]) @ teA B # liftA list)"
      and s="teB a2 # liftB \<alpha>2 @ teA a # liftA lista"
      in ssubst)
    apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
    apply(thin_tac "w1x @ [ba] = a2 # \<alpha>2")
    apply(simp only: simpY)
    apply(force)
   apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
   apply(rule_tac
      t="(teB a2 # liftB \<alpha>2 @ teA a # liftA lista)"
      and s="(liftB (a2# \<alpha>2) @ (teA a # liftA lista))"
      in ssubst)
    apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
    apply(force)
   apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
   apply(rule_tac
      t="a2 # \<alpha>2"
      and s="w1x @ [ba]"
      in ssubst)
    apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
    apply(force)
   apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
   apply(rule_tac
      s="((teA B # liftA list))!(length(liftB (w1x @ [ba]))-length(liftB (w1x @ [ba])))"
      and t="(liftB (w1x @ [ba]) @ (teA B # liftA list))!(length(liftB (w1x @ [ba])))"
      in ssubst)
    apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
    apply(rule nth_append_2)
    apply(force)
   apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac e1 w1x list ba A B a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac e1 w1x list ba A B lista)(*strict*)
  apply(subgoal_tac "list=lista")
   apply(rename_tac e1 w1x list ba A B lista)(*strict*)
   prefer 2
   apply(rule liftA_inj)
   apply(rule_tac
      w="liftB w1x @ teB ba # [teA B]"
      in append_linj)
   apply(rule_tac
      t="(liftB w1x @ [teB ba, teA B]) @ liftA list"
      and s="liftB w1x @ teB ba # teA B # liftA list"
      in ssubst)
    apply(rename_tac e1 w1x list ba A B lista)(*strict*)
    apply(force)
   apply(rename_tac e1 w1x list ba A B lista)(*strict*)
   apply(rule_tac
      t="(liftB w1x @ [teB ba, teA B]) @ liftA lista"
      and s="teB a2 # liftB \<alpha>2 @ teA B # liftA lista"
      in ssubst)
    apply(rename_tac e1 w1x list ba A B lista)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac e1 w1x list ba A B lista)(*strict*)
   apply(rule_tac
      t="teB a2 # liftB \<alpha>2 @ teA B # liftA lista"
      and s="(teB a2 # liftB \<alpha>2) @ (teA B # liftA lista)"
      in ssubst)
    apply(rename_tac e1 w1x list ba A B lista)(*strict*)
    apply(force)
   apply(rename_tac e1 w1x list ba A B lista)(*strict*)
   apply(rule_tac
      t="(teB a2 # liftB \<alpha>2)"
      and s="liftB(a2#\<alpha>2)"
      in ssubst)
    apply(rename_tac e1 w1x list ba A B lista)(*strict*)
    apply(force)
   apply(rename_tac e1 w1x list ba A B lista)(*strict*)
   apply(rule_tac
      t="a2#\<alpha>2"
      and s="w1x@[ba]"
      in ssubst)
    apply(rename_tac e1 w1x list ba A B lista)(*strict*)
    apply(force)
   apply(rename_tac e1 w1x list ba A B lista)(*strict*)
   apply(simp (no_asm) add: simpY)
  apply(rename_tac e1 w1x list ba A B lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac e1 w1x ba A B lista)(*strict*)
  apply(thin_tac "liftB w1x @ [teB ba] = teB a2 # liftB \<alpha>2")
  apply(thin_tac "liftB \<alpha> @ teB b # w1 = teB a1 # liftB \<alpha>1 @ liftA \<beta>1")
  apply(rename_tac e w1 c A B w0)
  apply(rename_tac e w1 c A B w0)(*strict*)
  apply(case_tac "setA w2={}")
   apply(rename_tac e w1 c A B w0)(*strict*)
   apply(subgoal_tac "\<exists>l'. liftB l' = w2")
    apply(rename_tac e w1 c A B w0)(*strict*)
    prefer 2
    apply(rule_tac
      x="filterB w2"
      in exI)
    apply (rule liftBDeConv2)
    apply(force)
   apply(rename_tac e w1 c A B w0)(*strict*)
   apply(clarsimp)
   apply(rename_tac e w1 c A B w0 l')(*strict*)
   apply(thin_tac "setA (liftB l') = {}")
   apply(subgoal_tac "False")
    apply(rename_tac e w1 c A B w0 l')(*strict*)
    apply(force)
   apply(rename_tac e w1 c A B w0 l')(*strict*)
   apply (metis liftA.simps(2) liftB.simps(2) liftB_commutes_over_concat append_Cons nonterminal_not_in_liftB)
  apply(rename_tac e w1 c A B w0)(*strict*)
  apply(subgoal_tac "\<exists>w1x w2x A. w2=liftB w1x @ teA A # w2x")
   apply(rename_tac e w1 c A B w0)(*strict*)
   prefer 2
   apply(rule left_most_terminal_exists)
   apply(force)
  apply(rename_tac e w1 c A B w0)(*strict*)
  apply(clarsimp)
  apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
  apply(simp add: simpY)
  apply(subgoal_tac "\<alpha>@b#w1x = a2#\<alpha>2")
   apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
   prefer 2
   apply(rule identical_temrinal_maximal_prefix)
   apply(simp add: simpY)
  apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
  apply(subgoal_tac "a2 # \<alpha>2 = w1 @ [b] \<and> w1 = \<alpha>")
   apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
   apply(subgoal_tac "\<exists>dL. epdaH.derivation_initial SSG1 dL \<and> (\<forall>k\<le>SSn. \<exists>eL cL eR cR. (dL k = Some (pair eL cL) \<and> SSdR k = Some (pair eR cR)) \<and> (case eR of None \<Rightarrow> True | Some eR' \<Rightarrow> eR' \<notin> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking SSG1) (epda_gamma SSG1) \<longrightarrow> (case eL of None \<Rightarrow> False | Some eL' \<Rightarrow> eL' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 SSG1 eR')) \<and> (setA (cfg_conf cR) \<noteq> {} \<longrightarrow> (\<exists>w. set w \<subseteq> epda_gamma SSG1 \<and> cL = F_SDPDA_TO_CFG_STD__configuration_basic_RL cR w)))" for SSn SSdR SSG1)
    apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
    prefer 2
    apply(rule_tac ?dR="d2" and ?n.0="Suc(length \<pi>2)" and ?G1.0="G'" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
        apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
        apply(force)
       apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
       apply(force)
      apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
      apply(simp add: cfgLM.derivation_initial_def)
      apply(rule conjI)
       apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
       apply (metis cfg_sub_preserves_cfgLM_derivation)
      apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
      apply(simp add: cfgLM.derivation_initial_def cfg_initial_configurations_def cfg_configurations_def valid_cfg_def F_SDPDA_TO_CFG_STD_def cfg_sub_def)
     apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
     apply(force)
    apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
    apply(simp add: simpY)
   apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac e A B w0 w2x Aa dL)(*strict*)
   apply(rule_tac
      x="dL"
      in exI)
   apply(clarsimp)
   apply(erule_tac x="length \<pi>2" in allE')
   apply(erule_tac
      x="Suc(length \<pi>2)"
      in allE)
   apply(clarsimp)
   apply(rename_tac e A B w0 w2x Aa dL eL eLa cL cLa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__configuration_basic_RL_def)
   apply(simp add: Let_def)
   apply(erule_tac
      P="setA (liftB \<alpha> @ teA A # liftA w0) \<noteq> {}"
      in impE)
    apply(rename_tac e A B w0 w2x Aa dL eL eLa cL cLa)(*strict*)
    apply(simp add: simpY)
   apply(rename_tac e A B w0 w2x Aa dL eL eLa cL cLa)(*strict*)
   apply(erule_tac
      P="\<lparr>prod_lhs = A, prod_rhs = [teB b, teA B]\<rparr> \<notin> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G')"
      in impE)
    apply(rename_tac e A B w0 w2x Aa dL eL eLa cL cLa)(*strict*)
    apply(simp add: simpY)
    apply(clarsimp)
    apply(rename_tac e A B w0 w2x Aa dL eL eLa w wa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
   apply(rename_tac e A B w0 w2x Aa dL eL eLa cL cLa)(*strict*)
   apply(erule impE)
    apply(rename_tac e A B w0 w2x Aa dL eL eLa cL cLa)(*strict*)
    apply(simp add: simpY)
   apply(rename_tac e A B w0 w2x Aa dL eL eLa cL cLa)(*strict*)
   apply(clarsimp)
   apply(rename_tac e A B w0 w2x Aa dL eL eLa w wa)(*strict*)
   apply(rule_tac
      t="(THE w. \<exists>v. teB a2 # liftB \<alpha>2 @ teA B # liftA w0 = liftB w @ liftA v)"
      and s="a2#\<alpha>2"
      in ssubst)
    apply(rename_tac e A B w0 w2x Aa dL eL eLa w wa)(*strict*)
    prefer 2
    apply(rule_tac
      t="(THE w. \<exists>v. liftB \<alpha> @ teA A # liftA w0 = liftB w @ liftA v)"
      and s="\<alpha>"
      in ssubst)
     apply(rename_tac e A B w0 w2x Aa dL eL eLa w wa)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac e A B w0 w2x Aa dL eL eLa w wa)(*strict*)
    apply (metis SPLIT_2_1 liftA.simps(2))
   apply(rename_tac e A B w0 w2x Aa dL eL eLa w wa)(*strict*)
   apply(rule_tac
      t="teB a2 # liftB \<alpha>2 @ teA B # liftA w0"
      and s="liftB (a2#\<alpha>2) @ teA B # liftA w0"
      in ssubst)
    apply(rename_tac e A B w0 w2x Aa dL eL eLa w wa)(*strict*)
    apply(simp (no_asm) add: simpY)
   apply(rename_tac e A B w0 w2x Aa dL eL eLa w wa)(*strict*)
   apply (metis SPLIT_2_1 liftA.simps(2))
  apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
  apply(case_tac w1)
   apply(rename_tac e w1 c A B w0 w1x w2x Aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac e A B w0 w1x w2x Aa)(*strict*)
   apply(case_tac "\<alpha>")
    apply(rename_tac e A B w0 w1x w2x Aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac e A B w0 w1x w2x Aa a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac e w1 c A B w0 w1x w2x Aa a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac e c A B w0 w1x w2x Aa list)(*strict*)
  apply(case_tac \<alpha>)
   apply(rename_tac e c A B w0 w1x w2x Aa list)(*strict*)
   apply(force)
  apply(rename_tac e c A B w0 w1x w2x Aa list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac e c A B w0 w1x w2x Aa list lista)(*strict*)
  apply(subgoal_tac "w1x=[] \<or> (\<exists>w' a'. w1x=w'@[a'])")
   apply(rename_tac e c A B w0 w1x w2x Aa list lista)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac e c A B w0 w1x w2x Aa list lista)(*strict*)
  apply(erule disjE)
   apply(rename_tac e c A B w0 w1x w2x Aa list lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac e c A B w0 w1x w2x Aa list lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac e c A B w0 w2x Aa lista w')(*strict*)
  apply(simp add: simpY)
  done

lemma CFGdetProduceLength2_hlp: "
  F2LR1input G
  \<Longrightarrow> CFGtermLeft G
  \<Longrightarrow> LR1ProdFormSimp G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA (cfg_initial G)]\<rparr> \<pi>1 \<lparr>cfg_conf=liftB \<alpha>@teB b#w1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA (cfg_initial G)]\<rparr> \<pi>2 \<lparr>cfg_conf=liftB \<alpha>@teB b#w2\<rparr>
  \<Longrightarrow> (\<forall>k<length \<pi>1. \<not>(\<exists>w. cfg_conf(the(get_configuration(d1 k)))=liftB \<alpha>@teB b#w))
  \<Longrightarrow> (\<forall>k<length \<pi>2. \<not>(\<exists>w. cfg_conf(the(get_configuration(d2 k)))=liftB \<alpha>@teB b#w))
  \<Longrightarrow> length \<pi>1=length \<pi>2"
  apply(simp add: F2LR1inputx_def F2LR1input_def)
  apply(clarsimp)
  apply(rename_tac Ga)(*strict*)
  apply(subgoal_tac "(\<exists>w1x w2x. cfg_conf \<lparr>cfg_conf = liftB \<alpha>@teB b # w1\<rparr> = liftB w1x @ liftA w2x)")
   apply(rename_tac Ga)(*strict*)
   prefer 2
   apply(simp add: CFGtermLeft_def)
   apply(erule_tac
      x="d1"
      in allE)
   apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
      in allE)
   apply(erule_tac
      x="\<pi>1"
      in allE)
   apply(erule_tac
      x="\<lparr>cfg_conf = liftB \<alpha>@teB b # w1\<rparr>"
      in allE)
   apply(clarsimp)
   apply(erule_tac
      x="[]"
      in allE)
   apply(clarsimp)
   apply(erule_tac
      x="[cfg_initial G]"
      in allE)
   apply(force)
  apply(rename_tac Ga)(*strict*)
  apply(clarsimp)
  apply(rename_tac Ga w1x w2x)(*strict*)
  apply(case_tac w1x)
   apply(rename_tac Ga w1x w2x)(*strict*)
   apply(case_tac w2x)
    apply(rename_tac Ga w1x w2x)(*strict*)
    apply(clarsimp)
   apply(rename_tac Ga w1x w2x a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac Ga a list)(*strict*)
   apply(case_tac "\<alpha>")
    apply(rename_tac Ga a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac Ga a list aa lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac Ga w1x w2x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac Ga w2x a list)(*strict*)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1)(*strict*)
  apply(subgoal_tac "(\<exists>w1x w2x. cfg_conf \<lparr>cfg_conf = liftB \<alpha>@teB b # w2\<rparr> = liftB w1x @ liftA w2x)")
   apply(rename_tac G' \<beta>1 a1 \<alpha>1)(*strict*)
   prefer 2
   apply(simp add: CFGtermLeft_def)
   apply(erule_tac
      x="d2"
      in allE)
   apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
      in allE)
   apply(erule_tac
      x="\<pi>2"
      in allE)
   apply(erule_tac
      x="\<lparr>cfg_conf = liftB \<alpha>@teB b # w2\<rparr>"
      in allE)
   apply(clarsimp)
   apply(erule_tac
      x="[]"
      in allE)
   apply(clarsimp)
   apply(erule_tac
      x="[cfg_initial G]"
      in allE)
   apply(force)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1)(*strict*)
  apply(clarsimp)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 w1x w2x)(*strict*)
  apply(case_tac w1x)
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 w1x w2x)(*strict*)
   apply(case_tac w2x)
    apply(rename_tac G' \<beta>1 a1 \<alpha>1 w1x w2x)(*strict*)
    apply(clarsimp)
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 w1x w2x a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 a list)(*strict*)
   apply(case_tac "\<alpha>")
    apply(rename_tac G' \<beta>1 a1 \<alpha>1 a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 a list aa lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 w1x w2x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 w2x a list)(*strict*)
  apply(rename_tac \<beta>2 a2 \<alpha>2)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2)(*strict*)
  apply(subgoal_tac "\<pi>1=[] \<or> (\<exists>w' a'. \<pi>1=w'@[a'])")
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2)(*strict*)
  apply(erule disjE)
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2)(*strict*)
  apply(clarsimp)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 w' a')(*strict*)
  apply(rename_tac \<pi>1 \<pi>1L)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L)(*strict*)
  apply(subgoal_tac "\<pi>2=[] \<or> (\<exists>w' a'. \<pi>2=w'@[a'])")
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L)(*strict*)
  apply(erule disjE)
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L)(*strict*)
  apply(clarsimp)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L w' a')(*strict*)
  apply(rename_tac \<pi>2 \<pi>2L)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
  apply(subgoal_tac "\<exists>d1' e1 c1 e1' c1'. epdaH.derivation_initial G' d1' \<and> d1' (length \<pi>1) = Some (pair e1 c1) \<and> d1' (Suc (length \<pi>1)) = Some (pair e1' c1') \<and> epdaH_conf_history c1' = epdaH_conf_history c1 @ [b] \<and> epdaH_conf_history c1 = \<alpha> ")
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
   apply(subgoal_tac "\<exists>d2' e2 c2 e2' c2'. epdaH.derivation_initial G' d2' \<and> d2' (length \<pi>2) = Some (pair e2 c2) \<and> d2' (Suc (length \<pi>2)) = Some (pair e2' c2') \<and> epdaH_conf_history c2' = epdaH_conf_history c2 @ [b] \<and> epdaH_conf_history c2 = \<alpha> ")
    apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
    apply(clarsimp)
    apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
    apply(subgoal_tac "(length \<pi>1) = (length \<pi>2) \<and> (\<forall>i\<le>SSn1. SSd1 i = SSd2 i)" for SSn1 SSd1 SSd2)
     apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
     prefer 2
     apply(rule_tac
      G="G'"
      and ?d1.0="d1'"
      and ?d2.0="d2'"
      in SDPDA_derivations_coincide3)
               apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
               apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
              apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
              apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
             apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
             apply(force)
            apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
            apply(force)
           apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
           apply(force)
          apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
          apply(force)
         apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
         apply(force)
        apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
        apply(force)
       apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
       apply(force)
      apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
      apply(force)
     apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
     apply(force)
    apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L d1' d2' e1 c1 e2 c2 e1' c1' e2' c2')(*strict*)
    apply(force)
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
   apply(thin_tac "\<exists>d1' e1 c1 e1' c1'. epdaH.derivation_initial G' d1' \<and> d1' (length \<pi>1) = Some (pair e1 c1) \<and> d1' (Suc (length \<pi>1)) = Some (pair e1' c1') \<and> epdaH_conf_history c1' = epdaH_conf_history c1 @ [b] \<and> epdaH_conf_history c1 = \<alpha>")
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
   apply(thin_tac "cfgLM.trans_der G d1 \<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr> (\<pi>1 @ [\<pi>1L]) \<lparr>cfg_conf = teB a1 # liftB \<alpha>1 @ liftA \<beta>1\<rparr>")
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
   apply(thin_tac "\<forall>k<Suc (length \<pi>1). \<forall>w. cfg_conf (the (get_configuration (d1 k))) \<noteq> liftB \<alpha> @ teB b # w")
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
   apply(rule translate_into_creating_derivation_hlp)
              apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
              apply(force)
             apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
             apply(force)
            apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
            apply(force)
           apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
           apply(force)
          apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
          apply(force)
         apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
         apply(force)
        apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
        apply(force)
       apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
       apply(force)
      apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
      apply(force)
     apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
     apply(force)
    apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
    apply(force)
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
   apply(force)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
  apply(rule translate_into_creating_derivation_hlp)
             apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
             apply(force)
            apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
            apply(force)
           apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
           apply(force)
          apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
          apply(force)
         apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
         apply(force)
        apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
        apply(force)
       apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
       apply(force)
      apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
      apply(force)
     apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
     apply(force)
    apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
    apply(force)
   apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
   apply(force)
  apply(rename_tac G' \<beta>1 a1 \<alpha>1 \<beta>2 a2 \<alpha>2 \<pi>1 \<pi>1L \<pi>2 \<pi>2L)(*strict*)
  apply(force)
  done

lemma CFGdetProduceLength2_hlp2: "
  F2LR1input G'
  \<Longrightarrow> CFGtermLeft G'
  \<Longrightarrow> LR1ProdFormSimp G'
  \<Longrightarrow> cfgLM.trans_der G' d1 \<lparr>cfg_conf = [teA S]\<rparr> \<pi>1 \<lparr>cfg_conf = liftB \<alpha> @ teA A # v1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G' d2 \<lparr>cfg_conf = [teA S]\<rparr> \<pi>2 \<lparr>cfg_conf = liftB \<alpha> @ teA A # v2\<rparr>
  \<Longrightarrow> S \<in> cfg_nonterminals G'
  \<Longrightarrow> cfgLM.derivation_initial G' dA
  \<Longrightarrow> dA nA = Some (pair ea \<lparr>cfg_conf = liftB w1 @ teA S # w2\<rparr>)
  \<Longrightarrow> k \<le> length \<pi>
  \<Longrightarrow> \<forall>i<k. \<not> case_option False (case_derivation_configuration (\<lambda>e c. \<exists>w. cfg_conf c = teB b # w)) (d i)
  \<Longrightarrow> d k = Some (pair e \<lparr>cfg_conf = teB b # w\<rparr>)
  \<Longrightarrow> cfgLM.trans_der G' (derivation_take d k) \<lparr>cfg_conf = [teA A]\<rparr> (take k \<pi>) \<lparr>cfg_conf = teB b # w\<rparr>
  \<Longrightarrow> cfgLM.trans_der G' dA \<lparr>cfg_conf = [teA (cfg_initial G')]\<rparr> (map the (get_labels dA nA)) \<lparr>cfg_conf = liftB w1 @ teA S # w2\<rparr>
  \<Longrightarrow> cfgLM.trans_der G' (derivation_append (derivation_append dA (derivation_map d1 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA))) (derivation_map (derivation_take d k) (\<lambda>v. \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ cfg_conf v @ v1 @ w2\<rparr>)) (length (get_labels dA nA) + length \<pi>1)) \<lparr>cfg_conf = [teA (cfg_initial G')]\<rparr> (map the (get_labels dA nA) @ \<pi>1 @ take k \<pi>) \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ teB b # w @ v1 @ w2\<rparr>
  \<Longrightarrow> ka < length (get_labels dA nA) + (length \<pi>1 + min (length \<pi>) k)
  \<Longrightarrow> cfg_conf (the (case_option None (case_derivation_configuration (\<lambda>e. Some)) (derivation_append (derivation_append dA (derivation_map d1 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA))) (derivation_map (derivation_take d k) (\<lambda>v. \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ cfg_conf v @ v1 @ w2\<rparr>)) (length (get_labels dA nA) + length \<pi>1) ka))) = liftB (w1 @ \<alpha>) @ teB b # wa
  \<Longrightarrow> False"
  apply(subgoal_tac "\<exists>e c. (derivation_append (derivation_append dA (derivation_map d1 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA))) (derivation_map (derivation_take d k) (\<lambda>v. \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ cfg_conf v @ v1 @ w2\<rparr>)) (length (get_labels dA nA) + length \<pi>1)) ka = Some (pair e c)")
   prefer 2
   apply(simp only: cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac eb eaa eba ec ed)(*strict*)
   apply(rule_tac
      m="length ((map the (get_labels dA nA) @ \<pi>1 @ take k \<pi>))"
      in cfgLM.pre_some_position_is_some_position)
     apply(rename_tac eb eaa eba ec ed)(*strict*)
     apply(force)
    apply(rename_tac eb eaa eba ec ed)(*strict*)
    apply(force)
   apply(rename_tac eb eaa eba ec ed)(*strict*)
   apply(force)
  apply(clarsimp)
  apply(rename_tac eb c)(*strict*)
  apply(case_tac c)
  apply(rename_tac eb c cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac eb)(*strict*)
  apply(subgoal_tac "length(get_labels dA nA)=nA")
   apply(rename_tac eb)(*strict*)
   prefer 2
   apply (metis get_labels_length)
  apply(rename_tac eb)(*strict*)
  apply(case_tac "k")
   apply(rename_tac eb)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
  apply(rename_tac eb nat)(*strict*)
  apply(clarsimp)
  apply(rename_tac n)
  apply(rename_tac eb n)(*strict*)
  apply(erule_tac
      x="n"
      in allE)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>e c. (derivation_take d (Suc n)) n = Some (pair e c)")
   apply(rename_tac eb n)(*strict*)
   prefer 2
   apply(simp only: F2LR1inputx_def F2LR1input_def cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac eb n G eaa eba ec ed ee)(*strict*)
   apply(rule_tac
      g="(derivation_take d (Suc n))"
      and M="G'"
      and m="Suc n"
      in cfgLM.pre_some_position_is_some_position)
     apply(rename_tac eb n G eaa eba ec ed ee)(*strict*)
     apply(force)
    apply(rename_tac eb n G eaa eba ec ed ee)(*strict*)
    apply(simp add: derivation_take_def)
   apply(rename_tac eb n G eaa eba ec ed ee)(*strict*)
   apply(force)
  apply(rename_tac eb n)(*strict*)
  apply(clarsimp)
  apply(rename_tac eb n eaa c)(*strict*)
  apply(case_tac "d n")
   apply(rename_tac eb n eaa c)(*strict*)
   apply(simp add: derivation_take_def)
  apply(rename_tac eb n eaa c a)(*strict*)
  apply(clarsimp)
  apply(case_tac a)
  apply(rename_tac eb n eaa c a option ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac eb n eaa c option ba)(*strict*)
  apply(subgoal_tac "c=ba")
   apply(rename_tac eb n eaa c option ba)(*strict*)
   prefer 2
   apply(simp add: derivation_take_def)
  apply(rename_tac eb n eaa c option ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac eb n eaa option ba)(*strict*)
  apply(subgoal_tac "\<exists>w. cfg_get_history \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ teB b # wa\<rparr> @ w = cfg_get_history ((\<lambda>v. \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ cfg_conf v @ v1 @ w2\<rparr>)ba)")
   apply(rename_tac eb n eaa option ba)(*strict*)
   prefer 2
   apply(simp only: F2LR1inputx_def F2LR1input_def cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac eb n eaa option ba G eba ec ed ee ef)(*strict*)
   apply(rule_tac
      ?eij.0="if \<pi>1=[] then (if n=0 then ee else eaa) else (if n=0 then eba else eaa)"
      and P="G'"
      and d="derivation_append (derivation_append dA (derivation_map d1 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) nA) (derivation_map (derivation_take d (Suc n)) (\<lambda>v. \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ cfg_conf v @ v1 @ w2\<rparr>)) (nA + length \<pi>1)"
      and i="ka"
      and j="(nA+length \<pi>1+n-ka)"
      in cfgLM.derivation_monotonically_inc)
        apply(rename_tac eb n eaa option ba G eba ec ed ee ef)(*strict*)
        apply(force)
       apply(rename_tac eb n eaa option ba G eba ec ed ee ef)(*strict*)
       apply(force)
      apply(rename_tac eb n eaa option ba G eba ec ed ee ef)(*strict*)
      apply(force)
     apply(rename_tac eb n eaa option ba G eba ec ed ee ef)(*strict*)
     apply(force)
    apply(rename_tac eb n eaa option ba G eba ec ed ee ef)(*strict*)
    apply(force)
   apply(rename_tac eb n eaa option ba G eba ec ed ee ef)(*strict*)
   apply(rule_tac
      t="(ka + (nA + length \<pi>1 + n - ka))"
      and s="nA + length \<pi>1 + n"
      in ssubst)
    apply(rename_tac eb n eaa option ba G eba ec ed ee ef)(*strict*)
    apply(force)
   apply(rename_tac eb n eaa option ba G eba ec ed ee ef)(*strict*)
   apply(simp add: derivation_append_def derivation_map_def)
   apply(case_tac "\<pi>1")
    apply(rename_tac eb n eaa option ba G eba ec ed ee ef)(*strict*)
    apply(clarsimp)
    apply(rename_tac eb option G ec ed ef)(*strict*)
    apply(case_tac "\<alpha>")
     apply(rename_tac eb option G ec ed ef)(*strict*)
     apply(clarsimp)
    apply(rename_tac eb option G ec ed ef a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac eb n eaa option ba G eba ec ed ee ef a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac eb option G eba ec ed ef a list)(*strict*)
   apply(simp add: simpY)
  apply(rename_tac eb n eaa option ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac eb n eaa option ba wb)(*strict*)
  apply(simp add: cfg_get_history_def)
  apply(case_tac ba)
  apply(rename_tac eb n eaa option ba wb cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac eb n eaa option wb cfg_confa)(*strict*)
  apply(rename_tac wXX)
  apply(rename_tac eb n eaa option wb wXX)(*strict*)
  apply(case_tac "wXX")
   apply(rename_tac eb n eaa option wb wXX)(*strict*)
   apply(clarsimp)
   apply(rename_tac eb n eaa option wb)(*strict*)
   apply(simp only: cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac eb n eaa option wb eba ec ed ee ef)(*strict*)
   apply(subgoal_tac "\<exists>e1 e2 c1 c2. (derivation_take d (Suc n)) n = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G' c1 e2 c2" for SSd SSn)
    apply(rename_tac eb n eaa option wb eba ec ed ee ef)(*strict*)
    prefer 2
    apply(rule_tac
      m="Suc n"
      and d="(derivation_take d (Suc n))"
      in cfgLM.step_detail_before_some_position)
      apply(rename_tac eb n eaa option wb eba ec ed ee ef)(*strict*)
      apply(force)
     apply(rename_tac eb n eaa option wb eba ec ed ee ef)(*strict*)
     apply(simp add: derivation_take_def)
    apply(rename_tac eb n eaa option wb eba ec ed ee ef)(*strict*)
    apply(force)
   apply(rename_tac eb n eaa option wb eba ec ed ee ef)(*strict*)
   apply(clarsimp)
   apply(rename_tac eb n eaa option wb eba ec ed ef e2 c2)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
  apply(rename_tac eb n eaa option wb wXX a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac eb n eaa option wb a list)(*strict*)
  apply(case_tac "a=teB b")
   apply(rename_tac eb n eaa option wb a list)(*strict*)
   apply(force)
  apply(rename_tac eb n eaa option wb a list)(*strict*)
  apply(clarsimp)
  apply(case_tac a)
   apply(rename_tac eb n eaa option wb a list aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac eb n eaa option wb list aa)(*strict*)
   apply (metis maxTermPrefix_pull_out append_Cons append_eq_appendI append_injective2 list.simps(3) maxTermPrefix_drop_tail maxTermPrefix_shift maxTermPrefix_term_string self_append_conv)
  apply(rename_tac eb n eaa option wb a list ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac eb n eaa option wb list ba)(*strict*)
  apply (metis maxTermPrefix_pull_out append_Cons append_eq_appendI append_injective2 eq_Nil_appendI hlp1_renamed maxTermPrefix_shift)
  done

lemma F2LR1input_implies_CFGdetProduceLength2: "
  F2LR1input G'
  \<Longrightarrow> CFGtermLeft G'
  \<Longrightarrow> LR1ProdFormSimp G'
  \<Longrightarrow> CFGdetProduceLength2 G'"
  apply(simp add: CFGdetProduceLength2_def)
  apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
  apply(subgoal_tac "\<exists>\<pi>A \<pi>P d1 d2 w1 w2 \<alpha>. cfgLM.trans_der G' d1 \<lparr>cfg_conf=[teA (cfg_initial G')]\<rparr> (\<pi>A@\<pi>1@\<pi>P) \<lparr>cfg_conf=liftB \<alpha>@teB b#w1\<rparr> \<and> (\<forall>k<length (\<pi>A@\<pi>1@\<pi>P). \<not>(\<exists>w. cfg_conf(the(get_configuration(d1 k)))=liftB \<alpha>@teB b#w)) \<and> cfgLM.trans_der G' d2 \<lparr>cfg_conf=[teA (cfg_initial G')]\<rparr> (\<pi>A@\<pi>2@\<pi>P) \<lparr>cfg_conf=liftB \<alpha>@teB b#w2\<rparr> \<and> (\<forall>k<length (\<pi>A@\<pi>2@\<pi>P). \<not>(\<exists>w. cfg_conf(the(get_configuration(d2 k)))=liftB \<alpha>@teB b#w))")
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 \<pi>A \<pi>P d1a d2a w1 w2 \<alpha>')(*strict*)
   apply(subgoal_tac "length(\<pi>A@\<pi>1@\<pi>P) = length(\<pi>A@\<pi>2@\<pi>P)")
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 \<pi>A \<pi>P d1a d2a w1 w2 \<alpha>')(*strict*)
    prefer 2
    apply(rule_tac
      ?d1.0="d1a"
      and ?d2.0="d2a"
      in CFGdetProduceLength2_hlp)
          apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 \<pi>A \<pi>P d1a d2a w1 w2 \<alpha>')(*strict*)
          apply(force)
         apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 \<pi>A \<pi>P d1a d2a w1 w2 \<alpha>')(*strict*)
         apply(force)
        apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 \<pi>A \<pi>P d1a d2a w1 w2 \<alpha>')(*strict*)
        apply(force)
       apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 \<pi>A \<pi>P d1a d2a w1 w2 \<alpha>')(*strict*)
       apply(force)
      apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 \<pi>A \<pi>P d1a d2a w1 w2 \<alpha>')(*strict*)
      apply(force)
     apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 \<pi>A \<pi>P d1a d2a w1 w2 \<alpha>')(*strict*)
     apply(force)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 \<pi>A \<pi>P d1a d2a w1 w2 \<alpha>')(*strict*)
    apply(force)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 \<pi>A \<pi>P d1a d2a w1 w2 \<alpha>')(*strict*)
   apply(force)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
  apply(subgoal_tac "S \<in> cfg_nonterminals G' \<and> (\<exists>d. cfgLM.derivation_initial G' d \<and> (\<exists>n c. get_configuration (d n) = Some c \<and> (\<exists>w1 w2. cfg_conf c = liftB w1 @ teA S # w2)))")
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
   prefer 2
   apply(subgoal_tac "S \<in> cfgLM_accessible_nonterminals G'")
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
    apply(simp add: cfgLM_accessible_nonterminals_def)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
   apply(subgoal_tac "S \<in> cfg_nonterminals G'")
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
    apply(simp add: F2LR1inputx_def F2LR1input_def)
    apply(force)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
   apply(subgoal_tac "\<lparr>cfg_conf = [teA S]\<rparr> \<in> cfg_configurations G'")
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
    prefer 2
    apply(simp only: cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 e ea eb)(*strict*)
    apply(rule_tac
      d="d1"
      in cfgLM.belongs_configurations)
     apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 e ea eb)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 e ea eb)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
   apply(simp add: cfg_configurations_def)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 da n c w1 w2)(*strict*)
  apply(simp add: get_configuration_def)
  apply(case_tac "da n")
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 da n c w1 w2)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 da n c w1 w2 a)(*strict*)
  apply(clarsimp)
  apply(case_tac a)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 da n c w1 w2 a option ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 da n c w1 w2 option)(*strict*)
  apply(rename_tac e)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 da n c w1 w2 e)(*strict*)
  apply(case_tac c)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 da n c w1 w2 e cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 da n w1 w2 e)(*strict*)
  apply(rename_tac dA nA w1 w2 e)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e)(*strict*)
  apply(rule_tac
      x="map the (get_labels dA nA)"
      in exI)
  apply(subgoal_tac "\<exists>k\<le>SSn. (\<forall>i<k. \<not> (case SSd i of None \<Rightarrow> False | Some (pair e c) \<Rightarrow> SSP c)) \<and> (case SSd k of None \<Rightarrow> False | Some (pair e c) \<Rightarrow> SSP c)" for SSn SSd SSP)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e)(*strict*)
   prefer 2
   apply(simp only: cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e ea eb ec)(*strict*)
   apply(rule_tac
      d="d"
      and n="length \<pi>"
      and P="\<lambda>c. \<exists>w. cfg_conf c=teB b#w"
      in cfgLM.existence_of_earliest_satisfaction_point)
     apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e ea eb ec)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e ea eb ec)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e ea eb ec)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e k)(*strict*)
  apply(case_tac "d k")
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e k)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e k a)(*strict*)
  apply(clarsimp)
  apply(case_tac a)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e k a option ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e k option ba w)(*strict*)
  apply(case_tac ba)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e k option ba w cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 e k option w)(*strict*)
  apply(rename_tac e w)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
  apply(subgoal_tac "cfgLM.trans_der SSG (derivation_take d k) SSc (take SSn SSrenPI) SScn" for SSG SSc SSn SSrenPI SScn)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
   prefer 2
   apply(rule_tac
      G="G'"
      in cfgLM.trans_der_crop_via_take)
       apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
       prefer 5
       apply(force)
      apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
      apply(simp add: F2LR1inputx_def F2LR1input_def)
      apply(force)
     apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
   apply(simp add: get_configuration_def)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
  apply(thin_tac "cfgLM.trans_der G' d \<lparr>cfg_conf = [teA A]\<rparr> \<pi> \<lparr>cfg_conf = teB b # v3\<rparr>")
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
  apply(rule_tac
      x="take k \<pi>"
      in exI)
  apply(subgoal_tac "cfgLM.trans_der G' dA \<lparr>cfg_conf=[teA (cfg_initial G')]\<rparr> (map the (get_labels dA nA)) \<lparr>cfg_conf = liftB w1 @ teA S # w2\<rparr>")
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
   prefer 2
   apply(simp add: cfgLM.trans_der_def)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   apply(rule conjI)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
    apply(simp add: cfgLM.derivation_initial_def)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   apply(rule conjI)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
    apply(rule cfgLM.derivation_initial_belongs)
     apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
     apply(simp add: F2LR1inputx_def F2LR1input_def)
     apply(force)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   apply(rule_tac
      t="length (get_labels dA nA)"
      and s="nA"
      in ssubst)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
    apply (metis get_labels_length)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   apply(rule conjI)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
    apply(rule cfgLM.get_labels_the_Some_on_defined_positions)
     apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
     apply(simp add: cfgLM.derivation_initial_def)
     apply(force)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   apply(simp add: cfgLM.derivation_initial_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w eb ec ed)(*strict*)
   apply(case_tac "dA 0")
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w eb ec ed)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w eb ec ed a)(*strict*)
   apply(clarsimp)
   apply(case_tac a)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w eb ec ed a option ba)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w eb ec ed ba)(*strict*)
   apply(simp add: cfg_initial_configurations_def)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
  apply(subgoal_tac "cfgLM.trans_der SSG SSd \<lparr>cfg_conf = SSw1\<rparr> (SSrenPI10 @ SSrenPI20) \<lparr>cfg_conf = liftB SSv1 @ SSv3 @ SSv4\<rparr>" for SSG SSd SSw1 SSrenPI10 SSrenPI20 SSv1 SSv3 SSv4)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
   prefer 2
   apply(rule_tac
      ?d1.0="dA"
      and ?d2.0="d1"
      and ?v1.0="w1"
      and ?v2.0="[teA S]"
      and ?v4.0="w2"
      in cfgLM_trans_der_concat_extend)
     apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
     apply(simp add: F2LR1inputx_def F2LR1input_def)
     apply(force)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b v3 dA nA w1 w2 ea k e w)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
  apply(subgoal_tac "cfgLM.trans_der SSG SSd \<lparr>cfg_conf = SSw1\<rparr> (SSrenPI10 @ SSrenPI20) \<lparr>cfg_conf = liftB SSv1 @ SSv3 @ SSv4\<rparr>" for SSG SSd SSw1 SSrenPI10 SSrenPI20 SSv1 SSv3 SSv4)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   prefer 2
   apply(rule_tac
      ?d1.0="(derivation_append dA (derivation_map d1 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA)))"
      and ?d2.0="(derivation_take d k)"
      and ?v1.0="w1@\<alpha>"
      and ?v2.0="[teA A]"
      and ?v4.0="v1@w2"
      in cfgLM_trans_der_concat_extend)
     apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
     apply(simp add: F2LR1inputx_def F2LR1input_def)
     apply(force)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
    apply(simp add: simpY)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
  apply(clarsimp)
  apply(rule_tac
      x="(derivation_append (derivation_append dA (derivation_map d1 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA))) (derivation_map (derivation_take d k) (\<lambda>v. \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ cfg_conf v @ v1 @ w2\<rparr>)) (length (get_labels dA nA) + length \<pi>1))"
      in exI)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
  apply(thin_tac "cfgLM.trans_der G' (derivation_append dA (derivation_map d1 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA))) \<lparr>cfg_conf = [teA (cfg_initial G')]\<rparr> (map the (get_labels dA nA) @ \<pi>1) \<lparr>cfg_conf = liftB w1 @ liftB \<alpha> @ teA A # v1 @ w2\<rparr>")
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
  apply(subgoal_tac "cfgLM.trans_der SSG SSd \<lparr>cfg_conf = SSw1\<rparr> (SSrenPI10 @ SSrenPI20) \<lparr>cfg_conf = liftB SSv1 @ SSv3 @ SSv4\<rparr>" for SSG SSd SSw1 SSrenPI10 SSrenPI20 SSv1 SSv3 SSv4)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   prefer 2
   apply(rule_tac
      ?d1.0="dA"
      and ?d2.0="d2"
      and ?v1.0="w1"
      and ?v2.0="[teA S]"
      and ?v4.0="w2"
      in cfgLM_trans_der_concat_extend)
     apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
     apply(simp add: F2LR1inputx_def F2LR1input_def)
     apply(force)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "cfgLM.trans_der SSG SSd \<lparr>cfg_conf = SSw1\<rparr> (SSrenPI10 @ SSrenPI20) \<lparr>cfg_conf = liftB SSv1 @ SSv3 @ SSv4\<rparr>" for SSG SSd SSw1 SSrenPI10 SSrenPI20 SSv1 SSv3 SSv4)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   prefer 2
   apply(rule_tac
      ?d1.0="(derivation_append dA (derivation_map d2 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA)))"
      and ?d2.0="(derivation_take d k)"
      and ?v1.0="w1@\<alpha>"
      and ?v2.0="[teA A]"
      and ?v4.0="v2@w2"
      in cfgLM_trans_der_concat_extend)
     apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
     apply(simp add: F2LR1inputx_def F2LR1input_def)
     apply(force)
    apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
    apply(simp add: simpY)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
  apply(clarsimp)
  apply(thin_tac "cfgLM.trans_der G' (derivation_append dA (derivation_map d2 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA))) \<lparr>cfg_conf = [teA (cfg_initial G')]\<rparr> (map the (get_labels dA nA) @ \<pi>2) \<lparr>cfg_conf = liftB w1 @ liftB \<alpha> @ teA A # v2 @ w2\<rparr>")
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
  apply(rule_tac
      x="(derivation_append (derivation_append dA (derivation_map d2 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA))) (derivation_map (derivation_take d k) (\<lambda>v. \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ cfg_conf v @ v2 @ w2\<rparr>)) (length (get_labels dA nA) + length \<pi>2))"
      in exI)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
  apply(rule_tac
      x="w@v1@w2"
      in exI)
  apply(rule_tac
      x="w@v2@w2"
      in exI)
  apply(rule_tac
      x="w1@\<alpha>"
      in exI)
  apply(clarsimp)
  apply(rule conjI)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w ka wa)(*strict*)
   apply(thin_tac "cfgLM.trans_der G' (derivation_append (derivation_append dA (derivation_map d2 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA))) (derivation_map (derivation_take d k) (\<lambda>v. \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ cfg_conf v @ v2 @ w2\<rparr>)) (length (get_labels dA nA) + length \<pi>2)) \<lparr>cfg_conf = [teA (cfg_initial G')]\<rparr> (map the (get_labels dA nA) @ \<pi>2 @ take k \<pi>) \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ teB b # w @ v2 @ w2\<rparr>")
   apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w ka wa)(*strict*)
   apply(rule CFGdetProduceLength2_hlp2)
                  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w ka wa)(*strict*)
                  apply(force)+
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w ka wa)(*strict*)
  apply(thin_tac "cfgLM.trans_der G' (derivation_append (derivation_append dA (derivation_map d1 (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length (get_labels dA nA))) (derivation_map (derivation_take d k) (\<lambda>v. \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ cfg_conf v @ v1 @ w2\<rparr>)) (length (get_labels dA nA) + length \<pi>1)) \<lparr>cfg_conf = [teA (cfg_initial G')]\<rparr> (map the (get_labels dA nA) @ \<pi>1 @ take k \<pi>) \<lparr>cfg_conf = liftB (w1 @ \<alpha>) @ teB b # w @ v1 @ w2\<rparr>")
  apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w ka wa)(*strict*)
  apply(rule_tac
      ?d1.0="d2"
      in CFGdetProduceLength2_hlp2)
                 apply(rename_tac d1 d2 d \<pi>1 \<pi>2 S \<alpha> A v1 v2 \<pi> b dA nA w1 w2 ea k e w ka wa)(*strict*)
                 apply(force)+
  done

lemma F2LR1input_implies_CFGprodXORelim: "
  F2LR1input G'
  \<Longrightarrow> LR1ProdFormSimp G'
  \<Longrightarrow> LR1ProdForm G'
  \<Longrightarrow> cfg_nonterminals G' = cfgSTD_Nonblockingness_nonterminals G'
  \<Longrightarrow> cfg_nonterminals G' = cfgLM_accessible_nonterminals G'
  \<Longrightarrow> CFGprodXORelim G'"
  apply(simp add: CFGprodXORelim_def)
  apply(clarsimp)
  apply(rename_tac d1 A \<pi>1 d2 \<pi>2 b w)(*strict*)
  apply(case_tac A)
   apply(rename_tac d1 A \<pi>1 d2 \<pi>2 b w q ba)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q ba)(*strict*)
   apply(simp add: CFG_not_end_nterm_def F2LR1inputx_def F2LR1input_def)
   apply(clarsimp)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q ba G d n e w1 w2)(*strict*)
   apply(thin_tac "cfgLM.trans_der G' d1 \<lparr>cfg_conf = [teA (cons_l2   q ba)]\<rparr> \<pi>1 \<lparr>cfg_conf = []\<rparr>")
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q ba G d n e w1 w2)(*strict*)
   apply(thin_tac "cfgLM.trans_der G' d2 \<lparr>cfg_conf = [teA (cons_l2   q ba)]\<rparr> \<pi>2 \<lparr>cfg_conf = teB b # w\<rparr>")
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q ba G d n e w1 w2)(*strict*)
   apply(subgoal_tac "\<exists>w1x w2x. w1 @ teA (cons_l2   q ba) # w2=w1x@w2x \<and> setA w1x={} \<and> setB w2x={}")
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q ba G d n e w1 w2)(*strict*)
    prefer 2
    apply(rule singleIsertionOfLM_rechable_conf_form)
       apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q ba G d n e w1 w2)(*strict*)
       apply(force)
      apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q ba G d n e w1 w2)(*strict*)
      apply(force)
     apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q ba G d n e w1 w2)(*strict*)
     apply(rule LR1ProdFormSimp_implies_singleIsertionOfLM)
     apply(force)
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q ba G d n e w1 w2)(*strict*)
    apply(force)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q ba G d n e w1 w2)(*strict*)
   apply(clarsimp)
   apply(rename_tac q ba G d n e w1 w2 w1x w2x)(*strict*)
   apply(subgoal_tac "\<exists>l'. liftB l' = w1x")
    apply(rename_tac q ba G d n e w1 w2 w1x w2x)(*strict*)
    prefer 2
    apply(rule_tac
      x="filterB w1x"
      in exI)
    apply (rule liftBDeConv2)
    apply(force)
   apply(rename_tac q ba G d n e w1 w2 w1x w2x)(*strict*)
   apply(clarsimp)
   apply(rename_tac q ba G d n e w1 w2 w2x l')(*strict*)
   apply(thin_tac "setA (liftB l') = {}")
   apply(subgoal_tac "\<exists>l'. liftA l' = w2x")
    apply(rename_tac q ba G d n e w1 w2 w2x l')(*strict*)
    prefer 2
    apply(rule_tac
      x="filterA w2x"
      in exI)
    apply (metis setB_empty_then_liftA_vs_filterA)
   apply(rename_tac q ba G d n e w1 w2 w2x l')(*strict*)
   apply(clarsimp)
   apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
   apply(thin_tac "setB (liftA l'a) = {}")
   apply(subgoal_tac "l3_l2_separation_ALT l'a")
    apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
    prefer 2
    apply(rule_tac
      d="d"
      in cfgLM_reachable_conf_isl3_l2_separation_ALT_stack)
         apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
         apply(force)
        apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
        apply(force)
       apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
       apply(force)
      apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
      apply (metis cfg_sub_preserves_cfgLM_derivation_initial)
     apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
     apply(force)
    apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
    apply(force)
   apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
   apply(simp add: l3_l2_separation_ALT_def)
   apply(subgoal_tac "w2=[] \<or> (\<exists>w' a'. w2=w'@[a'])")
    apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
    prefer 2
    apply(rule case_list)
   apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
   apply(erule disjE)
    apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
    apply(clarsimp)
   apply(rename_tac q ba G d n e w1 w2 l' l'a)(*strict*)
   apply(clarsimp)
   apply(rename_tac q ba G d n e w1 l' l'a w' a')(*strict*)
   apply(case_tac "l'a")
    apply(rename_tac q ba G d n e w1 l' l'a w' a')(*strict*)
    apply(clarsimp)
    apply(rename_tac q ba G d n e w1 l' w' a')(*strict*)
    apply (metis setA_liftB elemInsetA emptyE)
   apply(rename_tac q ba G d n e w1 l' l'a w' a' a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac q ba G d n e w1 l' w' a' a list)(*strict*)
   apply(subgoal_tac "list=[] \<or> (\<exists>w' a'. list=w'@[a'])")
    apply(rename_tac q ba G d n e w1 l' w' a' a list)(*strict*)
    prefer 2
    apply(rule case_list)
   apply(rename_tac q ba G d n e w1 l' w' a' a list)(*strict*)
   apply(erule disjE)
    apply(rename_tac q ba G d n e w1 l' w' a' a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac q ba G d n e w1 l' w' a)(*strict*)
    apply (metis setA_liftB elemInsetA emptyE)
   apply(rename_tac q ba G d n e w1 l' w' a' a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac q ba G d n e w1 l' w' a' a w'a a'a)(*strict*)
   apply(simp add: simpY)
   apply(case_tac a'a)
    apply(rename_tac q ba G d n e w1 l' w' a' a w'a a'a qa b)(*strict*)
    prefer 2
    apply(rename_tac q ba G d n e w1 l' w' a' a w'a a'a q1 b q2)(*strict*)
    apply(force)
   apply(rename_tac q ba G d n e w1 l' w' a' a w'a a'a qa b)(*strict*)
   apply(clarsimp)
   apply(rename_tac q ba G d n e w1 l' w' a w'a qa b)(*strict*)
   apply(case_tac a)
    apply(rename_tac q ba G d n e w1 l' w' a w'a qa b qb bb)(*strict*)
    apply(force)
   apply(rename_tac q ba G d n e w1 l' w' a w'a qa b q1 bb q2)(*strict*)
   apply(clarsimp)
   apply(rename_tac q ba G d n e w1 l' w' w'a qa b q1 bb q2)(*strict*)
   apply(subgoal_tac "prefix w1 (liftB l') \<or> prefix (liftB l') w1")
    apply(rename_tac q ba G d n e w1 l' w' w'a qa b q1 bb q2)(*strict*)
    prefer 2
    apply(rule mutual_prefix_prefix)
    apply(force)
   apply(rename_tac q ba G d n e w1 l' w' w'a qa b q1 bb q2)(*strict*)
   apply(erule disjE)
    apply(rename_tac q ba G d n e w1 l' w' w'a qa b q1 bb q2)(*strict*)
    apply(simp add: prefix_def)
    apply(clarsimp)
    apply(rename_tac q ba G d n e w1 l' w' w'a qa b q1 bb q2 c)(*strict*)
    apply(subgoal_tac "\<exists>l'. liftB l' = w1")
     apply(rename_tac q ba G d n e w1 l' w' w'a qa b q1 bb q2 c)(*strict*)
     prefer 2
     apply(rule_tac
      x="filterB w1"
      in exI)
     apply (rule liftBDeConv2)
     apply (metis setA_substring)
    apply(rename_tac q ba G d n e w1 l' w' w'a qa b q1 bb q2 c)(*strict*)
    apply(clarsimp)
    apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 c l'a)(*strict*)
    apply(subgoal_tac "\<exists>l'. liftB l' = c")
     apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 c l'a)(*strict*)
     prefer 2
     apply(rule_tac
      x="filterB c"
      in exI)
     apply (rule liftBDeConv2)
     apply (metis setA_substring_prime)
    apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 c l'a)(*strict*)
    apply(clarsimp)
    apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 l'a l'b)(*strict*)
    apply(subgoal_tac "l'a@l'b=l'")
     apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 l'a l'b)(*strict*)
     prefer 2
     apply(rule liftB_inj)
     apply(simp add: simpY)
    apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 l'a l'b)(*strict*)
    apply(clarsimp)
    apply(rename_tac q ba G d n e w' w'a qa b q1 bb q2 l'a l'b)(*strict*)
    apply(thin_tac "liftB l'a @ liftB l'b = liftB (l'a @ l'b)")
    apply(simp add: simpY)
    apply(case_tac l'b)
     apply(rename_tac q ba G d n e w' w'a qa b q1 bb q2 l'a l'b)(*strict*)
     apply(clarsimp)
    apply(rename_tac q ba G d n e w' w'a qa b q1 bb q2 l'a l'b a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac q ba G d n e w1 l' w' w'a qa b q1 bb q2)(*strict*)
   apply(simp add: prefix_def)
   apply(clarsimp)
   apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 c)(*strict*)
   apply(case_tac c)
    apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 c)(*strict*)
    apply(clarsimp)
   apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 c a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 list)(*strict*)
   apply(erule_tac
      x="cons_l2 q ba"
      in ballE)
    apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 list)(*strict*)
    apply(force)
   apply(rename_tac q ba G d n e l' w' w'a qa b q1 bb q2 list)(*strict*)
   apply (metis filterA_liftA filterA_preserves_setA elemInsetA)
  apply(rename_tac d1 A \<pi>1 d2 \<pi>2 b w q1 ba q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2)(*strict*)
  apply(subgoal_tac "\<lparr>cfg_conf = teB b # w\<rparr> \<in> cfg_configurations G'")
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 e ea)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac
      d="d2"
      in cfgLM.belongs_configurations)
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 e ea)(*strict*)
    apply(force)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 e ea)(*strict*)
   apply(force)
  apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2)(*strict*)
  apply(subgoal_tac "\<exists>d v \<pi>. cfgLM.trans_der G' d \<lparr>cfg_conf=teB b#w\<rparr> \<pi> \<lparr>cfg_conf=liftB v\<rparr>")
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2)(*strict*)
   prefer 2
   apply(rule cfgLM_trans_der_construct_elimininating_derivation_prime)
      apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2)(*strict*)
      apply(simp add: F2LR1inputx_def F2LR1input_def)
      apply(force)
     apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2)(*strict*)
     apply(simp add: F2LR1inputx_def F2LR1input_def)
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2)(*strict*)
    apply(simp add: cfg_configurations_def)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2)(*strict*)
   apply(simp add: cfg_configurations_def)
  apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi>)(*strict*)
  apply(simp add: F2LR1inputx_def F2LR1input_def)
  apply(case_tac v)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi>)(*strict*)
   apply(subgoal_tac "\<exists>w. cfg_get_history SSci @ w = cfg_get_history SScij" for SSci SScij)
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi>)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi> G e ea eb)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      P="G'"
      and d="d"
      and i="0"
      and j="length \<pi>"
      in cfgLM.derivation_monotonically_inc)
         apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi> G e ea eb)(*strict*)
         apply(force)
        apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi> G e ea eb)(*strict*)
        apply(force)
       apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi> G e ea eb)(*strict*)
       apply(force)
      apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi> G e ea eb)(*strict*)
      apply(force)
     apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi> G e ea eb)(*strict*)
     apply(force)
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi> G e ea eb)(*strict*)
    apply(force)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi>)(*strict*)
   apply(simp add: cfg_get_history_def)
   apply(case_tac "maxTermPrefix (teB b # w)")
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi>)(*strict*)
    apply (metis maxTermPrefix_pull_out list.simps(2))
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi> a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a list G wa)(*strict*)
   apply(subgoal_tac "maxTermPrefix [] = []")
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a list G wa)(*strict*)
    apply(subgoal_tac "a#list@wa=[]")
     apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a list G wa)(*strict*)
     apply(force)
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a list G wa)(*strict*)
    apply(force)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a list G wa)(*strict*)
   apply (metis list.simps(2) maxTermPrefix_vs_maximalPrefixB maximalPrefixB.simps(1))
  apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d v \<pi> a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a list G)(*strict*)
  apply(rename_tac a v1 G)
  apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a v1 G)(*strict*)
  apply(subgoal_tac "\<exists>d. cfgLM.trans_der SSG d \<lparr>cfg_conf = SSw1\<rparr> (SSrenPI10 @ SSrenPI20) \<lparr>cfg_conf = liftB SSv1 @ SSv3 @ SSv4\<rparr>" for SSG SSw1 SSrenPI10 SSrenPI20 SSv1 SSv3 SSv4)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a v1 G)(*strict*)
   prefer 2
   apply(rule_tac
      ?d1.0="d2"
      and ?d2.0="d"
      and ?v1.0="[]"
      and ?v2.0="teB b#w"
      and ?v4.0="[]"
      in cfgLM_trans_der_concat_extend_prime)
     apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a v1 G)(*strict*)
     apply(force)
    apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a v1 G)(*strict*)
    apply(force)
   apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a v1 G)(*strict*)
   apply(force)
  apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a v1 G)(*strict*)
  apply(thin_tac "cfgLM.trans_der G' d2 \<lparr>cfg_conf = [teA (cons_l3   q1 ba q2)]\<rparr> \<pi>2 \<lparr>cfg_conf = teB b # w\<rparr>")
  apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a v1 G)(*strict*)
  apply(thin_tac "cfgLM.trans_der G' d \<lparr>cfg_conf = teB b # w\<rparr> \<pi> \<lparr>cfg_conf = teB a#liftB v1\<rparr>")
  apply(rename_tac d1 \<pi>1 d2 \<pi>2 b w q1 ba q2 d \<pi> a v1 G)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
  apply(subgoal_tac "\<pi>1 = (\<pi>2@\<pi>) \<and> q2=q2 \<and> []=a#v1")
   apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
   prefer 2
   apply(rule eliminating_derivations_are_equal_with_differing_future6)
          apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
          apply(force)
         apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
         apply(force)
        apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
        apply(force)
       apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
       apply(force)
      apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
      apply(force)
     apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
     apply(force)
    apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
    apply(force)
   apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
   apply(force)
  apply(rename_tac d1 \<pi>1 \<pi>2 b w q1 ba q2 \<pi> a v1 G d)(*strict*)
  apply(force)
  done

theorem F2LR1input_implies_split_TSstructure: "
  F2LR1input G'
  \<Longrightarrow> split_TSstructure G'"
  apply(simp add: F2LR1inputx_def F2LR1input_def split_TSstructure_def)
  apply(clarsimp)
  apply(rename_tac G)(*strict*)
  apply(rule context_conjI)
   apply(rename_tac G)(*strict*)
   apply(rule reachable_and_eliminiable_implies_eliminable)
   apply(force)
  apply(rename_tac G)(*strict*)
  apply(rule context_conjI)
   apply(rename_tac G)(*strict*)
   apply(rule F_SDPDA_TO_CFG_STD__produces_CFGlm_unambiguous)
        apply(rename_tac G)(*strict*)
        apply(force)
       apply(rename_tac G)(*strict*)
       apply(force)
      apply(rename_tac G)(*strict*)
      apply(force)
     apply(rename_tac G)(*strict*)
     apply(force)
    apply(rename_tac G)(*strict*)
    apply(force)
   apply(rename_tac G)(*strict*)
   apply(rule duplicate_markingH_to_duplicate_marking)
    apply(rename_tac G)(*strict*)
    apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
   apply(rename_tac G)(*strict*)
   apply(force)
  apply(rename_tac G)(*strict*)
  apply(rule context_conjI)
   apply(rename_tac G)(*strict*)
   apply(rule CFGlm_unambiguous_implies_CFG_no_self_loop)
      apply(rename_tac G)(*strict*)
      apply(force)
     apply(rename_tac G)(*strict*)
     apply(force)
    apply(rename_tac G)(*strict*)
    apply(rule reachable_and_eliminiable_implies_reachable)
    apply(force)
   apply(rename_tac G)(*strict*)
   apply(force)
  apply(rename_tac G)(*strict*)
  apply(rule context_conjI)
   apply(rename_tac G)(*strict*)
   apply(rule CFGlm_unambiguous_implies_CFGuniqueElim)
      apply(rename_tac G)(*strict*)
      apply(force)
     apply(rename_tac G)(*strict*)
     apply(force)
    apply(rename_tac G)(*strict*)
    apply(rule reachable_and_eliminiable_implies_reachable)
    apply(force)
   apply(rename_tac G)(*strict*)
   apply(force)
  apply(rename_tac G)(*strict*)
  apply(rule context_conjI)
   apply(rename_tac G)(*strict*)
   apply(rule F2LR1inputx_def F2LR1input_implies_LR1ProdFormSimp)
   apply(simp add: F2LR1inputx_def F2LR1input_def split_TSstructure_def)
   apply(force)
  apply(rename_tac G)(*strict*)
  apply(rule context_conjI)
   apply(rename_tac G)(*strict*)
   apply(rule LR1ProdFormSimp_implies_CFGtermLeft)
    apply(rename_tac G)(*strict*)
    apply(force)
   apply(rename_tac G)(*strict*)
   apply(force)
  apply(rename_tac G)(*strict*)
  apply(rule context_conjI)
   apply(rename_tac G)(*strict*)
   apply(rule CFGlm_unambiguous_implies_CFGdetEntire)
     apply(rename_tac G)(*strict*)
     apply(force)
    apply(rename_tac G)(*strict*)
    apply(force)
   apply(rename_tac G)(*strict*)
   apply(force)
  apply(rename_tac G)(*strict*)
  apply(rule context_conjI)
   apply(rename_tac G)(*strict*)
   apply(rule F2LR1input_implies_CFGdetProduceLength2)
     apply(rename_tac G)(*strict*)
     apply(simp add: F2LR1inputx_def F2LR1input_def)
     apply(force)
    apply(rename_tac G)(*strict*)
    apply(force)
   apply(rename_tac G)(*strict*)
   apply(force)
  apply(rename_tac G)(*strict*)
  apply(rule F2LR1input_implies_CFGprodXORelim)
      apply(rename_tac G)(*strict*)
      apply(simp add: F2LR1inputx_def F2LR1input_def split_TSstructure_def)
      apply(force)
     apply(rename_tac G)(*strict*)
     apply(force)+
    apply(rename_tac G)(*strict*)
    apply(rule sub_of_F_SDPDA_TO_CFG_STD__implies_LR1ProdForm)
    apply(force)+
  apply(rename_tac G)(*strict*)
  apply(rule reachable_and_eliminiable_implies_reachable)
  apply(force)
  done

lemma THE_unique_edge_is_in_delta_prime_1_enhanced: "
  F2LR1inputx G G'
  \<Longrightarrow> p \<in> cfg_productions G
  \<Longrightarrow> prod_rhs p = [] \<longrightarrow> isl3 (prod_lhs p)
  \<Longrightarrow> \<exists>x. x \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p"
  apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
  apply(subgoal_tac "p \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
   prefer 2
   apply(simp add: F2LR1inputx_def)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD_def cfg_sub_def)
   apply(force)
  apply(clarsimp)
  apply(erule disjE)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def)
   apply(erule disjE)
    apply(clarsimp)
    apply(rename_tac x)(*strict*)
    apply(rule_tac
      x="x"
      in exI)
    apply(clarsimp)
    apply(case_tac "edge_event x")
     apply(rename_tac x)(*strict*)
     apply(clarsimp)
    apply(rename_tac x a)(*strict*)
    apply(clarsimp)
   apply(erule disjE)
    apply(clarsimp)
    apply(rename_tac x)(*strict*)
    apply(rule_tac
      x="x"
      in exI)
    apply(clarsimp)
    apply(case_tac "edge_push x")
     apply(rename_tac x)(*strict*)
     prefer 2
     apply(rename_tac x a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(rule_tac
      x="x"
      in exI)
   apply(clarsimp)
   apply(case_tac "edge_push x")
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
   apply(rename_tac x a list)(*strict*)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac x a list)(*strict*)
    prefer 2
    apply(rename_tac x a list aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac x a list)(*strict*)
   apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def)
  apply(erule disjE)
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(rule_tac
      x="x"
      in exI)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
   apply(rename_tac x a)(*strict*)
   apply(clarsimp)
  apply(erule disjE)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
   apply(clarsimp)
   apply(rename_tac i A)(*strict*)
   apply(simp add: isl3_def)
  apply(clarsimp)
  apply(rename_tac x)(*strict*)
  apply(case_tac "edge_push x")
   apply(rename_tac x)(*strict*)
   apply(clarsimp)
  apply(rename_tac x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
   apply(rename_tac x a list)(*strict*)
   prefer 2
   apply(rename_tac x a list aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac x a list)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
  apply(erule disjE)
   apply(rename_tac x a list)(*strict*)
   apply(clarsimp)
   apply(rule_tac
      x="x"
      in exI)
   apply(clarsimp)
  apply(rename_tac x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac x a list qs)(*strict*)
  apply(rule_tac
      x="x"
      in exI)
  apply(clarsimp)
  done

lemma THE_unique_edge_is_in_delta_prime_2_enhanced: "
  F2LR1inputx G G'
  \<Longrightarrow> p \<in> cfg_productions G
  \<Longrightarrow> prod_rhs p = [] \<longrightarrow> isl3 (prod_lhs p)
  \<Longrightarrow> x \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p
  \<Longrightarrow> y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p
  \<Longrightarrow> x = y"
  apply(subgoal_tac "x \<in> epda_delta G'")
   prefer 2
   apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
  apply(subgoal_tac "y \<in> epda_delta G'")
   prefer 2
   apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
  apply(subgoal_tac "(\<lambda>e. case edge_event e of None \<Rightarrow> edge_push e = [] \<or> (\<exists>x. edge_push e = x # edge_pop e) | Some a \<Rightarrow> edge_pop e = edge_push e)x")
   prefer 2
   apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
  apply(subgoal_tac "(\<lambda>e. case edge_event e of None \<Rightarrow> edge_push e = [] \<or> (\<exists>x. edge_push e = x # edge_pop e) | Some a \<Rightarrow> edge_pop e = edge_push e)y")
   prefer 2
   apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
  apply(subgoal_tac "\<exists>a. edge_pop x=[a]")
   prefer 2
   apply(rule_tac
      G="G'"
      in valid_pda_edge_pop_single)
    apply(simp add: F2LR1inputx_def valid_dpda_def valid_simple_dpda_def)
   apply(force)
  apply(clarsimp)
  apply(rename_tac a)(*strict*)
  apply(subgoal_tac "\<exists>a. edge_pop y=[a]")
   apply(rename_tac a)(*strict*)
   prefer 2
   apply(rule_tac
      G="G'"
      in valid_pda_edge_pop_single)
    apply(rename_tac a)(*strict*)
    apply(simp add: F2LR1inputx_def valid_dpda_def valid_simple_dpda_def)
   apply(rename_tac a)(*strict*)
   apply(force)
  apply(rename_tac a)(*strict*)
  apply(clarsimp)
  apply(rename_tac a aa)(*strict*)
  apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states G') \<and> (\<exists>y. edge_event x = Some y)"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya yaa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
    apply(clarsimp)
    apply(rename_tac a aa ya qta)(*strict*)
    apply(case_tac x)
    apply(rename_tac a aa ya qta edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
    apply(case_tac y)
    apply(rename_tac a aa ya qta edge_srca edge_eventa edge_popa edge_pusha edge_trga edge_srcaa edge_eventaa edge_popaa edge_pushaa edge_trgaa)(*strict*)
    apply(clarsimp)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa ya)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa ya)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
   apply(rename_tac a aa ya)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa ya)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya xa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
    apply(clarsimp)
   apply(rename_tac a aa ya)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa ya)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya yaa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa ya)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa ya xa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(clarsimp)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_read y (epda_states G') \<and> (\<exists>ya. edge_event y = Some ya)"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa ya)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa ya)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya xa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
    apply(clarsimp)
   apply(rename_tac a aa ya)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa ya)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya yb)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa ya)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa ya xa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(clarsimp)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop x \<and> edge_push x = []"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
    apply(clarsimp)
    apply(rename_tac aa)(*strict*)
    apply(case_tac "edge_event x")
     apply(rename_tac aa)(*strict*)
     prefer 2
     apply(rename_tac aa a)(*strict*)
     apply(clarsimp)
    apply(rename_tac aa)(*strict*)
    apply(clarsimp)
    apply(case_tac "edge_event y")
     apply(rename_tac aa)(*strict*)
     prefer 2
     apply(rename_tac aa a)(*strict*)
     apply(clarsimp)
    apply(rename_tac aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa xa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop y \<and> edge_push y = []"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa xa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<and> edge_push x \<noteq> [] \<and> edge_event x = None"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa xa xaa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
    apply(clarsimp)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa xa ya)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa xaa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(clarsimp)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_push y (epda_states G') \<and> edge_push y \<noteq> [] \<and> edge_event y = None"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa xa ya)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa xaa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(clarsimp)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l2_read x \<and> (\<exists>y. edge_event x = Some y)"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya yaa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
    apply(clarsimp)
    apply(rename_tac a aa ya)(*strict*)
    apply(case_tac x)
    apply(rename_tac a aa ya edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
    apply(case_tac y)
    apply(rename_tac a aa ya edge_srca edge_eventa edge_popa edge_pusha edge_trga edge_srcaa edge_eventaa edge_popaa edge_pushaa edge_trgaa)(*strict*)
    apply(clarsimp)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa ya)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(rename_tac a aa)(*strict*)
  apply(erule disjE)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa ya)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(rename_tac a aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac a aa xa xaa)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(erule_tac
      P="p = \<lparr>prod_lhs = cons_l2 (edge_src x) a, prod_rhs = [teA (cons_l2   (edge_trg x) xa)]\<rparr>"
      in disjE)
   apply(rename_tac a aa xa xaa)(*strict*)
   apply(clarsimp)
  apply(rename_tac a aa xa xaa)(*strict*)
  apply(clarsimp)
  done

lemma THE_unique_edge_is_in_delta_prime_enhanced: "
  F2LR1inputx G G'
  \<Longrightarrow> p \<in> cfg_productions G
  \<Longrightarrow> prod_rhs p = [] \<longrightarrow> isl3 (prod_lhs p)
  \<Longrightarrow> (THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p) \<in> epda_delta G'"
  apply(rule theI2_prime_prime)
    prefer 3
    apply(rename_tac x)(*strict*)
    apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
   apply(rule THE_unique_edge_is_in_delta_prime_1_enhanced)
     apply(force)
    apply(force)
   apply(force)
  apply(rename_tac x y)(*strict*)
  apply(rule THE_unique_edge_is_in_delta_prime_2_enhanced)
      apply(rename_tac x y)(*strict*)
      apply(force)
     apply(rename_tac x y)(*strict*)
     apply(force)
    apply(rename_tac x y)(*strict*)
    apply(force)
   apply(rename_tac x y)(*strict*)
   apply(force)
  apply(rename_tac x y)(*strict*)
  apply(force)
  done

lemma F_SDPDA_TO_CFG_STD__l3_l2_separation_ALT_preserved: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf=liftB w1@liftA v1\<rparr> \<pi> \<lparr>cfg_conf=liftB w2@liftA v2\<rparr>
  \<Longrightarrow> l3_l2_separation_ALT v1
  \<Longrightarrow> l3_l2_separation_ALT v2 \<or> v2=[]"
  apply(induct \<pi> arbitrary: w2 v2 rule: rev_induct)
   apply(rename_tac w2 v2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(subgoal_tac "w2=w1")
    apply(rename_tac w2 v2)(*strict*)
    apply(clarsimp)
    apply(rename_tac v2)(*strict*)
    apply(subgoal_tac "v2=v1")
     apply(rename_tac v2)(*strict*)
     apply(clarsimp)
    apply(rename_tac v2)(*strict*)
    apply(rule liftA_inj)
    apply(force)
   apply(rename_tac w2 v2)(*strict*)
   apply (metis liftB_liftA_inj1)
  apply(rename_tac x xs w2 v2)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d (length xs) = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
   apply(rename_tac x xs w2 v2)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac x xs w2 v2 e)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac
      m="length (xs@[x])"
      in cfgLM.step_detail_before_some_position)
     apply(rename_tac x xs w2 v2 e)(*strict*)
     apply(force)
    apply(rename_tac x xs w2 v2 e)(*strict*)
    apply(force)
   apply(rename_tac x xs w2 v2 e)(*strict*)
   apply(force)
  apply(rename_tac x xs w2 v2)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
  apply(erule_tac
      x="d"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = liftB w1 @ liftA v1\<rparr>"
      in allE)
  apply(erule_tac
      x="xs"
      in allE)
  apply(erule_tac
      x="c1"
      in allE)
  apply(erule impE)
   apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc 0"
      and v="[Some x]"
      in get_labels_drop_tail)
    apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
    apply(force)
   apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
   apply(force)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
  apply(erule impE)
   apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
   apply(rule_tac
      x="w1"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="v1"
      in exI)
   apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2 w1a w2a)(*strict*)
  apply(case_tac c1)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2 w1a w2a cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
  apply(erule_tac
      x="w1a"
      in meta_allE)
  apply(erule_tac
      x="w2a"
      in meta_allE)
  apply(erule meta_impE)
   apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc 0"
      and v="[Some x]"
      in get_labels_drop_tail)
    apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
    apply(force)
   apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
   apply(force)
  apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
  apply(erule disjE)
   apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
   prefer 2
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac x xs w2 v2 e1 e2 c2 w1a l r)(*strict*)
   apply(rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
  apply(subgoal_tac "c2 = \<lparr>cfg_conf = liftB w2 @ liftA v2\<rparr>")
   apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
   prefer 2
   apply(simp add: cfgLM.trans_der_def)
  apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a)(*strict*)
  apply(simp add: l3_l2_separation_ALT_def)
  apply(case_tac v2)
   apply(rename_tac x xs w2 v2 e1 e2 w1a w2a)(*strict*)
   apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list)(*strict*)
  apply(rule_tac
      t="case v2 of [] \<Rightarrow> True | a # w' \<Rightarrow> (\<forall>A\<in> set (butlast v2). case A of cons_l2 q A \<Rightarrow> False | cons_l3 q1 b q2 \<Rightarrow> True) \<and> (case last v2 of cons_l2 qa b \<Rightarrow> True | cons_l3 q A q' \<Rightarrow> False)"
      and s="(\<forall>A\<in> set (butlast v2). case A of cons_l2 q A \<Rightarrow> False | cons_l3 q1 b q2 \<Rightarrow> True) \<and> (case last v2 of cons_l2 qa b \<Rightarrow> True | cons_l3 q A q' \<Rightarrow> False)"
      in ssubst)
   apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list)(*strict*)
   apply(force)
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list)(*strict*)
  apply(case_tac w2a)
   apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac x xs w2 e1 e2 w1a a list)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac x xs w2 e1 e2 w1a a list l r)(*strict*)
   apply(rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
  apply(subgoal_tac "(\<forall>A\<in> set (butlast w2a). case A of cons_l2 q A \<Rightarrow> False | cons_l3 q1 b q2 \<Rightarrow> True) \<and> (case last w2a of cons_l2 qa b \<Rightarrow> True | cons_l3 q A q' \<Rightarrow> False)")
   apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
  apply(thin_tac "case w2a of [] \<Rightarrow> True | a # w' \<Rightarrow> (\<forall>A\<in> set (butlast w2a). case A of cons_l2 q A \<Rightarrow> False | cons_l3 q1 b q2 \<Rightarrow> True) \<and> (case last w2a of cons_l2 qa b \<Rightarrow> True | cons_l3 q A q' \<Rightarrow> False)")
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
  apply(subgoal_tac "w2a=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
  apply(erule disjE)
   apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
  apply(thin_tac "w2a=aa#lista")
  apply(subgoal_tac "v2=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
  apply(erule disjE)
   apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a a list aa lista)(*strict*)
  apply(thin_tac "v2=a#list")
  apply(clarsimp)
  apply(rename_tac x xs w2 e1 e2 w1a w' w'a a' a'a)(*strict*)
  apply(case_tac a')
   apply(rename_tac x xs w2 e1 e2 w1a w' w'a a' a'a q b)(*strict*)
   prefer 2
   apply(rename_tac x xs w2 e1 e2 w1a w' w'a a' a'a q1 b q2)(*strict*)
   apply(clarsimp)
  apply(rename_tac x xs w2 e1 e2 w1a w' w'a a' a'a q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 e1 e2 w1a w' w'a a'a q b)(*strict*)
  apply(subgoal_tac "e2=x")
   apply(rename_tac x xs w2 e1 e2 w1a w' w'a a'a q b)(*strict*)
   prefer 2
   apply(rule_tac
      d="d"
      in cfgLM.trans_der_getLabel_at_pos)
       apply(rename_tac x xs w2 e1 e2 w1a w' w'a a'a q b)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac x xs w2 e1 e2 w1a w' w'a a'a q b)(*strict*)
      apply(force)
     apply(rename_tac x xs w2 e1 e2 w1a w' w'a a'a q b)(*strict*)
     apply(force)
    apply(rename_tac x xs w2 e1 e2 w1a w' w'a a'a q b)(*strict*)
    apply(force)
   apply(rename_tac x xs w2 e1 e2 w1a w' w'a a'a q b)(*strict*)
   apply (metis nth_append_beyond)
  apply(rename_tac x xs w2 e1 e2 w1a w' w'a a'a q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
  apply(subgoal_tac "x \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
   apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
   prefer 2
   apply(simp add: F2LR1inputx_def cfgLM_step_relation_def F_SDPDA_TO_CFG_STD_def cfg_sub_def)
   apply(clarsimp)
   apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b l r)(*strict*)
   apply(force)
  apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>\<alpha> \<beta>. prod_rhs x = liftB \<alpha> @ liftA \<beta>")
   apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
   prefer 2
   apply(subgoal_tac "LR1ProdFormSimp G")
    apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
    prefer 2
    apply(simp add: split_TSstructure_def)
   apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
   apply(simp add: LR1ProdFormSimp_def)
   apply(erule_tac
      x="x"
      in ballE)
    apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
    prefer 2
    apply(simp add: cfgLM_step_relation_def)
   apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
   apply(erule_tac
      P="prod_rhs x = []"
      in disjE)
    apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(rule_tac
      x="[]"
      in exI)
    apply(force)
   apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
   apply(clarsimp)
   apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b ba A B)(*strict*)
   apply(erule_tac
      P="x = \<lparr>prod_lhs = A, prod_rhs = [teB ba, teA B]\<rparr>"
      in disjE)
    apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b ba A B)(*strict*)
    apply(rule_tac
      x="[ba]"
      in exI)
    apply(rule_tac
      x="[B]"
      in exI)
    apply(force)
   apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b ba A B)(*strict*)
   apply(erule_tac
      P="x = \<lparr>prod_lhs = A, prod_rhs = [teA B]\<rparr>"
      in disjE)
    apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b ba A B)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(rule_tac
      x="[B]"
      in exI)
    apply(force)
   apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b ba A B)(*strict*)
   apply(erule exE)+
   apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b ba A B C)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(rule_tac
      x="[B,C]"
      in exI)
   apply(force)
  apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta>)(*strict*)
  apply(case_tac x)
  apply(rename_tac x xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> prod_lhs prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> prod_lhs)(*strict*)
  apply(rename_tac X)
  apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X)(*strict*)
  apply(erule_tac
      P="\<exists>x\<in> set w'a. \<not> (case x of cons_l2 q A \<Rightarrow> False | cons_l3 q1 b q2 \<Rightarrow> True)"
      in disjE)
   apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X x)(*strict*)
   apply(case_tac x)
    apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X x qa ba)(*strict*)
    prefer 2
    apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X x q1 ba q2)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X x qa ba)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba l r)(*strict*)
   apply(subgoal_tac "\<exists>l'. liftB l' = l")
    apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba l r)(*strict*)
    prefer 2
    apply(rule_tac
      x="filterB l"
      in exI)
    apply (rule liftBDeConv2)
    apply (metis setA_liftB_substring liftB_commutes_over_concat)
   apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba l r)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba r l')(*strict*)
   apply(subgoal_tac "w1a=l'")
    apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba r l')(*strict*)
    prefer 2
    apply(rule liftB_prefixes_coincide)
      apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba r l')(*strict*)
      apply(force)
     apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba r l')(*strict*)
     apply(rule disjI1)
     apply(rule setB_liftA)
    apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba r l')(*strict*)
    apply(rule disjI2)
    apply(force)
   apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba r l')(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a a'a q b \<alpha> \<beta> X qa ba r l')(*strict*)
   apply(thin_tac "setA (liftB l') = {}")
   apply(case_tac w')
    apply(rename_tac xs w2 e1 w' w'a a'a q b \<alpha> \<beta> X qa ba r l')(*strict*)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
    apply(subgoal_tac "w2=l'@\<alpha>")
     apply(rename_tac xs w2 e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
     prefer 2
     apply(rule liftB_prefixes_coincide)
       apply(rename_tac xs w2 e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
       apply (simp only: liftB_commutes_over_concat)
       apply(force)
      apply(rename_tac xs w2 e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
      apply(rule disjI1)
      apply(rule setB_liftA)
     apply(rename_tac xs w2 e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
     apply(rule disjI1)
     apply(rule setB_liftA)
    apply(rename_tac xs w2 e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
    apply (simp only: liftB_commutes_over_concat)
    apply(clarsimp)
    apply(erule disjE)
     apply(rename_tac xs e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
     apply(rule l2_production_not_in_F_SDPDA_TO_CFG_STD__edges_l3)
     apply(force)
    apply(rename_tac xs e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
    apply(subgoal_tac "\<beta>=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
     apply(rename_tac xs e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
     prefer 2
     apply(rule case_list)
    apply(rename_tac xs e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
    apply(erule disjE)
     apply(rename_tac xs e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 w'a a'a q b \<alpha> qa ba l')(*strict*)
     apply (simp only: liftA_commutes_over_concat)
     apply(force)
    apply(rename_tac xs e1 w'a a'a q b \<alpha> \<beta> qa ba l')(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w'a a'a q b \<alpha> qa ba l' w' a')(*strict*)
    apply (simp only: liftA_commutes_over_concat)
    apply(clarsimp)
    apply(rename_tac xs e1 w'a q b \<alpha> qa ba l' w' a')(*strict*)
    apply(subgoal_tac "w'a=w'")
     apply(rename_tac xs e1 w'a q b \<alpha> qa ba l' w' a')(*strict*)
     prefer 2
     apply(rule liftA_inj)
     apply(force)
    apply(rename_tac xs e1 w'a q b \<alpha> qa ba l' w' a')(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a')(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def)
    apply(erule disjE)
     apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a')(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x)(*strict*)
     apply(case_tac "edge_event x")
      apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x a)(*strict*)
     apply(clarsimp)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def)
     apply(clarsimp)
     apply(rename_tac xs e1 \<alpha> qa ba l' w' x a)(*strict*)
     apply(case_tac \<alpha>)
      apply(rename_tac xs e1 \<alpha> qa ba l' w' x a)(*strict*)
      apply(clarsimp)
      apply(rename_tac xs e1 qa ba l' w' x a)(*strict*)
      apply(case_tac w')
       apply(rename_tac xs e1 qa ba l' w' x a)(*strict*)
       apply(clarsimp)
      apply(rename_tac xs e1 qa ba l' w' x a aa list)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs e1 \<alpha> qa ba l' w' x a aa list)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 qa ba l' w' x a list)(*strict*)
     apply(case_tac w')
      apply(rename_tac xs e1 qa ba l' w' x a list)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs e1 qa ba l' w' x a list aa lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a')(*strict*)
    apply(erule disjE)
     apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a')(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
    apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a')(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x)(*strict*)
    apply(case_tac "edge_push x")
     apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x a list)(*strict*)
    apply(clarsimp)
    apply(case_tac "edge_event x")
     apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x a list)(*strict*)
     prefer 2
     apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x a list aa)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x a list)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
    apply(erule disjE)
     apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 \<alpha> qa ba l' w' x a list)(*strict*)
     apply(case_tac "\<alpha>")
      apply(rename_tac xs e1 \<alpha> qa ba l' w' x a list)(*strict*)
      prefer 2
      apply(rename_tac xs e1 \<alpha> qa ba l' w' x a list aa lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs e1 \<alpha> qa ba l' w' x a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 qa ba l' w' x a list)(*strict*)
     apply(case_tac w')
      apply(rename_tac xs e1 qa ba l' w' x a list)(*strict*)
      prefer 2
      apply(rename_tac xs e1 qa ba l' w' x a list aa lista)(*strict*)
      apply(force)
     apply(rename_tac xs e1 qa ba l' w' x a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> qa ba l' w' a' x a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 \<alpha> qa ba l' w' x a list qs)(*strict*)
    apply(case_tac \<alpha>)
     apply(rename_tac xs e1 \<alpha> qa ba l' w' x a list qs)(*strict*)
     prefer 2
     apply(rename_tac xs e1 \<alpha> qa ba l' w' x a list qs aa lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 \<alpha> qa ba l' w' x a list qs)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 qa ba l' w' x a list qs)(*strict*)
    apply(case_tac w')
     apply(rename_tac xs e1 qa ba l' w' x a list qs)(*strict*)
     prefer 2
     apply(rename_tac xs e1 qa ba l' w' x a list qs aa lista)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 qa ba l' x a list qs lista)(*strict*)
     apply(case_tac lista)
      apply(rename_tac xs e1 qa ba l' x a list qs lista)(*strict*)
      prefer 2
      apply(rename_tac xs e1 qa ba l' x a list qs lista aa listb)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs e1 qa ba l' x a list qs lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 qa ba l' w' x a list qs)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a a'a q b \<alpha> \<beta> X qa ba r l' a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w'a a'a q b \<alpha> \<beta> X qa ba l' list)(*strict*)
   apply(case_tac X)
    apply(rename_tac xs w2 e1 w'a a'a q b \<alpha> \<beta> X qa ba l' list qb bb)(*strict*)
    apply(force)
   apply(rename_tac xs w2 e1 w'a a'a q b \<alpha> \<beta> X qa ba l' list q1 bb q2)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w'a a'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
   apply (simp only: liftA_commutes_over_concat)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
   apply(subgoal_tac "w2=l'@\<alpha>")
    apply(rename_tac xs w2 e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
    prefer 2
    apply(rule liftB_prefixes_coincide)
      apply(rename_tac xs w2 e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
      apply (simp only: liftB_commutes_over_concat)
      apply(force)
     apply(rename_tac xs w2 e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
     apply(rule disjI1)
     apply(rule setB_liftA)
    apply(rename_tac xs w2 e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
    apply(rule disjI1)
    apply(rule_tac
      t="liftA \<beta> @ liftA list"
      and s="liftA (\<beta> @ list)"
      in ssubst)
     apply(rename_tac xs w2 e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
     apply(simp add: setB_liftA liftA_commutes_over_concat)
    apply(rename_tac xs w2 e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
    apply(rule setB_liftA)
   apply(rename_tac xs w2 e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
   apply (simp only: liftB_commutes_over_concat)
   apply(clarsimp)
   apply(subgoal_tac "w'a = \<beta> @ list")
    apply(rename_tac xs e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
    prefer 2
    apply(rule liftA_inj)
    apply (simp only: liftA_commutes_over_concat)
   apply(rename_tac xs e1 w'a q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
   apply(thin_tac "liftA (\<beta> @ list) = liftA \<beta> @ liftA list")
   apply(erule_tac
      P="\<lparr>prod_lhs = cons_l3 q1 bb q2, prod_rhs = liftB \<alpha> @ liftA \<beta>\<rparr> \<in> F_SDPDA_TO_CFG_STD__edges_l3 G'"
      in disjE)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
    prefer 2
    apply(rule l3_production_not_in_F_SDPDA_TO_CFG_STD__edges_l2)
    apply(force)
   apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def)
   apply(erule_tac
      P="\<exists>x\<in> epda_delta G'. \<lparr>prod_lhs = cons_l3 q1 bb q2, prod_rhs = liftB \<alpha> @ liftA \<beta>\<rparr> \<in> (case edge_event x of None \<Rightarrow> {} | Some A \<Rightarrow> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states G'))"
      in disjE)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x)(*strict*)
    apply(case_tac "edge_event x")
     apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x a)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
    apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q2 x a)(*strict*)
    apply(case_tac \<alpha>)
     apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q2 x a)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a)(*strict*)
     apply(case_tac "\<beta>")
      apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a aa lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q2 x a aa lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a lista)(*strict*)
    apply(case_tac lista)
     apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a lista)(*strict*)
     prefer 2
     apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a lista aa listb)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a)(*strict*)
    apply(case_tac \<beta>)
     apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a aa lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b qa ba l' list q2 x a lista)(*strict*)
    apply(case_tac lista)
     apply(rename_tac xs e1 q b qa ba l' list q2 x a lista)(*strict*)
     prefer 2
     apply(rename_tac xs e1 q b qa ba l' list q2 x a lista aa listb)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b qa ba l' list q2 x a lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b qa ba l' list q2 x a)(*strict*)
    apply(force)
   apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
   apply(erule_tac
      P="\<exists>x\<in> epda_delta G'. \<lparr>prod_lhs = cons_l3 q1 bb q2, prod_rhs = liftB \<alpha> @ liftA \<beta>\<rparr> \<in> (case edge_push x of [] \<Rightarrow> F_SDPDA_TO_CFG_STD__edges_l3_pop x | a # y \<Rightarrow> {})"
      in disjE)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x)(*strict*)
    apply(case_tac "edge_push x")
     apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x)(*strict*)
     prefer 2
     apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
    apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list x)(*strict*)
    apply(case_tac "\<alpha>")
     apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list x)(*strict*)
     prefer 2
     apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list x a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list x)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b \<beta> qa ba l' list x)(*strict*)
    apply(case_tac "\<beta>")
     apply(rename_tac xs e1 q b \<beta> qa ba l' list x)(*strict*)
     prefer 2
     apply(rename_tac xs e1 q b \<beta> qa ba l' list x a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<beta> qa ba l' list x)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b qa ba l' list x)(*strict*)
    apply(force)
   apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x)(*strict*)
   apply(case_tac "edge_push x")
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x a lista)(*strict*)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x a lista)(*strict*)
    prefer 2
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x a lista aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x a lista)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(erule disjE)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x a lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q2 x a lista qs)(*strict*)
    apply(case_tac \<alpha>)
     apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q2 x a lista qs)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a lista qs)(*strict*)
     apply(case_tac \<beta>)
      apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a lista qs)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs e1 q b \<beta> qa ba l' list q2 x a lista qs aa listb)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 q b qa ba l' list q2 x a lista qs listb)(*strict*)
     apply(case_tac listb)
      apply(rename_tac xs e1 q b qa ba l' list q2 x a lista qs listb)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs e1 q b qa ba l' list q2 x a lista qs listb aa listc)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 q b qa ba l' list q2 x a lista qs listc)(*strict*)
     apply(case_tac listc)
      apply(rename_tac xs e1 q b qa ba l' list q2 x a lista qs listc)(*strict*)
      prefer 2
      apply(rename_tac xs e1 q b qa ba l' list q2 x a lista qs listc aa listb)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs e1 q b qa ba l' list q2 x a lista qs listc)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q2 x a lista qs aa listb)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 q b \<alpha> \<beta> qa ba l' list q1 bb q2 x a lista)(*strict*)
   apply(force)
  apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X)(*strict*)
  apply(case_tac "a'a")
   apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X qa ba)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w' w'a a'a q b \<alpha> \<beta> X q1 ba q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2)(*strict*)
  apply(erule disjE)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def)
   apply(erule disjE)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x)(*strict*)
    apply(case_tac "edge_event x")
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x a)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x a qt)(*strict*)
    apply(case_tac \<alpha>)
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x a qt)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a qt)(*strict*)
     apply(case_tac \<beta>)
      apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a qt)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a qt aa list)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x a qt aa list)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a qt list)(*strict*)
    apply(case_tac list)
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a qt list)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a qt)(*strict*)
     apply(case_tac \<beta>)
      apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a qt)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a qt aa list)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt list)(*strict*)
     apply(case_tac list)
      apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt list)(*strict*)
      prefer 2
      apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt list aa lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt list)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt)(*strict*)
     apply(simp add: cfgLM_step_relation_def)
     apply(clarsimp)
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt l r)(*strict*)
     apply (simp only: liftA_commutes_over_concat)
     apply(clarsimp)
     apply(subgoal_tac "\<exists>l'. liftB l' = l")
      apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt l r)(*strict*)
      prefer 2
      apply(rule_tac
      x="filterB l"
      in exI)
      apply (rule liftBDeConv2)
      apply (metis setA_liftB_substring liftB_commutes_over_concat)
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt l r)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt r l')(*strict*)
     apply(thin_tac "setA (liftB l') = {}")
     apply(subgoal_tac "w1a = l'")
      apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt r l')(*strict*)
      prefer 2
      apply(rule liftB_prefixes_coincide)
        apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt r l')(*strict*)
        apply(force)
       apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt r l')(*strict*)
       apply(rule disjI1)
       apply(simp add: setBConcat)
       apply(simp add: setB_liftA)
      apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt r l')(*strict*)
      apply(rule disjI2)
      apply(clarsimp)
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a qt r l')(*strict*)
     apply(clarsimp)
     apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 x a qt r l')(*strict*)
     apply(case_tac w')
      apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 x a qt r l')(*strict*)
      apply(clarsimp)
     apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 x a qt r l' aa list)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a qt list aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2)(*strict*)
   apply(erule disjE)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x)(*strict*)
    apply(case_tac "edge_push x")
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x)(*strict*)
     prefer 2
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x)(*strict*)
    apply(case_tac \<alpha>)
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x)(*strict*)
     prefer 2
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x)(*strict*)
    apply(case_tac \<beta>)
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x)(*strict*)
     prefer 2
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x l r)(*strict*)
    apply (simp only: liftA_commutes_over_concat)
    apply(clarsimp)
    apply(subgoal_tac "\<exists>l'. liftB l' = l")
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x l r)(*strict*)
     prefer 2
     apply(rule_tac
      x="filterB l"
      in exI)
     apply (rule liftBDeConv2)
     apply (metis setA_liftB_substring liftB_commutes_over_concat)
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x l r)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x r l')(*strict*)
    apply(thin_tac "setA (liftB l') = {}")
    apply(subgoal_tac "w1a = l'")
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x r l')(*strict*)
     prefer 2
     apply(rule liftB_prefixes_coincide)
       apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x r l')(*strict*)
       apply(force)
      apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x r l')(*strict*)
      apply(rule disjI1)
      apply(simp add: setBConcat)
      apply(simp add: setB_liftA)
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x r l')(*strict*)
     apply(rule disjI2)
     apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x r l')(*strict*)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 x r l')(*strict*)
    apply(case_tac w')
     apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 x r l')(*strict*)
     apply(clarsimp)
    apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 x r l' a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x)(*strict*)
   apply(case_tac "edge_push x")
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x a list)(*strict*)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x a list)(*strict*)
    prefer 2
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x a list aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 x a list)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x a list qs qt)(*strict*)
   apply(case_tac \<alpha>)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x a list qs qt)(*strict*)
    prefer 2
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x a list qs qt aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> q1 ba q2 x a list qs qt)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a list qs qt)(*strict*)
   apply(case_tac \<beta>)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a list qs qt)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<beta> q1 ba q2 x a list qs qt aa lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt lista)(*strict*)
   apply(case_tac lista)
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt lista)(*strict*)
    prefer 2
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt lista aa listb)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt listb)(*strict*)
    apply(case_tac listb)
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt listb)(*strict*)
     prefer 2
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt listb aa lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt listb)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt)(*strict*)
    prefer 2
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt l r)(*strict*)
   apply (simp only: liftA_commutes_over_concat)
   apply(clarsimp)
   apply(subgoal_tac "\<exists>l'. liftB l' = l")
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt l r)(*strict*)
    prefer 2
    apply(rule_tac
      x="filterB l"
      in exI)
    apply (rule liftBDeConv2)
    apply (metis setA_liftB_substring liftB_commutes_over_concat)
   apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt l r)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt r l')(*strict*)
   apply(thin_tac "setA (liftB l') = {}")
   apply(subgoal_tac "w1a = l'")
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt r l')(*strict*)
    prefer 2
    apply(rule liftB_prefixes_coincide)
      apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt r l')(*strict*)
      apply(force)
     apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt r l')(*strict*)
     apply(rule disjI1)
     apply(simp add: setBConcat)
     apply(simp add: setB_liftA)
    apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt r l')(*strict*)
    apply(rule disjI2)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w1a w' w'a q b q1 ba q2 x a list qs qt r l')(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 x a list qs qt r l')(*strict*)
   apply(case_tac w')
    apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 x a list qs qt r l')(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 x a list qs qt r l' aa lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 l r)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 l r)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
  apply(thin_tac "setA (liftB l') = {}")
  apply (simp only: liftA_commutes_over_concat)
  apply(subgoal_tac "w1a = l'")
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
   prefer 2
   apply(rule liftB_prefixes_coincide)
     apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
     apply(force)
    apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
    apply(rule disjI1)
    apply(simp add: setBConcat)
    apply(simp add: setB_liftA)
   apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
   apply(rule disjI2)
   apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def)
  apply(erule disjE)
   apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x)(*strict*)
   apply(case_tac "edge_event x")
    apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x a)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a)(*strict*)
   apply(case_tac \<alpha>)
    apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a)(*strict*)
    apply(case_tac "\<beta>")
     apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a aa list)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a aa list)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a list)(*strict*)
   apply(case_tac list)
    apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a list)(*strict*)
    prefer 2
    apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a list aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a)(*strict*)
   apply(case_tac \<beta>)
    apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a aa list)(*strict*)
   apply(case_tac list)
    apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a aa list)(*strict*)
    prefer 2
    apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a aa list ab lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a aa list)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a)(*strict*)
   apply(subgoal_tac "w2 = l'@[a]")
    apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a)(*strict*)
    prefer 2
    apply(rule liftB_prefixes_coincide)
      apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a)(*strict*)
      apply (simp only: liftB_commutes_over_concat)
      apply(force)
     apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a)(*strict*)
     apply(rule disjI1)
     apply(simp add: setBConcat)
     apply(simp add: setB_liftA)
    apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a)(*strict*)
    apply(rule disjI2)
    apply(clarsimp)
   apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w' w'a q b q1 ba q2 r l' x a)(*strict*)
  apply (simp only: liftB_commutes_over_concat)
  apply(clarsimp)
  apply(case_tac "w'a")
  apply(rename_tac xs e1 w' w'a q b q1 ba q2 r l' x a)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs e1 w' w'a q b q1 ba q2 r l' x a aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
  apply(erule disjE)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' i A)(*strict*)
  apply(case_tac \<alpha>)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' i A)(*strict*)
  prefer 2
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' i A a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' i A)(*strict*)
  apply(case_tac \<beta>)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' i A)(*strict*)
  prefer 2
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' i A a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' i A)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' i A)(*strict*)
  apply(subgoal_tac "r=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' i A)(*strict*)
  prefer 2
  apply(rule case_list)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' i A)(*strict*)
  apply(erule disjE)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' i A)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q1 ba q2 l' i A)(*strict*)
  apply(case_tac w')
   apply(rename_tac xs w2 e1 w' w'a q1 ba q2 l' i A)(*strict*)
   prefer 2
   apply(rename_tac xs w2 e1 w' w'a q1 ba q2 l' i A a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q1 ba q2 l' i A)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w'a q1 ba q2 l' i A)(*strict*)
  apply(subgoal_tac "l'=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac xs w2 e1 w'a q1 ba q2 l' i A)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac xs w2 e1 w'a q1 ba q2 l' i A)(*strict*)
  apply(erule disjE)
   apply(rename_tac xs w2 e1 w'a q1 ba q2 l' i A)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs w2 e1 w'a q1 ba q2 l' i A)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w'a q1 ba q2 i A w' a')(*strict*)
  apply (simp only: liftB_commutes_over_concat)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' i A)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l')(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x)(*strict*)
  apply(case_tac "edge_push x")
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x a list)(*strict*)
  prefer 2
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x a list aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x a list)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
  apply(erule disjE)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a list)(*strict*)
  apply(case_tac "\<alpha>")
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a list)(*strict*)
  prefer 2
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a list aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a list)(*strict*)
  apply(case_tac \<beta>)
  apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a list aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list lista)(*strict*)
  apply(case_tac lista)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list lista)(*strict*)
  prefer 2
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list lista aa listb)(*strict*)
  apply(force)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list)(*strict*)
  apply(subgoal_tac "r=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list)(*strict*)
  prefer 2
  apply(rule case_list)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list)(*strict*)
  apply(erule disjE)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> X q1 ba q2 r l' x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a list qs)(*strict*)
  apply(case_tac "\<alpha>")
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a list qs)(*strict*)
  prefer 2
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a list qs aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<alpha> \<beta> q1 ba q2 r l' x a list qs)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a list qs)(*strict*)
  apply(case_tac \<beta>)
  apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a list qs)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b \<beta> q1 ba q2 r l' x a list qs aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs lista)(*strict*)
  apply(case_tac lista)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs lista)(*strict*)
  apply(force)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs lista aa listb)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs listb)(*strict*)
  apply(case_tac listb)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs listb)(*strict*)
  prefer 2
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs listb aa lista)(*strict*)
  apply(force)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs listb)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs)(*strict*)
  apply(subgoal_tac "r=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs)(*strict*)
  prefer 2
  apply(rule case_list)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs)(*strict*)
  apply(erule disjE)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w' w'a q b q1 ba q2 r l' x a list qs)(*strict*)
  apply(clarsimp)
  done

lemma trans_der_notfinishingL_froml2: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf = [teA (cons_l2   q A)]\<rparr> \<pi> \<lparr>cfg_conf = w@[teA B]\<rparr>
  \<Longrightarrow> notfinishingL \<pi>"
  apply(simp add: notfinishingL_def notfinishing_def)
  apply(clarsimp)
  apply(rename_tac i)(*strict*)
  apply(case_tac "prod_lhs (\<pi>!i)")
   apply(rename_tac i qa b)(*strict*)
   prefer 2
   apply(rename_tac i q1 b q2)(*strict*)
   apply(simp add: isl3_def)
  apply(rename_tac i qa b)(*strict*)
  apply(clarsimp)
  apply(simp add: isl3_def)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i qa b)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d"
      and i="i"
      and kleene_starT="False"
      and END="True"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac i qa b)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac i qa b)(*strict*)
    apply(force)
   apply(rename_tac i qa b)(*strict*)
   apply(force)
  apply(rename_tac i qa b)(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e ci ci')(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac i qa b e ci ci')(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac i qa b e ci ci')(*strict*)
  apply(erule_tac
      x="d"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cons_l2   q A)]\<rparr>"
      in allE)
  apply(erule_tac
      x="take i \<pi>"
      in allE)
  apply(erule_tac
      x="ci"
      in allE)
  apply(erule_tac
      P="cfgLMTD G d \<lparr>cfg_conf = [teA (cons_l2   q A)]\<rparr> (take i \<pi>) ci"
      in impE)
   apply(rename_tac i qa b e ci ci')(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      t="min (length \<pi>) i"
      and s="i"
      in ssubst)
    apply(rename_tac i qa b e ci ci')(*strict*)
    apply(force)
   apply(rename_tac i qa b e ci ci')(*strict*)
   apply(clarsimp)
   apply(rename_tac i qa b e ci ci' ea)(*strict*)
   apply(rule_tac
      m="length \<pi>-i"
      and v="map Some (drop i \<pi>)"
      in get_labels_drop_tail)
    apply(rename_tac i qa b e ci ci' ea)(*strict*)
    apply(clarsimp)
    apply (metis List.map_append append_take_drop_id)
   apply(rename_tac i qa b e ci ci' ea)(*strict*)
   apply(force)
  apply(rename_tac i qa b e ci ci')(*strict*)
  apply(erule_tac
      P="\<exists>w1 w2. cfg_conf \<lparr>cfg_conf = [teA (cons_l2   q A)]\<rparr> = liftB w1 @ liftA w2"
      in impE)
   apply(rename_tac i qa b e ci ci')(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(force)
  apply(rename_tac i qa b e ci ci')(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e ci ci' w1 w2)(*strict*)
  apply(case_tac ci)
  apply(rename_tac i qa b e ci ci' w1 w2 cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e ci' w1 w2)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac i qa b e ci' w1 w2)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac i qa b e ci' w1 w2)(*strict*)
  apply(erule_tac
      x="d"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cons_l2   q A)]\<rparr>"
      in allE)
  apply(erule_tac
      x="take (Suc i) \<pi>"
      in allE)
  apply(erule_tac
      x="ci'"
      in allE)
  apply(erule_tac
      P="cfgLMTD G d \<lparr>cfg_conf = [teA (cons_l2   q A)]\<rparr> (take (Suc i) \<pi>) ci'"
      in impE)
   apply(rename_tac i qa b e ci' w1 w2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      t="min (length \<pi>) (Suc i)"
      and s="Suc i"
      in ssubst)
    apply(rename_tac i qa b e ci' w1 w2)(*strict*)
    apply(force)
   apply(rename_tac i qa b e ci' w1 w2)(*strict*)
   apply(clarsimp)
   apply(rename_tac i qa b e ci' w1 w2 ea)(*strict*)
   apply(rule_tac
      m="length \<pi>-Suc i"
      and v="map Some (drop (Suc i) \<pi>)"
      in get_labels_drop_tail)
    apply(rename_tac i qa b e ci' w1 w2 ea)(*strict*)
    apply(clarsimp)
    apply(rule_tac
      t="Suc (length \<pi> - Suc 0)"
      and s="length \<pi>"
      in ssubst)
     apply(rename_tac i qa b e ci' w1 w2 ea)(*strict*)
     apply(force)
    apply(rename_tac i qa b e ci' w1 w2 ea)(*strict*)
    apply(clarsimp)
    apply (metis List.map_append append_take_drop_id)
   apply(rename_tac i qa b e ci' w1 w2 ea)(*strict*)
   apply(force)
  apply(rename_tac i qa b e ci' w1 w2)(*strict*)
  apply(erule_tac
      P="\<exists>w1 w2. cfg_conf \<lparr>cfg_conf = [teA (cons_l2   q A)]\<rparr> = liftB w1 @ liftA w2"
      in impE)
   apply(rename_tac i qa b e ci' w1 w2)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(force)
  apply(rename_tac i qa b e ci' w1 w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e ci' w1 w2 w1a w2a)(*strict*)
  apply(case_tac ci')
  apply(rename_tac i qa b e ci' w1 w2 w1a w2a cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
   prefer 2
   apply(rule_tac
      n="i"
      and d="d"
      in cfgLM.trans_der_crop_via_take)
       apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
      apply(force)
     apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
     apply(force)
    apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
    apply(simp add: get_configuration_def)
   apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
   apply(force)
  apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
   prefer 2
   apply(rule_tac
      ?w1.0="[]"
      and ?v1.0="[cons_l2 q A]"
      and G="G"
      and G'="G'"
      and d="derivation_take d i"
      and \<pi>="take i \<pi>"
      in F_SDPDA_TO_CFG_STD__l3_l2_separation_ALT_preserved)
      apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
      apply(force)
     apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
     apply(force)
    apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
    apply(clarsimp)
    apply(force)
   apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
   apply(simp add: l3_l2_separation_ALT_def)
  apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
  apply(erule disjE)
   apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
   prefer 2
   apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a w2a)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a w2a l r)(*strict*)
   apply(rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
  apply(simp add: l3_l2_separation_ALT_def)
  apply(rule_tac
      xs="w2"
      in rev_cases)
   apply(rename_tac i qa b e w1 w2 w1a w2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a w2a)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a w2a l r)(*strict*)
   apply(rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac i qa b e w1 w2 w1a w2a ys y)(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e w1 w1a w2a ys y)(*strict*)
  apply(subgoal_tac "Ball (set (butlast (ys @ [y]))) (case_DT_l2_l3_nonterminals (\<lambda>q A. False) (\<lambda>q1 b q2. True)) \<and> (case last (ys @ [y]) of cons_l2 qa b \<Rightarrow> True | cons_l3 q A q' \<Rightarrow> False)")
   apply(rename_tac i qa b e w1 w1a w2a ys y)(*strict*)
   prefer 2
   apply(case_tac "ys@[y]")
    apply(rename_tac i qa b e w1 w1a w2a ys y)(*strict*)
    apply(force)
   apply(rename_tac i qa b e w1 w1a w2a ys y a list)(*strict*)
   apply(force)
  apply(rename_tac i qa b e w1 w1a w2a ys y)(*strict*)
  apply(thin_tac "case ys @ [y] of [] \<Rightarrow> True | a # w' \<Rightarrow> Ball (set (butlast (ys @ [y]))) (case_DT_l2_l3_nonterminals (\<lambda>q A. False) (\<lambda>q1 b q2. True)) \<and> (case last (ys @ [y]) of cons_l2 qa b \<Rightarrow> True | cons_l3 q A q' \<Rightarrow> False)")
  apply(rename_tac i qa b e w1 w1a w2a ys y)(*strict*)
  apply(clarsimp)
  apply(case_tac y)
   apply(rename_tac i qa b e w1 w1a w2a ys y qaa ba)(*strict*)
   prefer 2
   apply(rename_tac i qa b e w1 w1a w2a ys y q1 ba q2)(*strict*)
   apply(clarsimp)
  apply(rename_tac i qa b e w1 w1a w2a ys y qaa ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e w1 w1a w2a ys qaa ba)(*strict*)
  apply(case_tac "Suc i=length \<pi>")
   apply(rename_tac i qa b e w1 w1a w2a ys qaa ba)(*strict*)
   apply(clarsimp)
   apply(rule_tac
      xs="w2a"
      in rev_cases)
    apply(rename_tac i qa b e w1 w1a w2a ys qaa ba)(*strict*)
    apply(clarsimp)
    apply(rename_tac i qa b e w1 w1a ys qaa ba)(*strict*)
    apply(rule_tac
      xs="w1a"
      in rev_cases)
     apply(rename_tac i qa b e w1 w1a ys qaa ba)(*strict*)
     apply(clarsimp)
    apply(rename_tac i qa b e w1 w1a ys qaa ba ysa y)(*strict*)
    apply(clarsimp)
    apply(rename_tac i qa b e w1 ys qaa ba ysa y)(*strict*)
    apply (simp only: liftB_commutes_over_concat)
    apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a w2a ys qaa ba ysa y)(*strict*)
   apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a ys qaa ba ysa y)(*strict*)
   apply (simp only: liftA_commutes_over_concat)
   apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a ys qaa ba ysa)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a ys qaa ba ysa l r)(*strict*)
   apply(subgoal_tac "\<exists>l'. liftB l' = l")
    apply(rename_tac i qa b e w1 w1a ys qaa ba ysa l r)(*strict*)
    prefer 2
    apply(rule_tac
      x="filterB l"
      in exI)
    apply (rule liftBDeConv2)
    apply (metis setA_liftB_substring liftB_commutes_over_concat)
   apply(rename_tac i qa b e w1 w1a ys qaa ba ysa l r)(*strict*)
   apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a ys qaa ba ysa r l')(*strict*)
   apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
   apply(subgoal_tac "w1=l'")
    apply(rename_tac i qa b e w1 w1a ys qaa ba ysa r l')(*strict*)
    prefer 2
    apply (metis liftA_append_tail initial_liftB_strings_coincide)
   apply(rename_tac i qa b e w1 w1a ys qaa ba ysa r l')(*strict*)
   apply(clarsimp)
   apply(rename_tac i qa b e w1a ys qaa ba ysa r l')(*strict*)
   apply(case_tac ys)
    apply(rename_tac i qa b e w1a ys qaa ba ysa r l')(*strict*)
    apply(clarsimp)
    apply(rename_tac i qa b e w1a ysa l')(*strict*)
    apply(rule_tac
      xs="l'"
      in rev_cases)
     apply(rename_tac i qa b e w1a ysa l')(*strict*)
     apply(clarsimp)
    apply(rename_tac i qa b e w1a ysa l' ys y)(*strict*)
    apply(clarsimp)
    apply(rename_tac i qa b e w1a ysa ys y)(*strict*)
    apply (simp only: liftB_commutes_over_concat)
    apply(clarsimp)
   apply(rename_tac i qa b e w1a ys qaa ba ysa r l' a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac i qa b e w1 w1a w2a ys qaa ba)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i qa b e w1 w1a w2a ys qaa ba)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d"
      and i="Suc i"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac i qa b e w1 w1a w2a ys qaa ba)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac i qa b e w1 w1a w2a ys qaa ba)(*strict*)
    apply(force)
   apply(rename_tac i qa b e w1 w1a w2a ys qaa ba)(*strict*)
   apply(force)
  apply(rename_tac i qa b e w1 w1a w2a ys qaa ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e w1 w1a w2a ys qaa ba ci')(*strict*)
  apply(case_tac w2a)
   apply(rename_tac i qa b e w1 w1a w2a ys qaa ba ci')(*strict*)
   apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a ys qaa ba ci')(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac i qa b e w1 w1a ys qaa ba ci' l r la ra)(*strict*)
   apply(rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac i qa b e w1 w1a w2a ys qaa ba ci' a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e w1 w1a ys qaa ba ci' a list)(*strict*)
  apply(thin_tac "cfgLM_step_relation G \<lparr>cfg_conf = liftB w1a @ teA a # liftA list\<rparr> (\<pi> ! Suc i) ci'")
  apply(rename_tac i qa b e w1 w1a ys qaa ba ci' a list)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac i qa b e w1 w1a ys qaa ba ci' a list l r)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac i qa b e w1 w1a ys qaa ba ci' a list l r)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac i qa b e w1 w1a ys qaa ba ci' a list l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e w1 w1a ys qaa ba ci' a list r l')(*strict*)
  apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
  apply(subgoal_tac "w1=l'")
   apply(rename_tac i qa b e w1 w1a ys qaa ba ci' a list r l')(*strict*)
   prefer 2
   apply (metis liftA_append_tail initial_liftB_strings_coincide)
  apply(rename_tac i qa b e w1 w1a ys qaa ba ci' a list r l')(*strict*)
  apply(clarsimp)
  apply(rename_tac i qa b e w1a ys qaa ba ci' a list r l')(*strict*)
  apply(case_tac ys)
   apply(rename_tac i qa b e w1a ys qaa ba ci' a list r l')(*strict*)
   apply(clarsimp)
   apply(rename_tac i qa b e w1a ci' a list l')(*strict*)
   apply(rule liftB_with_nonterminal_inside)
   apply(rule sym)
   apply(force)
  apply(rename_tac i qa b e w1a ys qaa ba ci' a list r l' aa lista)(*strict*)
  apply(clarsimp)
  done

lemma trans_der_notfinishingL_froml3: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf = [teA (cons_l3   q A q')]\<rparr> \<pi> \<lparr>cfg_conf = w@[teA B]\<rparr>
  \<Longrightarrow> notfinishingL \<pi>"
  apply(simp add: notfinishingL_def notfinishing_def)
  apply(clarsimp)
  apply(rename_tac i)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d"
      and i="i"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac i)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac i)(*strict*)
    apply(force)
   apply(rename_tac i)(*strict*)
   apply(force)
  apply(rename_tac i)(*strict*)
  apply(clarsimp)
  apply(rename_tac i e ci ci')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i e ci ci')(*strict*)
   prefer 2
   apply(rule_tac
      n="i"
      and d="d"
      in cfgLM.trans_der_crop_via_take)
       apply(rename_tac i e ci ci')(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac i e ci ci')(*strict*)
      apply(force)
     apply(rename_tac i e ci ci')(*strict*)
     apply(force)
    apply(rename_tac i e ci ci')(*strict*)
    apply(clarsimp)
    apply(simp add: get_configuration_def)
   apply(rename_tac i e ci ci')(*strict*)
   apply(force)
  apply(rename_tac i e ci ci')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i e ci ci')(*strict*)
   prefer 2
   apply(rule_tac
      \<pi>="take i \<pi>"
      and d="derivation_take d i"
      in only_l3_nonterminals_reachable)
        apply(rename_tac i e ci ci')(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac i e ci ci')(*strict*)
       apply(simp add: F2LR1inputx_def)
       apply(force)
      apply(rename_tac i e ci ci')(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac i e ci ci')(*strict*)
     apply(simp add: split_TSstructure_def)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac i e ci ci')(*strict*)
    apply(simp add: split_TSstructure_def)
   apply(rename_tac i e ci ci')(*strict*)
   apply(force)
  apply(rename_tac i e ci ci')(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac i e ci ci' l r)(*strict*)
  apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
  apply(case_tac ci)
  apply(rename_tac i e ci ci' l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i e ci' l r)(*strict*)
  apply(case_tac ci')
  apply(rename_tac i e ci' l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i e l r)(*strict*)
  apply(case_tac "prod_lhs (\<pi>!i)")
   apply(rename_tac i e l r qa b)(*strict*)
   apply(force)
  apply(rename_tac i e l r q1 b q2)(*strict*)
  apply(clarsimp)
  apply(simp add: isl3_def)
  done

lemma trans_der_notfinishingL: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf = [teA A]\<rparr> \<pi> \<lparr>cfg_conf = w@[teA B]\<rparr>
  \<Longrightarrow> notfinishingL \<pi>"
  apply(case_tac A)
   apply(rename_tac q b)(*strict*)
   apply(rule trans_der_notfinishingL_froml2)
     apply(rename_tac q b)(*strict*)
     apply(force)
    apply(rename_tac q b)(*strict*)
    apply(force)
   apply(rename_tac q b)(*strict*)
   apply(force)
  apply(rename_tac q1 b q2)(*strict*)
  apply(rule trans_der_notfinishingL_froml3)
    apply(rename_tac q1 b q2)(*strict*)
    apply(force)
   apply(rename_tac q1 b q2)(*strict*)
   apply(force)
  apply(rename_tac q1 b q2)(*strict*)
  apply(force)
  done

lemma unique_edge_exists_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_enhanced: "
  F2LR1inputx G G'
  \<Longrightarrow> p \<in> cfg_productions G
  \<Longrightarrow> prod_rhs p = [] \<longrightarrow> isl3 (prod_lhs p)
  \<Longrightarrow> \<exists>!x. x \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p"
  apply(rule ex_ex1I)
   apply(rule THE_unique_edge_is_in_delta_prime_1_enhanced)
     apply(force)
    apply(force)
   apply(force)
  apply(rename_tac x y)(*strict*)
  apply(rule THE_unique_edge_is_in_delta_prime_2_enhanced)
      apply(rename_tac x y)(*strict*)
      apply(force)
     apply(rename_tac x y)(*strict*)
     apply(force)
    apply(rename_tac x y)(*strict*)
    apply(force)
   apply(rename_tac x y)(*strict*)
   apply(force)
  apply(rename_tac x y)(*strict*)
  apply(force)
  done

definition norep :: "'a \<Rightarrow> ('a\<Rightarrow>nat\<Rightarrow>'b) \<Rightarrow> nat \<Rightarrow> bool" where
  "norep d f m = (\<forall>i j. i<j \<longrightarrow> j\<le>m \<longrightarrow> f d i\<noteq>f d j)"

definition norepHD :: "
  ((('b, 'c) DT_l2_l3_nonterminals, 'd) cfg_step_label,
(('b, 'c) DT_l2_l3_nonterminals, 'd) cfg_configuration) derivation
  \<Rightarrow> (('b, 'c) DT_l2_l3_nonterminals, 'd) cfg_step_label list \<Rightarrow> bool" where
  "norepHD d \<pi> = (norep d (\<lambda>d i.
  case hd (cfg_conf (the (get_configuration (d i)))) of teA A \<Rightarrow> teA (cropTol3l2_single A)
  | teB b \<Rightarrow> teB b
  ) (length \<pi>))"

lemma left_degen_preserves_leading_nonterminal_prime: "
  split_TSstructure G
  \<Longrightarrow> cfgLM.derivation G d
  \<Longrightarrow> d n = Some (pair e1 c1)
  \<Longrightarrow> d (n+m) = Some (pair e2 c2)
  \<Longrightarrow> c1=\<lparr>cfg_conf=teA A#w\<rparr>
  \<Longrightarrow> left_degen G d
  \<Longrightarrow> \<exists>A w. c2=\<lparr>cfg_conf=teA A#w\<rparr>"
  apply(induct m arbitrary: c2)
   apply(rename_tac c2)(*strict*)
   apply(clarsimp)
  apply(rename_tac m c2)(*strict*)
  apply(simp add: cfgLM.trans_der_def)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d (n+m) = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
   apply(rename_tac m c2)(*strict*)
   prefer 2
   apply(rule_tac
      m="Suc (n+m)"
      in cfgLM.step_detail_before_some_position)
     apply(rename_tac m c2)(*strict*)
     apply(force)
    apply(rename_tac m c2)(*strict*)
    apply(force)
   apply(rename_tac m c2)(*strict*)
   apply(force)
  apply(rename_tac m c2)(*strict*)
  apply(clarsimp)
  apply(rename_tac m c2 e1a e2 c1)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac m c2 e1a e2 c1 l r)(*strict*)
  apply(case_tac c1)
  apply(rename_tac m c2 e1a e2 c1 l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac m c2 e1a e2 l r)(*strict*)
  apply(case_tac c2)
  apply(rename_tac m c2 e1a e2 l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac m e1a e2 l r)(*strict*)
  apply(case_tac e2)
  apply(rename_tac m e1a e2 l r prod_lhsa prod_rhsa)(*strict*)
  apply(rename_tac C v)
  apply(rename_tac m e1a e2 l r C v)(*strict*)
  apply(clarsimp)
  apply(rename_tac m e1a l r C v)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac m e1a l r C v)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply(force)
  apply(rename_tac m e1a l r C v)(*strict*)
  apply(clarsimp)
  apply(rename_tac m e1a r C v l')(*strict*)
  apply(thin_tac "setA (liftB l') = {}")
  apply(simp add: left_degen_def sat_refined_def)
  apply(erule_tac
      x="n+m"
      in allE)
  apply(clarsimp)
  apply(rename_tac m e1a r C l' wa Aa waa)(*strict*)
  apply(case_tac l')
   apply(rename_tac m e1a r C l' wa Aa waa)(*strict*)
   prefer 2
   apply(rename_tac m e1a r C l' wa Aa waa a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac m e1a r C l' wa Aa waa)(*strict*)
  apply(clarsimp)
  done

lemma no_repeating_leading_nonterminal_Extended_hlp1: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cropTol3l2_single A1 = cropTol3l2_single A2
  \<Longrightarrow> (case A1 of cons_l3 q1 A q2 \<Rightarrow> ((case A2 of cons_l2 q1 A \<Rightarrow> False | _ \<Rightarrow> True)) | _ \<Rightarrow> True)
  \<Longrightarrow> cfgLM_step_relation G \<lparr>cfg_conf=[teA A1]\<rparr> p \<lparr>cfg_conf=liftA w1\<rparr>
  \<Longrightarrow> w1\<noteq>[]
  \<Longrightarrow> A2 \<in> cfg_nonterminals G
  \<Longrightarrow> \<exists>p' w2.
  prod_to_edge G' p = prod_to_edge G' p'
  \<and> cfgLM_step_relation G \<lparr>cfg_conf=[teA A2]\<rparr> p' \<lparr>cfg_conf=liftA w2\<rparr>
  \<and> length w1 \<le> length w2
  \<and> cropTol3l2_single (hd w1) = cropTol3l2_single (hd w2)
  \<and> (isl2 (hd w2) \<longrightarrow> isl2 (hd w1))"
  apply(subgoal_tac "\<exists>p c'. cfgLM_step_relation G \<lparr>cfg_conf=[teA A2]\<rparr> p c'")
   prefer 2
   apply(subgoal_tac "A2 \<in> cfgSTD_Nonblockingness_nonterminals_ALT3 G")
    prefer 2
    apply(rule cfgSTD_Nonblockingness_nonterminals_cfgSTD_Nonblockingness_nonterminals_ALT3)
     apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
    apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
   apply(simp add: cfgSTD_Nonblockingness_nonterminals_ALT3_def)
   apply(clarsimp)
   apply(rename_tac d \<pi> w)(*strict*)
   apply(case_tac "\<pi>")
    apply(rename_tac d \<pi> w)(*strict*)
    apply(clarsimp)
    apply(rename_tac d w)(*strict*)
    apply(simp add: cfgLM.trans_der_def)
    apply(clarsimp)
    apply(case_tac w)
     apply(rename_tac d w)(*strict*)
     apply(clarsimp)
    apply(rename_tac d w a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d \<pi> w a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d w a list)(*strict*)
   apply(rule_tac
      x="a"
      in exI)
   apply(subgoal_tac "\<exists>e1 e2 c1 c2. d 0 = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
    apply(rename_tac d w a list)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac d w a list e)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      m="length (a # list)"
      in cfgLM.step_detail_before_some_position)
      apply(rename_tac d w a list e)(*strict*)
      apply(force)
     apply(rename_tac d w a list e)(*strict*)
     apply(force)
    apply(rename_tac d w a list e)(*strict*)
    apply(force)
   apply(rename_tac d w a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
   apply(rule_tac
      x="c2"
      in exI)
   apply(subgoal_tac "a=e2")
    apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
    apply(subgoal_tac "c1=\<lparr>cfg_conf=[teA A2]\<rparr>")
     apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
     apply(force)
    apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac d w list e1 e2 c1 c2 l r la ra)(*strict*)
    apply(case_tac c1)
    apply(rename_tac d w list e1 e2 c1 c2 l r la ra cfg_confa)(*strict*)
    apply(clarsimp)
    apply(rename_tac d w list e1 e2 c2 l r la ra)(*strict*)
    apply(case_tac c2)
    apply(rename_tac d w list e1 e2 c2 l r la ra cfg_confa)(*strict*)
    apply(clarsimp)
    apply(rename_tac d w list e1 e2 l r la ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac d w list e1 e2 l r la ra)(*strict*)
     prefer 2
     apply(rename_tac d w list e1 e2 l r la ra a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac d w list e1 e2 l r la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac d w list e1 e2 la ra)(*strict*)
    apply(simp add: cfgLM.trans_der_def)
   apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
   apply(subgoal_tac "e2=a")
    apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
    prefer 2
    apply(rule_tac
      d="d"
      in cfgLM.trans_der_getLabel_at_pos)
        apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
        apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
        apply(force)
       apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
       apply(force)
      apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
      apply(force)
     apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
     apply(force)
    apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
    apply(force)
   apply(rename_tac d w a list e1 e2 c1 c2)(*strict*)
   apply(force)
  apply(subgoal_tac "p \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
   prefer 2
   apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
   apply(force)
  apply(clarsimp)
  apply(rename_tac pa c')(*strict*)
  apply(erule disjE)
   apply(rename_tac pa c')(*strict*)
   prefer 2
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def)
   apply(rename_tac pa c')(*strict*)
   apply(erule disjE)
    apply(rename_tac pa c')(*strict*)
    apply(clarsimp)
    apply(rename_tac pa c' x)(*strict*)
    apply(case_tac "edge_event x")
     apply(rename_tac pa c' x)(*strict*)
     apply(clarsimp)
    apply(rename_tac pa c' x a)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def)
    apply(clarsimp)
    apply(rename_tac p c' x a)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac p c' x a l r la ra)(*strict*)
    apply(case_tac la)
     apply(rename_tac p c' x a l r la ra)(*strict*)
     prefer 2
     apply(rename_tac p c' x a l r la ra aa list)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' x a l r la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' x a l r)(*strict*)
    apply(case_tac l)
     apply(rename_tac p c' x a l r)(*strict*)
     prefer 2
     apply(rename_tac p c' x a l r aa list)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' x a l r)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' x a)(*strict*)
    apply(case_tac w1)
     apply(rename_tac p c' x a)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' x a aa list)(*strict*)
    apply(clarsimp)
   apply(rename_tac pa c')(*strict*)
   apply(erule disjE)
    apply(rename_tac pa c')(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
    apply(clarsimp)
    apply(rename_tac p c' i A)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac p c' i A l r la ra)(*strict*)
    apply(case_tac la)
     apply(rename_tac p c' i A l r la ra)(*strict*)
     prefer 2
     apply(rename_tac p c' i A l r la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' i A l r la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' i A l r)(*strict*)
    apply(case_tac l)
     apply(rename_tac p c' i A l r)(*strict*)
     prefer 2
     apply(rename_tac p c' i A l r a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' i A l r)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' i A)(*strict*)
    apply(case_tac c')
    apply(rename_tac p c' i A cfg_confa)(*strict*)
    apply(clarsimp)
    apply(rename_tac p i A)(*strict*)
    apply(case_tac w1)
     apply(rename_tac p i A)(*strict*)
     apply(clarsimp)
    apply(rename_tac p i A a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac pa c')(*strict*)
   prefer 2
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def)
   apply(erule disjE)
    apply(rename_tac pa c')(*strict*)
    apply(clarsimp)
    apply(rename_tac pa c' x)(*strict*)
    apply(case_tac "edge_event x")
     apply(rename_tac pa c' x)(*strict*)
     apply(clarsimp)
    apply(rename_tac pa c' x a)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
    apply(clarsimp)
    apply(rename_tac p c' x a qt)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac p c' x a qt l r la ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac p c' x a qt l r la ra)(*strict*)
     prefer 2
     apply(rename_tac p c' x a qt l r la ra aa list)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' x a qt l r la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' x a qt la ra)(*strict*)
    apply(case_tac w1)
     apply(rename_tac p c' x a qt la ra)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' x a qt la ra aa list)(*strict*)
    apply(clarsimp)
   apply(rename_tac pa c')(*strict*)
   apply(erule disjE)
    apply(rename_tac pa c')(*strict*)
    apply(clarsimp)
    apply(rename_tac pa c' x)(*strict*)
    apply(case_tac "edge_push x")
     apply(rename_tac pa c' x)(*strict*)
     prefer 2
     apply(rename_tac pa c' x a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac pa c' x)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
    apply(clarsimp)
    apply(rename_tac p c' x)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac p c' x l r la ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac p c' x l r la ra)(*strict*)
     prefer 2
     apply(rename_tac p c' x l r la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' x l r la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' x la ra)(*strict*)
    apply(case_tac w1)
     apply(rename_tac p c' x la ra)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' x la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac pa c')(*strict*)
   apply(clarsimp)
   apply(rename_tac pa c' x)(*strict*)
   apply(case_tac "edge_push x")
    apply(rename_tac pa c' x)(*strict*)
    apply(clarsimp)
   apply(rename_tac pa c' x a list)(*strict*)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac pa c' x a list)(*strict*)
    prefer 2
    apply(rename_tac pa c' x a list aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac pa c' x a list)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(clarsimp)
   apply(rename_tac p c' x a list qs qt)(*strict*)
   apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
    apply(rename_tac p c' x a list qs qt)(*strict*)
    prefer 2
    apply(rule_tac
      G="G'"
      in valid_simple_dpda_edge_alt)
     apply(rename_tac p c' x a list qs qt)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac p c' x a list qs qt)(*strict*)
    apply(force)
   apply(rename_tac p c' x a list qs qt)(*strict*)
   apply(clarsimp)
   apply(rename_tac p c' x a qs qt s1)(*strict*)
   apply(rename_tac e s1 qs qt s2)
   apply(rename_tac p c' e s1 qs qt s2)(*strict*)
   apply(case_tac e)
   apply(rename_tac p c' e s1 qs qt s2 edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
   apply(clarsimp)
   apply(rename_tac p c' s1 qs qt s2 edge_src edge_trg)(*strict*)
   apply(rename_tac es et)
   apply(rename_tac p c' s1 qs qt s2 es et)(*strict*)
   apply(subgoal_tac "A1=cons_l3 es s2 qt")
    apply(rename_tac p c' s1 qs qt s2 es et)(*strict*)
    prefer 2
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac p c' s1 qs qt s2 es et l r la ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac p c' s1 qs qt s2 es et l r la ra)(*strict*)
     prefer 2
     apply(rename_tac p c' s1 qs qt s2 es et l r la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt s2 es et l r la ra)(*strict*)
    apply(clarsimp)
   apply(rename_tac p c' s1 qs qt s2 es et)(*strict*)
   apply(subgoal_tac "w1 = [(cons_l3 et s1 qs), (cons_l3 qs s2 qt)]")
    apply(rename_tac p c' s1 qs qt s2 es et)(*strict*)
    prefer 2
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac p c' s1 qs qt s2 es et l r la ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac p c' s1 qs qt s2 es et l r la ra)(*strict*)
     prefer 2
     apply(rename_tac p c' s1 qs qt s2 es et l r la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt s2 es et l r la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' s1 qs qt s2 es et la ra)(*strict*)
    apply(case_tac w1)
     apply(rename_tac p c' s1 qs qt s2 es et la ra)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt s2 es et la ra a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' s1 qs qt s2 es et la ra list)(*strict*)
    apply(case_tac list)
     apply(rename_tac p c' s1 qs qt s2 es et la ra list)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt s2 es et la ra list a lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' s1 qs qt s2 es et la ra lista)(*strict*)
    apply(case_tac lista)
     apply(rename_tac p c' s1 qs qt s2 es et la ra lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt s2 es et la ra lista a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac p c' s1 qs qt s2 es et)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "\<lparr>prod_lhs = cons_l3 es s2 qt, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs s2 qt)]\<rparr> \<in> cfg_productions G")
    apply(rename_tac p c' s1 qs qt s2 es et)(*strict*)
    prefer 2
    apply(simp add: cfgLM_step_relation_def)
   apply(rename_tac p c' s1 qs qt s2 es et)(*strict*)
   apply(thin_tac "cfgLM_step_relation G \<lparr>cfg_conf = [teA (cons_l3   es s2 qt)]\<rparr> \<lparr>prod_lhs = cons_l3 es s2 qt, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs s2 qt)]\<rparr> \<lparr>cfg_conf = [teA (cons_l3   et s1 qs), teA (cons_l3   qs s2 qt)]\<rparr>")
   apply(rename_tac p c' s1 qs qt s2 es et)(*strict*)
   apply(case_tac A2)
    apply(rename_tac p c' s1 qs qt s2 es et q b)(*strict*)
    apply(clarsimp)
   apply(rename_tac p c' s1 qs qt s2 es et q1 b q2)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "q1=es \<and> b=s2")
    apply(rename_tac p c' s1 qs qt s2 es et q1 b q2)(*strict*)
    prefer 2
    apply(simp add: cropTol3l2_single_def)
   apply(rename_tac p c' s1 qs qt s2 es et q1 b q2)(*strict*)
   apply(clarsimp)
   apply(rename_tac p c' s1 qs qt s2 es et q2)(*strict*)
   apply(rename_tac s1 qs qt1 s2 es et qt2)
   apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
   apply(subgoal_tac "\<exists>qs. p=\<lparr>prod_lhs = cons_l3 es s2 qt2, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs s2 qt2)]\<rparr>")
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
    apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(rule_tac
      x="\<lparr>prod_lhs = cons_l3 es s2 qt2, prod_rhs = [teA (cons_l3   et s1 qsa), teA (cons_l3   qsa s2 qt2)]\<rparr>"
      in exI)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(subgoal_tac "c'=\<lparr>cfg_conf=[teA (cons_l3   et s1 qsa), teA (cons_l3   qsa s2 qt2)]\<rparr>")
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     prefer 2
     apply(simp add: cfgLM_step_relation_def)
     apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 qsa l r)(*strict*)
     apply(case_tac l)
      apply(rename_tac c' s1 qs qt1 s2 es et qt2 qsa l r)(*strict*)
      prefer 2
      apply(rename_tac c' s1 qs qt1 s2 es et qt2 qsa l r a list)(*strict*)
      apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 qsa l r)(*strict*)
     apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(subgoal_tac "\<lparr>prod_lhs = cons_l3 es s2 qt2, prod_rhs = [teA (cons_l3   et s1 qsa), teA (cons_l3   qsa s2 qt2)]\<rparr> \<in> cfg_productions G")
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     prefer 2
     apply(simp add: cfgLM_step_relation_def)
    apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(thin_tac "cfgLM_step_relation G \<lparr>cfg_conf = [teA (cons_l3   es s2 qt2)]\<rparr> \<lparr>prod_lhs = cons_l3 es s2 qt2, prod_rhs = [teA (cons_l3   et s1 qsa), teA (cons_l3   qsa s2 qt2)]\<rparr> \<lparr>cfg_conf = [teA (cons_l3   et s1 qsa), teA (cons_l3   qsa s2 qt2)]\<rparr>")
    apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(rule conjI)
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     prefer 2
     apply(rule_tac
      x="[(cons_l3 et s1 qsa), (cons_l3 qsa s2 qt2)]"
      in exI)
     apply(clarsimp)
     apply(simp add: isl2_def)
     apply(simp add: cropTol3l2_single_def)
     apply(simp add: cfgLM_step_relation_def)
     apply(rule_tac
      x="[]"
      in exI)
     apply(rule_tac
      x="[]"
      in exI)
     apply(clarsimp)
    apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(rule_tac
      t="prod_to_edge G' \<lparr>prod_lhs = cons_l3 es s2 qt1, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs s2 qt1)]\<rparr>"
      and s="\<lparr>edge_src = es, edge_event = None, edge_pop = [s2], edge_push = [s1, s2], edge_trg = et\<rparr>"
      in ssubst)
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     apply(simp add: prod_to_edge_def)
     apply(rule_tac
      t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l3 es s2 qt1, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs s2 qt1)]\<rparr>"
      and s="{\<lparr>edge_src = es, edge_event = None, edge_pop = [s2], edge_push = [s1, s2], edge_trg = et\<rparr>}"
      in ssubst)
      apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
      prefer 2
      apply(force)
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     apply(rule F_SDPDA_TO_CFG_STD__edges_l3_push_single_source)
          apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
          apply(simp add: F2LR1inputx_def)
         apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
         apply(force)
        apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
        apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
       apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
       apply(force)
      apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
      apply(force)
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     apply(force)
    apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(rule sym)
    apply(simp add: prod_to_edge_def)
    apply(subgoal_tac "qsa \<in> epda_states G'")
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     apply(subgoal_tac "qt2 \<in> epda_states G'")
      apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
      apply(rule_tac
      t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l3 es s2 qt2, prod_rhs = [teA (cons_l3   et s1 qsa), teA (cons_l3   qsa s2 qt2)]\<rparr>"
      and s="{\<lparr>edge_src = es, edge_event = None, edge_pop = [s2], edge_push = [s1, s2], edge_trg = et\<rparr>}"
      in ssubst)
       apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
       prefer 2
       apply(force)
      apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
      apply(rule F_SDPDA_TO_CFG_STD__edges_l3_push_single_source)
           apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
           apply(simp add: F2LR1inputx_def)
          apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
          apply(force)
         apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
         apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
        apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
        apply(force)
       apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
       apply(force)
      apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
      apply(force)
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     apply(subgoal_tac "cons_l3 es s2 qt2 \<in> cfg_nonterminals G")
      apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
      apply(subgoal_tac "cons_l3 es s2 qt2 \<in> cfg_nonterminals (F_SDPDA_TO_CFG_STD G')")
       apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
       prefer 2
       apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def)
       apply(force)
      apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
      apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def)
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     apply(force)
    apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(subgoal_tac "cons_l3 et s1 qsa \<in> cfg_nonterminals G")
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     apply(subgoal_tac "cons_l3 et s1 qsa \<in> cfg_nonterminals (F_SDPDA_TO_CFG_STD G')")
      apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
      prefer 2
      apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def)
      apply(force)
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def)
    apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(subgoal_tac "\<forall>e\<in> cfg_productions G. prod_lhs e \<in> cfgLM_accessible_nonterminals G \<and> prod_lhs e \<in> cfgSTD_Nonblockingness_nonterminals G \<and> setA (prod_rhs e) \<subseteq> cfgLM_accessible_nonterminals G \<and> setA (prod_rhs e) \<subseteq> cfgSTD_Nonblockingness_nonterminals G \<and> setB (prod_rhs e) \<subseteq> cfg_events G")
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     prefer 2
     apply(simp add: F2LR1inputx_def valid_cfg_def)
     apply(clarsimp)
    apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(erule_tac
      x="\<lparr>prod_lhs = cons_l3 es s2 qt2, prod_rhs = [teA (cons_l3   et s1 qsa), teA (cons_l3   qsa s2 qt2)]\<rparr>"
      in ballE)
     apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac s1 qs qt1 s2 es et qt2 qsa)(*strict*)
    apply(simp add: setAConcat)
    apply(clarsimp)
    apply(simp add: F2LR1inputx_def)
   apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
   apply(subgoal_tac "p \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
    prefer 2
    apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
    apply(force)
   apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
    prefer 2
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def)
    apply(erule disjE)
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
     apply(clarsimp)
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
     apply(case_tac "edge_event x")
      apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
      apply(clarsimp)
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a)(*strict*)
     apply(clarsimp)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def)
     apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a)(*strict*)
     apply(simp add: cfgLM_step_relation_def)
     apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a l r)(*strict*)
     apply(case_tac l)
      apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a l r)(*strict*)
      prefer 2
      apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a l r aa list)(*strict*)
      apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a l r)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
    apply(erule disjE)
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
     apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 i A)(*strict*)
     apply(simp add: cfgLM_step_relation_def)
     apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 i A l r)(*strict*)
     apply(case_tac l)
      apply(rename_tac c' s1 qs qt1 s2 es et qt2 i A l r)(*strict*)
      prefer 2
      apply(rename_tac c' s1 qs qt1 s2 es et qt2 i A l r a list)(*strict*)
      apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 i A l r)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
    apply(case_tac "edge_push x")
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list)(*strict*)
    apply(clarsimp)
    apply(case_tac "edge_event x")
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list)(*strict*)
     prefer 2
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list aa)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
    apply(erule disjE)
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list)(*strict*)
     apply(simp add: cfgLM_step_relation_def)
     apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list l r)(*strict*)
     apply(case_tac l)
      apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list l r)(*strict*)
      prefer 2
      apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list l r aa lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list l r)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list qsa)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list qsa l r)(*strict*)
    apply(case_tac l)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list qsa l r)(*strict*)
     prefer 2
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list qsa l r aa lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list qsa l r)(*strict*)
    apply(clarsimp)
   apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def)
   apply(erule disjE)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
    apply(case_tac "edge_event x")
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
    apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a qt)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a qt l r)(*strict*)
    apply(case_tac l)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a qt l r)(*strict*)
     prefer 2
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a qt l r aa list)(*strict*)
     apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a qt l r)(*strict*)
    apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 et x a qt)(*strict*)
    apply(case_tac c')
    apply(rename_tac c' s1 qs qt1 et x a qt cfg_confa)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 et x a qt)(*strict*)
    apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
     apply(rename_tac s1 qs qt1 et x a qt)(*strict*)
     prefer 2
     apply(rule_tac
      G="G'"
      in valid_simple_dpda_edge_alt)
      apply(rename_tac s1 qs qt1 et x a qt)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac s1 qs qt1 et x a qt)(*strict*)
     apply(force)
    apply(rename_tac s1 qs qt1 et x a qt)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 et x a qt s1a)(*strict*)
    apply(case_tac x)
    apply(rename_tac s1 qs qt1 et x a qt s1a edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 et a qt s1a edge_src edge_trg)(*strict*)
    apply(rename_tac es et)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et)(*strict*)
    apply(thin_tac "cropTol3l2_single (cons_l3 es s1a qt1) = cropTol3l2_single (cons_l3 es s1a qt)")
    apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a qt1, prod_rhs = [teA (cons_l3   eta s1 qs), teA (cons_l3   qs s1a qt1)]\<rparr> \<in> cfg_productions G")
    apply(rename_tac s1 qs qt1 eta a qt s1a es et)(*strict*)
    apply(thin_tac " \<lparr>prod_lhs = cons_l3 es s1a qt, prod_rhs = [teB a, teA (cons_l3   et s1a qt)]\<rparr> \<in> cfg_productions G")
    apply(subgoal_tac "cons_l3 es s1a qt \<in> cfgLM_accessible_nonterminals_ALT2 G")
     apply(rename_tac s1 qs qt1 eta a qt s1a es et)(*strict*)
     prefer 2
     apply(rule cfgLM_accessible_nonterminals_cfgLM_accessible_nonterminals_ALT2)
      apply(rename_tac s1 qs qt1 eta a qt s1a es et)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et)(*strict*)
    apply(simp add: cfgLM_accessible_nonterminals_ALT2_def)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2)(*strict*)
    apply(simp add: cfgLM.trans_der_def)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
     prefer 2
     apply(rule_tac dR="d" and n="length \<pi>" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
         apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
         apply(simp add: F2LR1inputx_def)
         apply(force)
        apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
        apply(force)
       apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(simp add: cfgLM.derivation_initial_def)
       apply(rule conjI)
        apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
        apply(rule cfg_sub_preserves_cfgLM_derivation)
          apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
          apply(simp add: F2LR1inputx_def)
         apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
         apply(force)
        apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(simp add: cfg_initial_configurations_def cfg_configurations_def)
       apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
      apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(force)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(clarsimp)
     apply(simp add: setAConcat)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e dL)(*strict*)
    apply(erule_tac
      x="length \<pi>"
      in allE)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(case_tac "\<pi>=[]")
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
     apply(clarsimp)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d w1 w2 dL eL cL)(*strict*)
     apply(case_tac w1)
      apply(rename_tac s1 qs qt1 eta a qt s1a es et d w1 w2 dL eL cL)(*strict*)
      prefer 2
      apply(rename_tac s1 qs qt1 eta a qt s1a es et d w1 w2 dL eL cL aa list)(*strict*)
      apply(clarsimp)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d w1 w2 dL eL cL)(*strict*)
     apply(clarsimp)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d dL eL w)(*strict*)
     apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(subgoal_tac "\<exists>e c. d (length \<pi>) = Some (pair (Some e) c)")
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
     prefer 2
     apply(rule_tac
      m="length (\<pi>)"
      in cfgLM.pre_some_position_is_some_position_prime)
        apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
        apply(force)
       apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
       apply(force)
      apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
      apply(force)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
     apply(force)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL eL cL ea)(*strict*)
    apply(simp add: setAConcat)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
    apply(subgoal_tac "\<exists>e c. dL (length \<pi>) = Some (pair (Some e) c)")
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
     prefer 2
     apply(rule_tac
      m="length (\<pi>)"
      in epdaH.pre_some_position_is_some_position_prime)
        apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
        apply(simp add: epdaH.derivation_initial_def)
        apply(force)
       apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
       apply(force)
      apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
      apply(force)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
     apply(force)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__configuration_basic_RL_def)
    apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
     prefer 2
     apply(simp add: split_TSstructure_def CFGtermLeft_def)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
    apply(erule_tac
      x="d"
      in allE)
    apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
      in allE)
    apply(erule_tac
      x="\<pi>"
      in allE)
    apply(erule_tac
      x="\<lparr>cfg_conf = liftB w1 @ teA (cons_l3   es s1a qt) # w2\<rparr>"
      in allE)
    apply(simp add: cfgLM.trans_der_def)
    apply(erule_tac
      P="\<exists>w1 w2. [teA (cfg_initial G)] = liftB w1 @ liftA w2"
      in impE)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
     apply(rule_tac
      x="[]"
      in exI)
     apply(clarsimp)
     apply(rule_tac
      x="[cfg_initial G]"
      in exI)
     apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
    apply(subgoal_tac "w1=w1a")
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
     prefer 2
     apply(rule initial_liftB_strings_coincide)
     apply(force)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
    apply(case_tac w2a)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
     apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> w2 dL ea w e w1a w2a aa list)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA (cons_l3   es s1a qt) # liftA list = liftB w @ liftA v) = cons_l3 es s1a qt#list")
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
     prefer 2
     apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(clarsimp)
    apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA (cons_l3   es s1a qt) # liftA list = liftB w @ liftA v) = w1a")
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
     prefer 2
     apply (metis SPLIT_2_1 liftA.simps(2))
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(clarsimp)
    apply(subgoal_tac "X" for X)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
     prefer 2
     apply(rule DPDA_to_epdaH_determinism)
     apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
     apply(force)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(simp add: epdaH.is_forward_edge_deterministicHist_DB_long_def)
    apply(erule_tac
      x="\<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
      in allE)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(erule_tac
      P="\<exists>d. epdaH.derivation_initial G' d \<and> (\<exists>n. get_configuration (d n) = Some \<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>)"
      in impE)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
     apply(rule_tac
      x="dL"
      in exI)
     apply(clarsimp)
     apply(rule_tac
      x="length \<pi>"
      in exI)
     apply(simp add: get_configuration_def)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(erule_tac
      x="\<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
      in allE)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(erule_tac
      x="\<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a@[a], epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
      in allE)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(erule_tac
      x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [s1, s1a], edge_trg = eta\<rparr>"
      in allE)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(erule_tac
      x="\<lparr>edge_src = es, edge_event = Some a, edge_pop = [s1a], edge_push = [s1a], edge_trg = et\<rparr>"
      in allE)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(erule_tac
      P="(\<exists>w1. w1 \<in> epda_effects G' \<and> (\<exists>w2. w2 \<in> epda_effects G' \<and> epdaH_step_relation G' \<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr> \<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [s1, s1a], edge_trg = eta\<rparr> \<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1 # s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr> \<and> epdaH_step_relation G' \<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr> \<lparr>edge_src = es, edge_event = Some a, edge_pop = [s1a], edge_push = [s1a], edge_trg = et\<rparr> \<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a @ [a], epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr> \<and> epdaH_conf_history \<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1 # s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr> = epdaH_conf_history \<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr> @ w1 \<and> epdaH_conf_history \<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a @ [a], epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr> = epdaH_conf_history \<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr> @ w2 \<and> (ATS_History.history_fragment_prefixes epda_effects (@) G' w1 \<subseteq> ATS_History.history_fragment_prefixes epda_effects (@) G' w2 \<or> ATS_History.history_fragment_prefixes epda_effects (@) G' w2 \<subseteq> ATS_History.history_fragment_prefixes epda_effects (@) G' w1 \<or> ATS_History.history_fragment_prefixes epda_effects (@) G' w2 = ATS_History.history_fragment_prefixes epda_effects (@) G' w1)))"
      in impE)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
     apply(rule_tac
      x="[]"
      in exI)
     apply(rule conjI)
      apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
      apply(simp add: epda_effects_def)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
     apply(rule_tac
      x="[a]"
      in exI)
     apply(rule conjI)
      apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
      apply(simp add: epda_effects_def)
      apply(rule_tac
      e="\<lparr>edge_src = es, edge_event = Some a, edge_pop = [s1a], edge_push = [s1a], edge_trg = et\<rparr>"
      in epda_read_in_epda_events)
        apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
        apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
       apply(force)
      apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
      apply(simp add: option_to_set_def)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(rule conjI)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
     apply(simp add: epdaH_step_relation_def)
     apply(simp add: option_to_list_def)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(rule conjI)
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
     apply(simp add: epdaH_step_relation_def)
     apply(simp add: option_to_list_def)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list x xa)(*strict*)
    apply(simp add: epdaH.history_fragment_prefixes_def epda_effects_def)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list xa hf'')(*strict*)
    apply(subgoal_tac "valid_epda_step_label G' \<lparr>edge_src = es, edge_event = Some a, edge_pop = [s1a], edge_push = [s1a], edge_trg = et\<rparr>")
     apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list xa hf'')(*strict*)
     prefer 2
     apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
    apply(rename_tac s1 qs qt1 eta a qt s1a es et d \<pi> dL ea w e w1a list xa hf'')(*strict*)
    apply(simp add: valid_epda_step_label_def)
    apply(clarsimp)
    apply(simp add: option_to_set_def)
   apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
   apply(erule disjE)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
    apply(clarsimp)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
    apply(case_tac "edge_push x")
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
     prefer 2
     apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
    apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 x)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 x l r)(*strict*)
    apply(case_tac l)
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x l r)(*strict*)
     prefer 2
     apply(rename_tac c' s1 qs qt1 s2 es et qt2 x l r a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 s2 es et qt2 x l r)(*strict*)
    apply(clarsimp)
    apply(rename_tac c' s1 qs qt1 et x)(*strict*)
    apply(case_tac c')
    apply(rename_tac c' s1 qs qt1 et x cfg_confa)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 et x)(*strict*)
    apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
     apply(rename_tac s1 qs qt1 et x)(*strict*)
     prefer 2
     apply(rule_tac
      G="G'"
      in valid_simple_dpda_edge_alt)
      apply(rename_tac s1 qs qt1 et x)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac s1 qs qt1 et x)(*strict*)
     apply(force)
    apply(rename_tac s1 qs qt1 et x)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 et x s1a)(*strict*)
    apply(case_tac x)
    apply(rename_tac s1 qs qt1 et x s1a edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 et s1a edge_src edge_trg)(*strict*)
    apply(rename_tac es et)
    apply(rename_tac s1 qs qt1 eta s1a es et)(*strict*)
    apply(thin_tac "cropTol3l2_single (cons_l3 es s1a qt1) = cropTol3l2_single (cons_l3 es s1a et)")
    apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a qt1, prod_rhs = [teA (cons_l3   eta s1 qs), teA (cons_l3   qs s1a qt1)]\<rparr> \<in> cfg_productions G")
    apply(rename_tac s1 qs qt1 eta s1a es et)(*strict*)
    apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a et, prod_rhs = []\<rparr> \<in> cfg_productions G")
    apply(subgoal_tac "cons_l3 es s1a et \<in> cfgLM_accessible_nonterminals_ALT2 G")
     apply(rename_tac s1 qs qt1 eta s1a es et)(*strict*)
     prefer 2
     apply(rule cfgLM_accessible_nonterminals_cfgLM_accessible_nonterminals_ALT2)
      apply(rename_tac s1 qs qt1 eta s1a es et)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac s1 qs qt1 eta s1a es et)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac s1 qs qt1 eta s1a es et)(*strict*)
    apply(simp add: cfgLM_accessible_nonterminals_ALT2_def)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2)(*strict*)
    apply(simp add: cfgLM.trans_der_def)
    apply(clarsimp)
    apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
     prefer 2
     apply(rule_tac dR="d" and n="length \<pi>" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
         apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
         apply(simp add: F2LR1inputx_def)
         apply(force)
        apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
        apply(force)
       apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(simp add: cfgLM.derivation_initial_def)
       apply(rule conjI)
        apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
        apply(rule cfg_sub_preserves_cfgLM_derivation)
          apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
          apply(simp add: F2LR1inputx_def)
         apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
         apply(force)
        apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(simp add: cfg_initial_configurations_def cfg_configurations_def)
       apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
      apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(force)
     apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(clarsimp)
   apply(simp add: setAConcat)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e dL)(*strict*)
  apply(erule_tac
    x="length \<pi>"
    in allE)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(case_tac "\<pi>=[]")
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(clarsimp)
   apply(rename_tac s1 qs qt1 eta s1a es et d w1 w2 dL eL cL)(*strict*)
   apply(case_tac w1)
    apply(rename_tac s1 qs qt1 eta s1a es et d w1 w2 dL eL cL)(*strict*)
    prefer 2
    apply(rename_tac s1 qs qt1 eta s1a es et d w1 w2 dL eL cL a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac s1 qs qt1 eta s1a es et d w1 w2 dL eL cL)(*strict*)
   apply(clarsimp)
   apply(rename_tac s1 qs qt1 eta s1a es et d dL eL w)(*strict*)
   apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(subgoal_tac "\<exists>e c. d (length \<pi>) = Some (pair (Some e) c)")
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   prefer 2
   apply(rule_tac
    m="length (\<pi>)"
    in cfgLM.pre_some_position_is_some_position_prime)
      apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
      apply(force)
     apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
     apply(force)
    apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(force)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(force)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL eL cL ea)(*strict*)
  apply(simp add: setAConcat)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(subgoal_tac "\<exists>e c. dL (length \<pi>) = Some (pair (Some e) c)")
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   prefer 2
   apply(rule_tac
    m="length (\<pi>)"
    in epdaH.pre_some_position_is_some_position_prime)
      apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
      apply(simp add: epdaH.derivation_initial_def)
      apply(force)
     apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
     apply(force)
    apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
    apply(force)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   apply(force)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__configuration_basic_RL_def)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule_tac
    x="d"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
    in allE)
  apply(erule_tac
    x="\<pi>"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = liftB w1 @ teA (cons_l3   es s1a et) # w2\<rparr>"
    in allE)
  apply(simp add: cfgLM.trans_der_def)
  apply(erule_tac
    P="\<exists>w1 w2. [teA (cfg_initial G)] = liftB w1 @ liftA w2"
    in impE)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
   apply(rule_tac
    x="[]"
    in exI)
   apply(clarsimp)
   apply(rule_tac
    x="[cfg_initial G]"
    in exI)
   apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(subgoal_tac "w1=w1a")
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
   prefer 2
   apply(rule initial_liftB_strings_coincide)
   apply(force)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(case_tac w2a)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> w2 dL ea w e w1a w2a a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA (cons_l3   es s1a et) # liftA list = liftB w @ liftA v) = cons_l3 es s1a et#list")
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA (cons_l3   es s1a et) # liftA list = liftB w @ liftA v) = w1a")
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply (metis SPLIT_2_1 liftA.simps(2))
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply(rule DPDA_to_epdaH_determinism)
   apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
   apply(force)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH.is_forward_edge_deterministicHist_DB_long_def)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    P="\<exists>d. epdaH.derivation_initial G' d \<and> (\<exists>n. get_configuration (d n) = Some \<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>)"
    in impE)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(rule_tac
    x="dL"
    in exI)
   apply(clarsimp)
   apply(rule_tac
    x="length \<pi>"
    in exI)
   apply(simp add: get_configuration_def)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a, epdaH_conf_stack = map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [s1, s1a], edge_trg = eta\<rparr>"
    in allE)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [], edge_trg = et\<rparr>"
    in allE)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(thin_tac "ea \<notin> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G') \<longrightarrow> e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' ea")
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epda_effects_def)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epda_effects_def)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epdaH_step_relation_def)
   apply(simp add: option_to_list_def)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
   apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epdaH_step_relation_def)
   apply(simp add: option_to_list_def)
  apply(rename_tac s1 qs qt1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs qt1 s2 es et qt2)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
  apply(case_tac "edge_push x")
  apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
  apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list)(*strict*)
  prefer 2
  apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs qt1 s2 es et qt2 x a list)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(clarsimp)
  apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list qsa qt)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list qsa qt l r)(*strict*)
  apply(case_tac l)
  apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list qsa qt l r)(*strict*)
  prefer 2
  apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list qsa qt l r aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac c' s1 qs qt1 s2 es et qt2 x a list qsa qt l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac c' s1 qs qt1 et x a list qsa qt)(*strict*)
  apply(case_tac c')
  apply(rename_tac c' s1 qs qt1 et x a list qsa qt cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 et x a list qsa qt)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
  apply(rename_tac s1 qs qt1 et x a list qsa qt)(*strict*)
  prefer 2
  apply(rule_tac
    G="G'"
    in valid_simple_dpda_edge_alt)
   apply(rename_tac s1 qs qt1 et x a list qsa qt)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs qt1 et x a list qsa qt)(*strict*)
  apply(force)
  apply(rename_tac s1 qs qt1 et x a list qsa qt)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 et x a qsa qt s1a)(*strict*)
  apply(case_tac x)
  apply(rename_tac s1 qs qt1 et x a qsa qt s1a edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 et a qsa qt s1a edge_src edge_trg)(*strict*)
  apply(rename_tac es et)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et)(*strict*)
  apply(thin_tac "cropTol3l2_single (cons_l3 es s1a qt1) = cropTol3l2_single (cons_l3 es s1a qt)")
  apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a qt1, prod_rhs = [teA (cons_l3   eta s1 qs), teA (cons_l3   qs s1a qt1)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a qt, prod_rhs = [teA (cons_l3   et a qsa), teA (cons_l3   qsa s1a qt)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et)(*strict*)
  apply(subgoal_tac "cons_l3 es s1a qt \<in> cfgLM_accessible_nonterminals_ALT2 G")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et)(*strict*)
  prefer 2
  apply(rule cfgLM_accessible_nonterminals_cfgLM_accessible_nonterminals_ALT2)
   apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et)(*strict*)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et)(*strict*)
  apply(simp add: cfgLM_accessible_nonterminals_ALT2_def)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2)(*strict*)
  apply(simp add: cfgLM.trans_der_def)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
  prefer 2
  apply(rule_tac dR="d" and n="length \<pi>" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
      apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(simp add: F2LR1inputx_def)
      apply(force)
     apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(force)
    apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(simp add: cfgLM.derivation_initial_def)
    apply(rule conjI)
     apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(rule cfg_sub_preserves_cfgLM_derivation)
       apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(force)
     apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(simp add: cfg_initial_configurations_def cfg_configurations_def)
    apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
   apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
   apply(force)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(simp add: setAConcat)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e dL)(*strict*)
  apply(erule_tac
    x="length \<pi>"
    in allE)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(case_tac "\<pi>=[]")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d w1 w2 dL eL cL)(*strict*)
  apply(case_tac w1)
   apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d w1 w2 dL eL cL)(*strict*)
   prefer 2
   apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d w1 w2 dL eL cL aa list)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d w1 w2 dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d dL eL w)(*strict*)
  apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(subgoal_tac "\<exists>e c. d (length \<pi>) = Some (pair (Some e) c)")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  prefer 2
  apply(rule_tac
    m="length (\<pi>)"
    in cfgLM.pre_some_position_is_some_position_prime)
     apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
     apply(force)
    apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(force)
   apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(force)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(force)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL eL cL ea)(*strict*)
  apply(simp add: setAConcat)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(subgoal_tac "\<exists>e c. dL (length \<pi>) = Some (pair (Some e) c)")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  prefer 2
  apply(rule_tac
    m="length (\<pi>)"
    in epdaH.pre_some_position_is_some_position_prime)
     apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
     apply(simp add: epdaH.derivation_initial_def)
     apply(force)
    apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
    apply(force)
   apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   apply(force)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(force)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__configuration_basic_RL_def)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  prefer 2
  apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule_tac
    x="d"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
    in allE)
  apply(erule_tac
    x="\<pi>"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = liftB w1 @ teA (cons_l3   es s1a qt) # w2\<rparr>"
    in allE)
  apply(simp add: cfgLM.trans_der_def)
  apply(erule_tac
    P="\<exists>w1 w2. [teA (cfg_initial G)] = liftB w1 @ liftA w2"
    in impE)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="[cfg_initial G]"
    in exI)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(subgoal_tac "w1=w1a")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  prefer 2
  apply(rule initial_liftB_strings_coincide)
  apply(force)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(case_tac w2a)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> w2 dL ea w e w1a w2a aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA (cons_l3   es s1a qt) # liftA list = liftB w @ liftA v) = cons_l3 es s1a qt#list")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA (cons_l3   es s1a qt) # liftA list = liftB w @ liftA v) = w1a")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply (metis SPLIT_2_1 liftA.simps(2))
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply(rule DPDA_to_epdaH_determinism)
  apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
  apply(force)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH.is_forward_edge_deterministicHist_DB_long_def)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(thin_tac "ea \<notin> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G') \<longrightarrow> e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' ea")
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="dL"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="length \<pi>"
    in exI)
  apply(simp add: get_configuration_def)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a, epdaH_conf_stack = a#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [s1, s1a], edge_trg = eta\<rparr>"
    in allE)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [a, s1a], edge_trg = et\<rparr>"
    in allE)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply(clarsimp)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epda_effects_def)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epda_effects_def)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH_step_relation_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH_step_relation_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac s1 qs qt1 eta a qsa qt s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac pa c')(*strict*)
  apply(clarsimp)
  apply(rename_tac pa c' x)(*strict*)
  apply(case_tac "edge_push x")
  apply(rename_tac pa c' x)(*strict*)
  apply(clarsimp)
  apply(rename_tac pa c' x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
  apply(rename_tac pa c' x a list)(*strict*)
  prefer 2
  apply(rename_tac pa c' x a list aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac pa c' x a list)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
  apply(erule disjE)
  apply(rename_tac pa c' x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' x a list)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
  apply(rename_tac p c' x a list)(*strict*)
  prefer 2
  apply(rule_tac
    G="G'"
    in valid_simple_dpda_edge_alt)
   apply(rename_tac p c' x a list)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac p c' x a list)(*strict*)
  apply(force)
  apply(rename_tac p c' x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' x a s1)(*strict*)
  apply(case_tac x)
  apply(rename_tac p c' x a s1 edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' a s1 edge_src edge_trg)(*strict*)
  apply(rename_tac p c' s1 s2 es et)
  apply(rename_tac p c' s1 s2 es et)(*strict*)
  apply(subgoal_tac "A1 = cons_l2 es s2 \<and> [(cons_l2 et s1)] = w1 \<and> \<lparr>prod_lhs = cons_l2 es s2, prod_rhs = [teA (cons_l2   et s1)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac p c' s1 s2 es et)(*strict*)
  prefer 2
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac p c' s1 s2 es et l r la ra)(*strict*)
  apply(case_tac la)
   apply(rename_tac p c' s1 s2 es et l r la ra)(*strict*)
   prefer 2
   apply(rename_tac p c' s1 s2 es et l r la ra a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac p c' s1 s2 es et l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 s2 es et l r)(*strict*)
  apply(case_tac c')
  apply(rename_tac p c' s1 s2 es et l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 s2 es et l r)(*strict*)
  apply(case_tac l)
   apply(rename_tac p s1 s2 es et l r)(*strict*)
   prefer 2
   apply(rename_tac p s1 s2 es et l r a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac p s1 s2 es et l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 s2 es et)(*strict*)
  apply(case_tac w1)
   apply(rename_tac p s1 s2 es et)(*strict*)
   apply(clarsimp)
  apply(rename_tac p s1 s2 es et a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 s2 es et list)(*strict*)
  apply(case_tac list)
   apply(rename_tac p s1 s2 es et list)(*strict*)
   prefer 2
   apply(rename_tac p s1 s2 es et list a lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac p s1 s2 es et list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 s2 es et)(*strict*)
  apply(clarsimp)
  apply(thin_tac "cfgLM_step_relation G \<lparr>cfg_conf = [teA (cons_l2   es s2)]\<rparr> \<lparr>prod_lhs = cons_l2 es s2, prod_rhs = [teA (cons_l2   et s1)]\<rparr> \<lparr>cfg_conf = [teA (cons_l2   et s1)]\<rparr>")
  apply(rename_tac p c' s1 s2 es et)(*strict*)
  apply(case_tac A2)
  apply(rename_tac p c' s1 s2 es et q b)(*strict*)
  apply(clarsimp)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac p c' s1 s2 es et q b l r)(*strict*)
  apply(case_tac c')
  apply(rename_tac p c' s1 s2 es et q b l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 s2 es et q b l r)(*strict*)
  apply(case_tac l)
   apply(rename_tac p s1 s2 es et q b l r)(*strict*)
   prefer 2
   apply(rename_tac p s1 s2 es et q b l r a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac p s1 s2 es et q b l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 s2 es et q b)(*strict*)
  apply(case_tac p)
  apply(rename_tac p s1 s2 es et q b prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 s2 es et q b prod_rhsa)(*strict*)
  apply(simp add: cropTol3l2_single_def)
  apply(clarsimp)
  apply(rename_tac s1 et q b prod_rhsa)(*strict*)
  apply(rule_tac
    x="\<lparr>prod_lhs = cons_l2 q b, prod_rhs = [teA (cons_l2   et s1)]\<rparr>"
    in exI)
  apply(clarsimp)
  apply(rename_tac s1 et q b prod_rhs)(*strict*)
  apply(rule_tac
    x="[cons_l2 et s1]"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule_tac
    x="[]"
    in exI)
  apply(clarsimp)
  apply(rename_tac p c' s1 s2 es et q1 b q2)(*strict*)
  apply(clarsimp)
  apply(simp add: cropTol3l2_single_def)
  apply(clarsimp)
  apply(rename_tac p c' s1 et q1 b q2)(*strict*)
  apply(subgoal_tac "cons_l3 q1 b q2 = prod_lhs p \<and> cfg_conf c'=prod_rhs p \<and> p \<in> cfg_productions G")
  apply(rename_tac p c' s1 et q1 b q2)(*strict*)
  prefer 2
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac p c' s1 et q1 b q2 l r)(*strict*)
  apply(case_tac c')
  apply(rename_tac p c' s1 et q1 b q2 l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 et q1 b q2 l r)(*strict*)
  apply(case_tac l)
   apply(rename_tac p s1 et q1 b q2 l r)(*strict*)
   prefer 2
   apply(rename_tac p s1 et q1 b q2 l r a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac p s1 et q1 b q2 l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 et q1 b q2)(*strict*)
  apply(case_tac c')
  apply(rename_tac p c' s1 et q1 b q2 cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 et q1 b q2)(*strict*)
  apply(case_tac p)
  apply(rename_tac p s1 et q1 b q2 prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 prod_rhs)(*strict*)
  apply(rename_tac w)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(thin_tac "cfgLM_step_relation G \<lparr>cfg_conf = [teA (cons_l3   q1 b q2)]\<rparr> \<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = w\<rparr> \<lparr>cfg_conf = w\<rparr>")
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(subgoal_tac "\<exists>qs. \<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = w\<rparr>=\<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs b q2)]\<rparr>")
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 qs)(*strict*)
  apply(rule_tac
    x="\<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs b q2)]\<rparr>"
    in exI)
  apply(rule_tac
    t="prod_to_edge G' \<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = [teA (cons_l2   et s1)]\<rparr>"
    and s="\<lparr>edge_src = q1, edge_event = None, edge_pop = [b], edge_push = [s1, b], edge_trg = et\<rparr>"
    in ssubst)
   apply(rename_tac s1 et q1 b q2 qs)(*strict*)
   apply(simp add: prod_to_edge_def)
   apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = [teA (cons_l2   et s1)]\<rparr>"
    and s="{\<lparr>edge_src = q1, edge_event = None, edge_pop = [b], edge_push = [s1, b], edge_trg = et\<rparr>}"
    in ssubst)
    apply(rename_tac s1 et q1 b q2 qs)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac s1 et q1 b q2 qs)(*strict*)
   apply(rule F_SDPDA_TO_CFG_STD__edges_l2_push_single_source)
        apply(rename_tac s1 et q1 b q2 qs)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac s1 et q1 b q2 qs)(*strict*)
       apply(force)
      apply(rename_tac s1 et q1 b q2 qs)(*strict*)
      apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
     apply(rename_tac s1 et q1 b q2 qs)(*strict*)
     apply(force)
    apply(rename_tac s1 et q1 b q2 qs)(*strict*)
    apply(force)
   apply(rename_tac s1 et q1 b q2 qs)(*strict*)
   apply(force)
  apply(rename_tac s1 et q1 b q2 qs)(*strict*)
  apply(rule_tac
    t="prod_to_edge G' \<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs b q2)]\<rparr>"
    and s="\<lparr>edge_src = q1, edge_event = None, edge_pop = [b], edge_push = [s1, b], edge_trg = et\<rparr>"
    in ssubst)
   apply(rename_tac s1 et q1 b q2 qs)(*strict*)
   apply(simp add: prod_to_edge_def)
   apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs b q2)]\<rparr>"
    and s="{\<lparr>edge_src = q1, edge_event = None, edge_pop = [b], edge_push = [s1, b], edge_trg = et\<rparr>}"
    in ssubst)
    apply(rename_tac s1 et q1 b q2 qs)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac s1 et q1 b q2 qs)(*strict*)
   apply(subgoal_tac "qs \<in> epda_states G'")
    apply(rename_tac s1 et q1 b q2 qs)(*strict*)
    apply(subgoal_tac "q2 \<in> epda_states G'")
     apply(rename_tac s1 et q1 b q2 qs)(*strict*)
     apply(rule F_SDPDA_TO_CFG_STD__edges_l3_push_single_source)
          apply(rename_tac s1 et q1 b q2 qs)(*strict*)
          apply(simp add: F2LR1inputx_def)
         apply(rename_tac s1 et q1 b q2 qs)(*strict*)
         apply(force)
        apply(rename_tac s1 et q1 b q2 qs)(*strict*)
        apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
       apply(rename_tac s1 et q1 b q2 qs)(*strict*)
       apply(force)
      apply(rename_tac s1 et q1 b q2 qs)(*strict*)
      apply(force)
     apply(rename_tac s1 et q1 b q2 qs)(*strict*)
     apply(force)
    apply(rename_tac s1 et q1 b q2 qs)(*strict*)
    apply(subgoal_tac "cons_l3 q1 b q2 \<in> cfg_nonterminals G")
     apply(rename_tac s1 et q1 b q2 qs)(*strict*)
     apply(subgoal_tac "cons_l3 q1 b q2 \<in> cfg_nonterminals (F_SDPDA_TO_CFG_STD G')")
      apply(rename_tac s1 et q1 b q2 qs)(*strict*)
      prefer 2
      apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def)
      apply(force)
     apply(rename_tac s1 et q1 b q2 qs)(*strict*)
     apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def)
    apply(rename_tac s1 et q1 b q2 qs)(*strict*)
    apply(force)
   apply(rename_tac s1 et q1 b q2 qs)(*strict*)
   apply(subgoal_tac "cons_l3 et s1 qs \<in> cfg_nonterminals G")
    apply(rename_tac s1 et q1 b q2 qs)(*strict*)
    apply(subgoal_tac "cons_l3 et s1 qs \<in> cfg_nonterminals (F_SDPDA_TO_CFG_STD G')")
     apply(rename_tac s1 et q1 b q2 qs)(*strict*)
     prefer 2
     apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def)
     apply(force)
    apply(rename_tac s1 et q1 b q2 qs)(*strict*)
    apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def)
   apply(rename_tac s1 et q1 b q2 qs)(*strict*)
   apply(subgoal_tac "\<forall>e\<in> cfg_productions G. prod_lhs e \<in> cfgLM_accessible_nonterminals G \<and> prod_lhs e \<in> cfgSTD_Nonblockingness_nonterminals G \<and> setA (prod_rhs e) \<subseteq> cfgLM_accessible_nonterminals G \<and> setA (prod_rhs e) \<subseteq> cfgSTD_Nonblockingness_nonterminals G \<and> setB (prod_rhs e) \<subseteq> cfg_events G")
    apply(rename_tac s1 et q1 b q2 qs)(*strict*)
    prefer 2
    apply(simp add: F2LR1inputx_def valid_cfg_def)
    apply(clarsimp)
   apply(rename_tac s1 et q1 b q2 qs)(*strict*)
   apply(erule_tac
    x="\<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs b q2)]\<rparr>"
    in ballE)
    apply(rename_tac s1 et q1 b q2 qs)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac s1 et q1 b q2 qs)(*strict*)
   apply(simp add: setAConcat)
   apply(clarsimp)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 et q1 b q2 qs)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 qs)(*strict*)
  apply(rule_tac
    x="[(cons_l3 et s1 qs), (cons_l3 qs b q2)]"
    in exI)
  apply(simp add: cfgLM_step_relation_def)
  apply(simp add: isl2_def)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule_tac
    x="[]"
    in exI)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = w\<rparr> \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  prefer 2
  apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
  apply(force)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(erule disjE)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  prefer 2
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def)
  apply(erule disjE)
   apply(rename_tac s1 et q1 b q2 w)(*strict*)
   apply(clarsimp)
   apply(rename_tac s1 et q1 b q2 w x)(*strict*)
   apply(case_tac "edge_event x")
    apply(rename_tac s1 et q1 b q2 w x)(*strict*)
    apply(clarsimp)
   apply(rename_tac s1 et q1 b q2 w x a)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(erule disjE)
   apply(rename_tac s1 et q1 b q2 w)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w x)(*strict*)
  apply(case_tac "edge_push x")
   apply(rename_tac s1 et q1 b q2 w x)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
   apply(rename_tac s1 et q1 b q2 w x a list)(*strict*)
   prefer 2
   apply(rename_tac s1 et q1 b q2 w x a list aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w x a list)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def)
  apply(erule disjE)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w x)(*strict*)
  apply(case_tac "edge_event x")
   apply(rename_tac s1 et q1 b q2 w x)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w x a)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
  apply(clarsimp)
  apply(rename_tac s1 et q2 x a)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
   apply(rename_tac s1 et q2 x a)(*strict*)
   prefer 2
   apply(rule_tac
    G="G'"
    in valid_simple_dpda_edge_alt)
    apply(rename_tac s1 et q2 x a)(*strict*)
    apply(simp add: F2LR1inputx_def)
   apply(rename_tac s1 et q2 x a)(*strict*)
   apply(force)
  apply(rename_tac s1 et q2 x a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q2 x a s1a)(*strict*)
  apply(case_tac x)
  apply(rename_tac s1 et q2 x a s1a edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q2 a s1a edge_src edge_trg)(*strict*)
  apply(rename_tac es et)
  apply(rename_tac s1 eta q2 a s1a es et)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l2 es s1a, prod_rhs = [teA (cons_l2   eta s1)]\<rparr> \<in> cfg_productions G")
  apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a q2, prod_rhs = [teB a, teA (cons_l3   et s1a q2)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac s1 eta q2 a s1a es et)(*strict*)
  apply(subgoal_tac "cons_l3 es s1a q2 \<in> cfgLM_accessible_nonterminals_ALT2 G")
   apply(rename_tac s1 eta q2 a s1a es et)(*strict*)
   prefer 2
   apply(rule cfgLM_accessible_nonterminals_cfgLM_accessible_nonterminals_ALT2)
    apply(rename_tac s1 eta q2 a s1a es et)(*strict*)
    apply(simp add: F2LR1inputx_def)
   apply(rename_tac s1 eta q2 a s1a es et)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 eta q2 a s1a es et)(*strict*)
  apply(simp add: cfgLM_accessible_nonterminals_ALT2_def)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2)(*strict*)
  apply(simp add: cfgLM.trans_der_def)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
   prefer 2
   apply(rule_tac dR="d" and n="length \<pi>" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
       apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(simp add: F2LR1inputx_def)
       apply(force)
      apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(force)
     apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(simp add: cfgLM.derivation_initial_def)
     apply(rule conjI)
      apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(rule cfg_sub_preserves_cfgLM_derivation)
        apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(force)
      apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(simp add: cfg_initial_configurations_def cfg_configurations_def)
     apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
    apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(force)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
   apply(clarsimp)
   apply(simp add: setAConcat)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e dL)(*strict*)
  apply(erule_tac
    x="length \<pi>"
    in allE)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(case_tac "\<pi>=[]")
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(clarsimp)
   apply(rename_tac s1 eta q2 a s1a es et d w1 w2 dL eL cL)(*strict*)
   apply(case_tac w1)
    apply(rename_tac s1 eta q2 a s1a es et d w1 w2 dL eL cL)(*strict*)
    prefer 2
    apply(rename_tac s1 eta q2 a s1a es et d w1 w2 dL eL cL aa list)(*strict*)
    apply(clarsimp)
   apply(rename_tac s1 eta q2 a s1a es et d w1 w2 dL eL cL)(*strict*)
   apply(clarsimp)
   apply(rename_tac s1 eta q2 a s1a es et d dL eL w)(*strict*)
   apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(subgoal_tac "\<exists>e c. d (length \<pi>) = Some (pair (Some e) c)")
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   prefer 2
   apply(rule_tac
    m="length (\<pi>)"
    in cfgLM.pre_some_position_is_some_position_prime)
      apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
      apply(force)
     apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
     apply(force)
    apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(force)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(force)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL eL cL ea)(*strict*)
  apply(simp add: setAConcat)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(subgoal_tac "\<exists>e c. dL (length \<pi>) = Some (pair (Some e) c)")
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   prefer 2
   apply(rule_tac
    m="length (\<pi>)"
    in epdaH.pre_some_position_is_some_position_prime)
      apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
      apply(simp add: epdaH.derivation_initial_def)
      apply(force)
     apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
     apply(force)
    apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
    apply(force)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   apply(force)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__configuration_basic_RL_def)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule_tac
    x="d"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
    in allE)
  apply(erule_tac
    x="\<pi>"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = liftB w1 @ teA (cons_l3   es s1a q2) # w2\<rparr>"
    in allE)
  apply(simp add: cfgLM.trans_der_def)
  apply(thin_tac "ea \<notin> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G') \<longrightarrow> e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' ea")
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule impE)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
   apply(rule_tac
    x="[]"
    in exI)
   apply(clarsimp)
   apply(rule_tac
    x="[cfg_initial G]"
    in exI)
   apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(subgoal_tac "w1=w1a")
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
   prefer 2
   apply(rule initial_liftB_strings_coincide)
   apply(force)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(case_tac w2a)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> w2 dL ea w e w1a w2a aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA (cons_l3   es s1a q2) # liftA list = liftB w @ liftA v) = cons_l3 es s1a q2#list")
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA (cons_l3   es s1a q2) # liftA list = liftB w @ liftA v) = w1a")
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply (metis SPLIT_2_1 liftA.simps(2))
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply(rule DPDA_to_epdaH_determinism)
   apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
   apply(force)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH.is_forward_edge_deterministicHist_DB_long_def)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(rule_tac
    x="dL"
    in exI)
   apply(clarsimp)
   apply(rule_tac
    x="length \<pi>"
    in exI)
   apply(simp add: get_configuration_def)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a@[a], epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [s1, s1a], edge_trg = eta\<rparr>"
    in allE)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = Some a, edge_pop = [s1a], edge_push = [s1a], edge_trg = et\<rparr>"
    in allE)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epda_effects_def)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[a]"
    in exI)
  apply(rule conjI)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epda_effects_def)
   apply(rule_tac
    e="\<lparr>edge_src = es, edge_event = Some a, edge_pop = [s1a], edge_push = [s1a], edge_trg = et\<rparr>"
    in epda_read_in_epda_events)
     apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
     apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
    apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(force)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: option_to_set_def)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epdaH_step_relation_def)
   apply(simp add: option_to_list_def)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epdaH_step_relation_def)
   apply(simp add: option_to_list_def)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list x xa)(*strict*)
  apply(simp add: epdaH.history_fragment_prefixes_def epda_effects_def)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list xa hf'')(*strict*)
  apply(subgoal_tac "valid_epda_step_label G' \<lparr>edge_src = es, edge_event = Some a, edge_pop = [s1a], edge_push = [s1a], edge_trg = et\<rparr>")
   apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list xa hf'')(*strict*)
   prefer 2
   apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 eta q2 a s1a es et d \<pi> dL ea w e w1a list xa hf'')(*strict*)
  apply(simp add: valid_epda_step_label_def)
  apply(clarsimp)
  apply(simp add: option_to_set_def)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(erule disjE)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w x)(*strict*)
  apply(case_tac "edge_push x")
   apply(rename_tac s1 et q1 b q2 w x)(*strict*)
   prefer 2
   apply(rename_tac s1 et q1 b q2 w x a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w x)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
  apply(clarsimp)
  apply(rename_tac s1 et x)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
   apply(rename_tac s1 et x)(*strict*)
   prefer 2
   apply(rule_tac
    G="G'"
    in valid_simple_dpda_edge_alt)
    apply(rename_tac s1 et x)(*strict*)
    apply(simp add: F2LR1inputx_def)
   apply(rename_tac s1 et x)(*strict*)
   apply(force)
  apply(rename_tac s1 et x)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et x s1a)(*strict*)
  apply(case_tac x)
  apply(rename_tac s1 et x s1a edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et s1a edge_src edge_trg)(*strict*)
  apply(rename_tac es et)
  apply(rename_tac s1 eta s1a es et)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l2 es s1a, prod_rhs = [teA (cons_l2   eta s1)]\<rparr> \<in> cfg_productions G")
  apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a et, prod_rhs = []\<rparr> \<in> cfg_productions G")
  apply(subgoal_tac "cons_l3 es s1a et \<in> cfgLM_accessible_nonterminals_ALT2 G")
   apply(rename_tac s1 eta s1a es et)(*strict*)
   prefer 2
   apply(rule cfgLM_accessible_nonterminals_cfgLM_accessible_nonterminals_ALT2)
    apply(rename_tac s1 eta s1a es et)(*strict*)
    apply(simp add: F2LR1inputx_def)
   apply(rename_tac s1 eta s1a es et)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 eta s1a es et)(*strict*)
  apply(simp add: cfgLM_accessible_nonterminals_ALT2_def)
  apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2)(*strict*)
  apply(simp add: cfgLM.trans_der_def)
  apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
   prefer 2
   apply(rule_tac dR="d" and n="length \<pi>" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
       apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(simp add: F2LR1inputx_def)
       apply(force)
      apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(force)
     apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(simp add: cfgLM.derivation_initial_def)
     apply(rule conjI)
      apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(rule cfg_sub_preserves_cfgLM_derivation)
        apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(force)
      apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(simp add: cfg_initial_configurations_def cfg_configurations_def)
     apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
    apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(force)
   apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
   apply(clarsimp)
   apply(simp add: setAConcat)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e dL)(*strict*)
  apply(erule_tac
    x="length \<pi>"
    in allE)
  apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(case_tac "\<pi>=[]")
   apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(clarsimp)
   apply(rename_tac s1 eta s1a es et d w1 w2 dL eL cL)(*strict*)
   apply(case_tac w1)
    apply(rename_tac s1 eta s1a es et d w1 w2 dL eL cL)(*strict*)
    prefer 2
    apply(rename_tac s1 eta s1a es et d w1 w2 dL eL cL a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac s1 eta s1a es et d w1 w2 dL eL cL)(*strict*)
   apply(clarsimp)
   apply(rename_tac s1 eta s1a es et d dL eL w)(*strict*)
   apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(subgoal_tac "\<exists>e c. d (length \<pi>) = Some (pair (Some e) c)")
   apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   prefer 2
   apply(rule_tac
    m="length (\<pi>)"
    in cfgLM.pre_some_position_is_some_position_prime)
      apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
      apply(force)
     apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
     apply(force)
    apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(force)
   apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(force)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL eL cL ea)(*strict*)
  apply(simp add: setAConcat)
  apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(subgoal_tac "\<exists>e c. dL (length \<pi>) = Some (pair (Some e) c)")
   apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   prefer 2
   apply(rule_tac
    m="length (\<pi>)"
    in epdaH.pre_some_position_is_some_position_prime)
      apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
      apply(simp add: epdaH.derivation_initial_def)
      apply(force)
     apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
     apply(force)
    apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
    apply(force)
   apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   apply(force)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__configuration_basic_RL_def)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule_tac
    x="d"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
    in allE)
  apply(erule_tac
    x="\<pi>"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = liftB w1 @ teA (cons_l3   es s1a et) # w2\<rparr>"
    in allE)
  apply(simp add: cfgLM.trans_der_def)
  apply(thin_tac "ea \<notin> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G') \<longrightarrow> e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' ea")
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule impE)
   apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
   apply(rule_tac
    x="[]"
    in exI)
   apply(clarsimp)
   apply(rule_tac
    x="[cfg_initial G]"
    in exI)
   apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(subgoal_tac "w1=w1a")
   apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
   prefer 2
   apply(rule initial_liftB_strings_coincide)
   apply(force)
  apply(rename_tac s1 eta s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(case_tac w2a)
   apply(rename_tac s1 eta s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> w2 dL ea w e w1a w2a a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA (cons_l3   es s1a et) # liftA list = liftB w @ liftA v) = cons_l3 es s1a et#list")
   apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA (cons_l3   es s1a et) # liftA list = liftB w @ liftA v) = w1a")
   apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply (metis SPLIT_2_1 liftA.simps(2))
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
   apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply(rule DPDA_to_epdaH_determinism)
   apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
   apply(force)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH.is_forward_edge_deterministicHist_DB_long_def)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
   apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(rule_tac
    x="dL"
    in exI)
   apply(clarsimp)
   apply(rule_tac
    x="length \<pi>"
    in exI)
   apply(simp add: get_configuration_def)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a, epdaH_conf_stack = map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [s1, s1a], edge_trg = eta\<rparr>"
    in allE)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [], edge_trg = et\<rparr>"
    in allE)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
   apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
   apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epda_effects_def)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
   apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epda_effects_def)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
   apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epdaH_step_relation_def)
   apply(simp add: option_to_list_def)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
   apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(simp add: epdaH_step_relation_def)
   apply(simp add: option_to_list_def)
  apply(rename_tac s1 eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w x)(*strict*)
  apply(case_tac "edge_push x")
  apply(rename_tac s1 et q1 b q2 w x)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
  apply(rename_tac s1 et q1 b q2 w x a list)(*strict*)
  prefer 2
  apply(rename_tac s1 et q1 b q2 w x a list aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q1 b q2 w x a list)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(clarsimp)
  apply(rename_tac s1 et q2 x a list qs)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
  apply(rename_tac s1 et q2 x a list qs)(*strict*)
  prefer 2
  apply(rule_tac
    G="G'"
    in valid_simple_dpda_edge_alt)
   apply(rename_tac s1 et q2 x a list qs)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 et q2 x a list qs)(*strict*)
  apply(force)
  apply(rename_tac s1 et q2 x a list qs)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q2 x a qs s1a)(*strict*)
  apply(case_tac x)
  apply(rename_tac s1 et q2 x a qs s1a edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 et q2 a qs s1a edge_src edge_trg)(*strict*)
  apply(rename_tac es et)
  apply(rename_tac s1 eta q2 a qs s1a es et)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l2 es s1a, prod_rhs = [teA (cons_l2   eta s1)]\<rparr> \<in> cfg_productions G")
  apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a q2, prod_rhs = [teA (cons_l3   et a qs), teA (cons_l3   qs s1a q2)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac s1 eta q2 a qs s1a es et)(*strict*)
  apply(subgoal_tac "cons_l3 es s1a q2 \<in> cfgLM_accessible_nonterminals_ALT2 G")
  apply(rename_tac s1 eta q2 a qs s1a es et)(*strict*)
  prefer 2
  apply(rule cfgLM_accessible_nonterminals_cfgLM_accessible_nonterminals_ALT2)
   apply(rename_tac s1 eta q2 a qs s1a es et)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 eta q2 a qs s1a es et)(*strict*)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 eta q2 a qs s1a es et)(*strict*)
  apply(simp add: cfgLM_accessible_nonterminals_ALT2_def)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2)(*strict*)
  apply(simp add: cfgLM.trans_der_def)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
  prefer 2
  apply(rule_tac dR="d" and n="length \<pi>" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
      apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(simp add: F2LR1inputx_def)
      apply(force)
     apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(force)
    apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(simp add: cfgLM.derivation_initial_def)
    apply(rule conjI)
     apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(rule cfg_sub_preserves_cfgLM_derivation)
       apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(force)
     apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(simp add: cfg_initial_configurations_def cfg_configurations_def)
    apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
   apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
   apply(force)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(simp add: setAConcat)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e dL)(*strict*)
  apply(erule_tac
    x="length \<pi>"
    in allE)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(case_tac "\<pi>=[]")
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d w1 w2 dL eL cL)(*strict*)
  apply(case_tac w1)
   apply(rename_tac s1 eta q2 a qs s1a es et d w1 w2 dL eL cL)(*strict*)
   prefer 2
   apply(rename_tac s1 eta q2 a qs s1a es et d w1 w2 dL eL cL aa list)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d w1 w2 dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d dL eL w)(*strict*)
  apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(subgoal_tac "\<exists>e c. d (length \<pi>) = Some (pair (Some e) c)")
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  prefer 2
  apply(rule_tac
    m="length (\<pi>)"
    in cfgLM.pre_some_position_is_some_position_prime)
     apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
     apply(force)
    apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(force)
   apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(force)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(force)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL eL cL ea)(*strict*)
  apply(simp add: setAConcat)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(subgoal_tac "\<exists>e c. dL (length \<pi>) = Some (pair (Some e) c)")
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  prefer 2
  apply(rule_tac
    m="length (\<pi>)"
    in epdaH.pre_some_position_is_some_position_prime)
     apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
     apply(simp add: epdaH.derivation_initial_def)
     apply(force)
    apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
    apply(force)
   apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   apply(force)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(force)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__configuration_basic_RL_def)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  prefer 2
  apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule_tac
    x="d"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
    in allE)
  apply(erule_tac
    x="\<pi>"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = liftB w1 @ teA (cons_l3   es s1a q2) # w2\<rparr>"
    in allE)
  apply(simp add: cfgLM.trans_der_def)
  apply(thin_tac "ea \<notin> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G') \<longrightarrow> e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' ea")
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="[cfg_initial G]"
    in exI)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(subgoal_tac "w1=w1a")
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  prefer 2
  apply(rule initial_liftB_strings_coincide)
  apply(force)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(case_tac w2a)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> w2 dL ea w e w1a w2a aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA (cons_l3   es s1a q2) # liftA list = liftB w @ liftA v) = cons_l3 es s1a q2#list")
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA (cons_l3   es s1a q2) # liftA list = liftB w @ liftA v) = w1a")
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply (metis SPLIT_2_1 liftA.simps(2))
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply(rule DPDA_to_epdaH_determinism)
  apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
  apply(force)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH.is_forward_edge_deterministicHist_DB_long_def)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="dL"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="length \<pi>"
    in exI)
  apply(simp add: get_configuration_def)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a, epdaH_conf_stack = a#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [s1, s1a], edge_trg = eta\<rparr>"
    in allE)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [a, s1a], edge_trg = et\<rparr>"
    in allE)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply(clarsimp)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epda_effects_def)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epda_effects_def)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH_step_relation_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH_step_relation_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac s1 eta q2 a qs s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac pa c' x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' x a list qs)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
  apply(rename_tac p c' x a list qs)(*strict*)
  prefer 2
  apply(rule_tac
    G="G'"
    in valid_simple_dpda_edge_alt)
  apply(rename_tac p c' x a list qs)(*strict*)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac p c' x a list qs)(*strict*)
  apply(force)
  apply(rename_tac p c' x a list qs)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' x a qs s1)(*strict*)
  apply(case_tac x)
  apply(rename_tac p c' x a qs s1 edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' a qs s1 edge_src edge_trg)(*strict*)
  apply(rename_tac p c' s1 qs s2 es et)
  apply(rename_tac p c' s1 qs s2 es et)(*strict*)
  apply(subgoal_tac "A1 = cons_l2 es s2 \<and> [ (cons_l3 et s1 qs), (cons_l2 qs s2)] = w1 \<and> \<lparr>prod_lhs = cons_l2 es s2, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l2   qs s2)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac p c' s1 qs s2 es et)(*strict*)
  prefer 2
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs s2 es et l r la ra)(*strict*)
  apply(case_tac la)
  apply(rename_tac p c' s1 qs s2 es et l r la ra)(*strict*)
  prefer 2
  apply(rename_tac p c' s1 qs s2 es et l r la ra a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs s2 es et l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs s2 es et l r)(*strict*)
  apply(case_tac c')
  apply(rename_tac p c' s1 qs s2 es et l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et l r)(*strict*)
  apply(case_tac l)
  apply(rename_tac p s1 qs s2 es et l r)(*strict*)
  prefer 2
  apply(rename_tac p s1 qs s2 es et l r a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et)(*strict*)
  apply(case_tac w1)
  apply(rename_tac p s1 qs s2 es et)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et list)(*strict*)
  apply(case_tac list)
  apply(rename_tac p s1 qs s2 es et list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et lista)(*strict*)
  apply(case_tac lista)
  apply(rename_tac p s1 qs s2 es et lista)(*strict*)
  prefer 2
  apply(rename_tac p s1 qs s2 es et lista a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs s2 es et)(*strict*)
  apply(clarsimp)
  apply(thin_tac "cfgLM_step_relation G \<lparr>cfg_conf = [teA (cons_l2   es s2)]\<rparr> \<lparr>prod_lhs = cons_l2 es s2, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l2   qs s2)]\<rparr> \<lparr>cfg_conf = [teA (cons_l3   et s1 qs), teA (cons_l2   qs s2)]\<rparr>")
  apply(rename_tac p c' s1 qs s2 es et)(*strict*)
  apply(case_tac A2)
  apply(rename_tac p c' s1 qs s2 es et q b)(*strict*)
  apply(clarsimp)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs s2 es et q b l r)(*strict*)
  apply(case_tac c')
  apply(rename_tac p c' s1 qs s2 es et q b l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et q b l r)(*strict*)
  apply(case_tac l)
  apply(rename_tac p s1 qs s2 es et q b l r)(*strict*)
  prefer 2
  apply(rename_tac p s1 qs s2 es et q b l r a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et q b l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs s2 es et q b)(*strict*)
  apply(case_tac p)
  apply(rename_tac p s1 qs s2 es et q b prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs s2 es et q b prod_rhsa)(*strict*)
  apply(simp add: cropTol3l2_single_def)
  apply(clarsimp)
  apply(rename_tac s1 qs et q b prod_rhsa)(*strict*)
  apply(rename_tac w)
  apply(rename_tac s1 qs et q b w)(*strict*)
  apply(rule_tac
    x="\<lparr>prod_lhs = cons_l2 q b, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l2   qs b)]\<rparr>"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="[(cons_l3 et s1 qs), (cons_l2 qs b)]"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule_tac
    x="[]"
    in exI)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs s2 es et q1 b q2)(*strict*)
  apply(clarsimp)
  apply(simp add: cropTol3l2_single_def)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs et q1 b q2)(*strict*)
  apply(subgoal_tac "cons_l3 q1 b q2 = prod_lhs p \<and> cfg_conf c'=prod_rhs p \<and> p \<in> cfg_productions G")
  apply(rename_tac p c' s1 qs et q1 b q2)(*strict*)
  prefer 2
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs et q1 b q2 l r)(*strict*)
  apply(case_tac c')
  apply(rename_tac p c' s1 qs et q1 b q2 l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs et q1 b q2 l r)(*strict*)
  apply(case_tac l)
  apply(rename_tac p s1 qs et q1 b q2 l r)(*strict*)
  prefer 2
  apply(rename_tac p s1 qs et q1 b q2 l r a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs et q1 b q2 l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac p c' s1 qs et q1 b q2)(*strict*)
  apply(case_tac c')
  apply(rename_tac p c' s1 qs et q1 b q2 cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p s1 qs et q1 b q2)(*strict*)
  apply(case_tac p)
  apply(rename_tac p s1 qs et q1 b q2 prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 prod_rhs)(*strict*)
  apply(rename_tac w)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(thin_tac "cfgLM_step_relation G \<lparr>cfg_conf = [teA (cons_l3   q1 b q2)]\<rparr> \<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = w\<rparr> \<lparr>cfg_conf = w\<rparr>")
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(subgoal_tac "\<exists>qs. \<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = w\<rparr>=\<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l3   qs b q2)]\<rparr>")
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(rule_tac
    x="\<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = [teA (cons_l3   et s1 qsa), teA (cons_l3   qsa b q2)]\<rparr>"
    in exI)
  apply(rule_tac
    t="prod_to_edge G' \<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l2   qs b)]\<rparr>"
    and s="\<lparr>edge_src = q1, edge_event = None, edge_pop = [b], edge_push = [s1, b], edge_trg = et\<rparr>"
    in ssubst)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(simp add: prod_to_edge_def)
  apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = [teA (cons_l3   et s1 qs), teA (cons_l2   qs b)]\<rparr>"
    and s="{\<lparr>edge_src = q1, edge_event = None, edge_pop = [b], edge_push = [s1, b], edge_trg = et\<rparr>}"
    in ssubst)
   apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(rule F_SDPDA_TO_CFG_STD__edges_l2_push_single_source)
       apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
      apply(force)
     apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
    apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
    apply(force)
   apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
   apply(force)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(force)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(rule_tac
    t="prod_to_edge G' \<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = [teA (cons_l3   et s1 qsa), teA (cons_l3   qsa b q2)]\<rparr>"
    and s="\<lparr>edge_src = q1, edge_event = None, edge_pop = [b], edge_push = [s1, b], edge_trg = et\<rparr>"
    in ssubst)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(simp add: prod_to_edge_def)
  apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = [teA (cons_l3   et s1 qsa), teA (cons_l3   qsa b q2)]\<rparr>"
    and s="{\<lparr>edge_src = q1, edge_event = None, edge_pop = [b], edge_push = [s1, b], edge_trg = et\<rparr>}"
    in ssubst)
   apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(subgoal_tac "qsa \<in> epda_states G'")
   apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
   apply(subgoal_tac "q2 \<in> epda_states G'")
    apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
    apply(rule F_SDPDA_TO_CFG_STD__edges_l3_push_single_source)
         apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
         apply(simp add: F2LR1inputx_def)
        apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
        apply(force)
       apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
       apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
      apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
      apply(force)
     apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
     apply(force)
    apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
    apply(force)
   apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
   apply(subgoal_tac "cons_l3 q1 b q2 \<in> cfg_nonterminals G")
    apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
    apply(subgoal_tac "cons_l3 q1 b q2 \<in> cfg_nonterminals (F_SDPDA_TO_CFG_STD G')")
     apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
     prefer 2
     apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def)
     apply(force)
    apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
    apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def)
   apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
   apply(force)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(subgoal_tac "cons_l3 et s1 qsa \<in> cfg_nonterminals G")
   apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
   apply(subgoal_tac "cons_l3 et s1 qsa \<in> cfg_nonterminals (F_SDPDA_TO_CFG_STD G')")
    apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
    prefer 2
    apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def)
    apply(force)
   apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
   apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(subgoal_tac "\<forall>e\<in> cfg_productions G. prod_lhs e \<in> cfgLM_accessible_nonterminals G \<and> prod_lhs e \<in> cfgSTD_Nonblockingness_nonterminals G \<and> setA (prod_rhs e) \<subseteq> cfgLM_accessible_nonterminals G \<and> setA (prod_rhs e) \<subseteq> cfgSTD_Nonblockingness_nonterminals G \<and> setB (prod_rhs e) \<subseteq> cfg_events G")
   apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
   prefer 2
   apply(simp add: F2LR1inputx_def valid_cfg_def)
   apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(erule_tac
    x="\<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = [teA (cons_l3   et s1 qsa), teA (cons_l3   qsa b q2)]\<rparr>"
    in ballE)
   apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(simp add: setAConcat)
  apply(clarsimp)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 qsa)(*strict*)
  apply(rule_tac
    x="[(cons_l3 et s1 qsa), (cons_l3 qsa b q2)]"
    in exI)
  apply(simp add: cfgLM_step_relation_def)
  apply(simp add: isl2_def)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule_tac
    x="[]"
    in exI)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = w\<rparr> \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  prefer 2
  apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
  apply(force)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(erule disjE)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  prefer 2
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def)
  apply(erule disjE)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
  apply(case_tac "edge_event x")
   apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x a)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(erule disjE)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
  apply(case_tac "edge_push x")
  apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
  apply(rename_tac s1 qs et q1 b q2 w x a list)(*strict*)
  prefer 2
  apply(rename_tac s1 qs et q1 b q2 w x a list aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x a list)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def)
  apply(erule disjE)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
  apply(case_tac "edge_event x")
  apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x a)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
  apply(clarsimp)
  apply(rename_tac s1 qs et q2 x a)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
  apply(rename_tac s1 qs et q2 x a)(*strict*)
  prefer 2
  apply(rule_tac
    G="G'"
    in valid_simple_dpda_edge_alt)
   apply(rename_tac s1 qs et q2 x a)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs et q2 x a)(*strict*)
  apply(force)
  apply(rename_tac s1 qs et q2 x a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q2 x a s1a)(*strict*)
  apply(case_tac x)
  apply(rename_tac s1 qs et q2 x a s1a edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q2 a s1a edge_src edge_trg)(*strict*)
  apply(rename_tac es et)
  apply(rename_tac s1 qs eta q2 a s1a es et)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a q2, prod_rhs = [teB a, teA (cons_l3   et s1a q2)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac s1 qs eta q2 a s1a es et)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l2 es s1a, prod_rhs = [teA (cons_l3   eta s1 qs), teA (cons_l2   qs s1a)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac s1 qs eta q2 a s1a es et)(*strict*)
  apply(subgoal_tac "cons_l3 es s1a q2 \<in> cfgLM_accessible_nonterminals_ALT2 G")
  apply(rename_tac s1 qs eta q2 a s1a es et)(*strict*)
  prefer 2
  apply(rule cfgLM_accessible_nonterminals_cfgLM_accessible_nonterminals_ALT2)
   apply(rename_tac s1 qs eta q2 a s1a es et)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs eta q2 a s1a es et)(*strict*)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs eta q2 a s1a es et)(*strict*)
  apply(simp add: cfgLM_accessible_nonterminals_ALT2_def)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2)(*strict*)
  apply(simp add: cfgLM.trans_der_def)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
  prefer 2
  apply(rule_tac dR="d" and n="length \<pi>" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
      apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(simp add: F2LR1inputx_def)
      apply(force)
     apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(force)
    apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(simp add: cfgLM.derivation_initial_def)
    apply(rule conjI)
     apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(rule cfg_sub_preserves_cfgLM_derivation)
       apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(force)
     apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(simp add: cfg_initial_configurations_def cfg_configurations_def)
    apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
   apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
   apply(force)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(simp add: setAConcat)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e dL)(*strict*)
  apply(erule_tac
    x="length \<pi>"
    in allE)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(case_tac "\<pi>=[]")
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d w1 w2 dL eL cL)(*strict*)
  apply(case_tac w1)
   apply(rename_tac s1 qs eta q2 a s1a es et d w1 w2 dL eL cL)(*strict*)
   prefer 2
   apply(rename_tac s1 qs eta q2 a s1a es et d w1 w2 dL eL cL aa list)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d w1 w2 dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d dL eL w)(*strict*)
  apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(subgoal_tac "\<exists>e c. d (length \<pi>) = Some (pair (Some e) c)")
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  prefer 2
  apply(rule_tac
    m="length (\<pi>)"
    in cfgLM.pre_some_position_is_some_position_prime)
     apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
     apply(force)
    apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(force)
   apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(force)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(force)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL eL cL ea)(*strict*)
  apply(simp add: setAConcat)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(subgoal_tac "\<exists>e c. dL (length \<pi>) = Some (pair (Some e) c)")
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  prefer 2
  apply(rule_tac
    m="length (\<pi>)"
    in epdaH.pre_some_position_is_some_position_prime)
     apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
     apply(simp add: epdaH.derivation_initial_def)
     apply(force)
    apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
    apply(force)
   apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   apply(force)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(force)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__configuration_basic_RL_def)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  prefer 2
  apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule_tac
    x="d"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
    in allE)
  apply(erule_tac
    x="\<pi>"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = liftB w1 @ teA (cons_l3   es s1a q2) # w2\<rparr>"
    in allE)
  apply(simp add: cfgLM.trans_der_def)
  apply(thin_tac "ea \<notin> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G') \<longrightarrow> e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' ea")
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="[cfg_initial G]"
    in exI)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(subgoal_tac "w1=w1a")
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  prefer 2
  apply(rule initial_liftB_strings_coincide)
  apply(force)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(case_tac w2a)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> w2 dL ea w e w1a w2a aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA (cons_l3   es s1a q2) # liftA list = liftB w @ liftA v) = cons_l3 es s1a q2#list")
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA (cons_l3   es s1a q2) # liftA list = liftB w @ liftA v) = w1a")
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply (metis SPLIT_2_1 liftA.simps(2))
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply(rule DPDA_to_epdaH_determinism)
  apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
  apply(force)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH.is_forward_edge_deterministicHist_DB_long_def)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="dL"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="length \<pi>"
    in exI)
  apply(simp add: get_configuration_def)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a@[a], epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [s1, s1a], edge_trg = eta\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = Some a, edge_pop = [s1a], edge_push = [s1a], edge_trg = et\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply(force)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epda_effects_def)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[a]"
    in exI)
  apply(rule conjI)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epda_effects_def)
  apply(rule_tac
    e="\<lparr>edge_src = es, edge_event = Some a, edge_pop = [s1a], edge_push = [s1a], edge_trg = et\<rparr>"
    in epda_read_in_epda_events)
    apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
    apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
   apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
   apply(force)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: option_to_set_def)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH_step_relation_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH_step_relation_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list x xa)(*strict*)
  apply(simp add: epdaH.history_fragment_prefixes_def epda_effects_def)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list xa hf'')(*strict*)
  apply(subgoal_tac "valid_epda_step_label G' \<lparr>edge_src = es, edge_event = Some a, edge_pop = [s1a], edge_push = [s1a], edge_trg = et\<rparr>")
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list xa hf'')(*strict*)
  prefer 2
  apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 qs eta q2 a s1a es et d \<pi> dL ea w e w1a list xa hf'')(*strict*)
  apply(simp add: valid_epda_step_label_def)
  apply(clarsimp)
  apply(simp add: option_to_set_def)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(erule disjE)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
  apply(case_tac "edge_push x")
  apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
  prefer 2
  apply(rename_tac s1 qs et q1 b q2 w x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
  apply(clarsimp)
  apply(rename_tac s1 qs et x)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
  apply(rename_tac s1 qs et x)(*strict*)
  prefer 2
  apply(rule_tac
    G="G'"
    in valid_simple_dpda_edge_alt)
   apply(rename_tac s1 qs et x)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs et x)(*strict*)
  apply(force)
  apply(rename_tac s1 qs et x)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et x s1a)(*strict*)
  apply(case_tac x)
  apply(rename_tac s1 qs et x s1a edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et s1a edge_src edge_trg)(*strict*)
  apply(rename_tac es et)
  apply(rename_tac s1 qs eta s1a es et)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l2 es s1a, prod_rhs = [teA (cons_l3   eta s1 qs), teA (cons_l2   qs s1a)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac s1 qs eta s1a es et)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a et, prod_rhs = []\<rparr> \<in> cfg_productions G")
  apply(subgoal_tac "cons_l3 es s1a et \<in> cfgLM_accessible_nonterminals_ALT2 G")
  apply(rename_tac s1 qs eta s1a es et)(*strict*)
  prefer 2
  apply(rule cfgLM_accessible_nonterminals_cfgLM_accessible_nonterminals_ALT2)
   apply(rename_tac s1 qs eta s1a es et)(*strict*)
   apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs eta s1a es et)(*strict*)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs eta s1a es et)(*strict*)
  apply(simp add: cfgLM_accessible_nonterminals_ALT2_def)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2)(*strict*)
  apply(simp add: cfgLM.trans_der_def)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
  prefer 2
  apply(rule_tac dR="d" and n="length \<pi>" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
      apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(simp add: F2LR1inputx_def)
      apply(force)
     apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(force)
    apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(simp add: cfgLM.derivation_initial_def)
    apply(rule conjI)
     apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(rule cfg_sub_preserves_cfgLM_derivation)
       apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(force)
     apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(simp add: cfg_initial_configurations_def cfg_configurations_def)
    apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
   apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
   apply(force)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(simp add: setAConcat)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e dL)(*strict*)
  apply(erule_tac
    x="length \<pi>"
    in allE)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(case_tac "\<pi>=[]")
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d w1 w2 dL eL cL)(*strict*)
  apply(case_tac w1)
   apply(rename_tac s1 qs eta s1a es et d w1 w2 dL eL cL)(*strict*)
   prefer 2
   apply(rename_tac s1 qs eta s1a es et d w1 w2 dL eL cL a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d w1 w2 dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d dL eL w)(*strict*)
  apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(subgoal_tac "\<exists>e c. d (length \<pi>) = Some (pair (Some e) c)")
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  prefer 2
  apply(rule_tac
    m="length (\<pi>)"
    in cfgLM.pre_some_position_is_some_position_prime)
     apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
     apply(force)
    apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(force)
   apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(force)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(force)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL eL cL ea)(*strict*)
  apply(simp add: setAConcat)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(subgoal_tac "\<exists>e c. dL (length \<pi>) = Some (pair (Some e) c)")
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  prefer 2
  apply(rule_tac
    m="length (\<pi>)"
    in epdaH.pre_some_position_is_some_position_prime)
     apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
     apply(simp add: epdaH.derivation_initial_def)
     apply(force)
    apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
    apply(force)
   apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   apply(force)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(force)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__configuration_basic_RL_def)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  prefer 2
  apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule_tac
    x="d"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
    in allE)
  apply(erule_tac
    x="\<pi>"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = liftB w1 @ teA (cons_l3   es s1a et) # w2\<rparr>"
    in allE)
  apply(simp add: cfgLM.trans_der_def)
  apply(thin_tac "ea \<notin> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G') \<longrightarrow> e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' ea")
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="[cfg_initial G]"
    in exI)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(subgoal_tac "w1=w1a")
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  prefer 2
  apply(rule initial_liftB_strings_coincide)
  apply(force)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(case_tac w2a)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> w2 dL ea w e w1a w2a a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA (cons_l3   es s1a et) # liftA list = liftB w @ liftA v) = cons_l3 es s1a et#list")
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA (cons_l3   es s1a et) # liftA list = liftB w @ liftA v) = w1a")
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply (metis SPLIT_2_1 liftA.simps(2))
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply(rule DPDA_to_epdaH_determinism)
  apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
  apply(force)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH.is_forward_edge_deterministicHist_DB_long_def)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="dL"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="length \<pi>"
    in exI)
  apply(simp add: get_configuration_def)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a, epdaH_conf_stack = map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [s1, s1a], edge_trg = eta\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [], edge_trg = et\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply(force)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epda_effects_def)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epda_effects_def)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH_step_relation_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH_step_relation_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac s1 qs eta s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
  apply(case_tac "edge_push x")
  apply(rename_tac s1 qs et q1 b q2 w x)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
  apply(rename_tac s1 qs et q1 b q2 w x a list)(*strict*)
  prefer 2
  apply(rename_tac s1 qs et q1 b q2 w x a list aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q1 b q2 w x a list)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(clarsimp)
  apply(rename_tac s1 qs et q2 x a list qsa)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
  apply(rename_tac s1 qs et q2 x a list qsa)(*strict*)
  prefer 2
  apply(rule_tac
    G="G'"
    in valid_simple_dpda_edge_alt)
  apply(rename_tac s1 qs et q2 x a list qsa)(*strict*)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs et q2 x a list qsa)(*strict*)
  apply(force)
  apply(rename_tac s1 qs et q2 x a list qsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q2 x a qsa s1a)(*strict*)
  apply(case_tac x)
  apply(rename_tac s1 qs et q2 x a qsa s1a edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs et q2 a qsa s1a edge_src edge_trg)(*strict*)
  apply(rename_tac es et)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l2 es s1a, prod_rhs = [teA (cons_l3   eta s1 qs), teA (cons_l2   qs s1a)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l3 es s1a q2, prod_rhs = [teA (cons_l3   et a qsa), teA (cons_l3   qsa s1a q2)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et)(*strict*)
  apply(subgoal_tac "cons_l3 es s1a q2 \<in> cfgLM_accessible_nonterminals_ALT2 G")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et)(*strict*)
  prefer 2
  apply(rule cfgLM_accessible_nonterminals_cfgLM_accessible_nonterminals_ALT2)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et)(*strict*)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et)(*strict*)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et)(*strict*)
  apply(simp add: cfgLM_accessible_nonterminals_ALT2_def)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2)(*strict*)
  apply(simp add: cfgLM.trans_der_def)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
  prefer 2
  apply(rule_tac dR="d" and n="length \<pi>" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
     apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(simp add: F2LR1inputx_def)
     apply(force)
    apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(force)
   apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
   apply(simp add: cfgLM.derivation_initial_def)
   apply(rule conjI)
    apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(rule cfg_sub_preserves_cfgLM_derivation)
      apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
     apply(force)
    apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
    apply(simp add: F2LR1inputx_def)
   apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
   apply(simp add: cfg_initial_configurations_def cfg_configurations_def)
   apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(force)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(simp add: setAConcat)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e dL)(*strict*)
  apply(erule_tac
    x="length \<pi>"
    in allE)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(case_tac "\<pi>=[]")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d w1 w2 dL eL cL)(*strict*)
  apply(case_tac w1)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d w1 w2 dL eL cL)(*strict*)
  prefer 2
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d w1 w2 dL eL cL aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d w1 w2 dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d dL eL w)(*strict*)
  apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(subgoal_tac "\<exists>e c. d (length \<pi>) = Some (pair (Some e) c)")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  prefer 2
  apply(rule_tac
    m="length (\<pi>)"
    in cfgLM.pre_some_position_is_some_position_prime)
    apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
    apply(force)
   apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
   apply(force)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(force)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(force)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 e dL eL cL)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL eL cL ea)(*strict*)
  apply(simp add: setAConcat)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(subgoal_tac "\<exists>e c. dL (length \<pi>) = Some (pair (Some e) c)")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  prefer 2
  apply(rule_tac
    m="length (\<pi>)"
    in epdaH.pre_some_position_is_some_position_prime)
    apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
    apply(simp add: epdaH.derivation_initial_def)
    apply(force)
   apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
   apply(force)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(force)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(force)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL eL ea w)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__configuration_basic_RL_def)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  prefer 2
  apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule_tac
    x="d"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
    in allE)
  apply(erule_tac
    x="\<pi>"
    in allE)
  apply(erule_tac
    x="\<lparr>cfg_conf = liftB w1 @ teA (cons_l3   es s1a q2) # w2\<rparr>"
    in allE)
  apply(simp add: cfgLM.trans_der_def)
  apply(thin_tac "ea \<notin> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G') \<longrightarrow> e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' ea")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="[cfg_initial G]"
    in exI)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL ea w e)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(subgoal_tac "w1=w1a")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  prefer 2
  apply(rule initial_liftB_strings_coincide)
  apply(force)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w1 w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(case_tac w2a)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w2 dL ea w e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> w2 dL ea w e w1a w2a aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA (cons_l3   es s1a q2) # liftA list = liftB w @ liftA v) = cons_l3 es s1a q2#list")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA (cons_l3   es s1a q2) # liftA list = liftB w @ liftA v) = w1a")
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply (metis SPLIT_2_1 liftA.simps(2))
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply(rule DPDA_to_epdaH_determinism)
  apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
  apply(force)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH.is_forward_edge_deterministicHist_DB_long_def)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = es, epdaH_conf_history = w1a, epdaH_conf_stack = s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="dL"
    in exI)
  apply(clarsimp)
  apply(rule_tac
    x="length \<pi>"
    in exI)
  apply(simp add: get_configuration_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = eta, epdaH_conf_history = w1a, epdaH_conf_stack = s1#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>epdaH_conf_state = et, epdaH_conf_history = w1a, epdaH_conf_stack = a#s1a # map (case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q A q'. A)) list @ w\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [s1, s1a], edge_trg = eta\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule_tac
    x="\<lparr>edge_src = es, edge_event = None, edge_pop = [s1a], edge_push = [a, s1a], edge_trg = et\<rparr>"
    in allE)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(erule impE)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  prefer 2
  apply(clarsimp)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epda_effects_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule_tac
    x="[]"
    in exI)
  apply(rule conjI)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epda_effects_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH_step_relation_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(rule conjI)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(simp add: epdaH_step_relation_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac s1 qs eta q2 a qsa s1a es et d \<pi> dL ea w e w1a list)(*strict*)
  apply(clarsimp)
  done

lemma no_repeating_leading_nonterminal_Extended_hlp2: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G dA \<lparr>cfg_conf=[teA A1]\<rparr> \<pi>A \<lparr>cfg_conf=[teA C]@va\<rparr>
  \<Longrightarrow> left_degen G dA
  \<Longrightarrow> cropTol3l2_single A1 = cropTol3l2_single C
  \<Longrightarrow> i\<le>length \<pi>A
  \<Longrightarrow> dA i = Some (pair ei \<lparr>cfg_conf=teA Ai#vi\<rparr>)
  \<Longrightarrow> \<exists>dB \<pi>B Bi vB.
  map (prod_to_edge G') (take i \<pi>A) = map (prod_to_edge G') \<pi>B
  \<and> cfgLM.trans_der G dB \<lparr>cfg_conf=[teA C]\<rparr> \<pi>B \<lparr>cfg_conf=teA Bi#vB\<rparr>
  \<and> cropTol3l2_single Ai = cropTol3l2_single Bi
  \<and> left_degen G dB
  \<and> (isl2 Bi \<longrightarrow> isl2 Ai)"
  apply(induct i arbitrary: ei Ai vi)
   apply(rename_tac ei Ai vi)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "ei = None \<and> Ai = A1 \<and> vi = []")
    apply(rename_tac ei Ai vi)(*strict*)
    prefer 2
    apply(simp add: cfgLM.trans_der_def)
   apply(rename_tac ei Ai vi)(*strict*)
   apply(clarsimp)
   apply(rule_tac
      x="der1 \<lparr>cfg_conf = [teA C]\<rparr>"
      in exI)
   apply(rule_tac
      x="C"
      in exI)
   apply(rule conjI)
    apply(rule_tac
      x="[]"
      in exI)
    apply(rule cfgLM_trans_der_der1)
     apply(simp add: split_TSstructure_def)
    apply(subgoal_tac "\<lparr>cfg_conf = teA C # va\<rparr> \<in> cfg_configurations G")
     prefer 2
     apply(simp add: cfgLM.trans_der_def)
     apply(clarsimp)
     apply(rename_tac e)(*strict*)
     apply(rule_tac
      d="dA"
      in cfgLM.belongs_configurations)
      apply(rename_tac e)(*strict*)
      apply(force)
     apply(rename_tac e)(*strict*)
     apply(force)
    apply(simp add: cfg_configurations_def)
   apply(clarsimp)
   apply(rule conjI)
    apply(rule der1_left_degen)
   apply(case_tac A1)
    apply(rename_tac q b)(*strict*)
    apply(simp add: isl2_def)
   apply(rename_tac q1 b q2)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "X" for X)
    apply(rename_tac q1 b q2)(*strict*)
    prefer 2
    apply(rule_tac
      d="dA"
      in only_l3_nonterminals_reachable)
         apply(rename_tac q1 b q2)(*strict*)
         apply(simp add: F2LR1inputx_def)
         apply(force)
        apply(rename_tac q1 b q2)(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac q1 b q2)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac q1 b q2)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac q1 b q2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac q1 b q2)(*strict*)
    apply(force)
   apply(rename_tac q1 b q2)(*strict*)
   apply(simp add: setAConcat)
   apply(case_tac C)
    apply(rename_tac q1 b q2 q ba)(*strict*)
    apply(clarsimp)
    apply(force)
   apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
   apply(clarsimp)
   apply(simp add: isl2_def)
  apply(rename_tac i ei Ai vi)(*strict*)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. dA i = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
   apply(rename_tac i ei Ai vi)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac i ei Ai vi e)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc i"
      in cfgLM.step_detail_before_some_position)
     apply(rename_tac i ei Ai vi e)(*strict*)
     apply(force)
    apply(rename_tac i ei Ai vi e)(*strict*)
    apply(force)
   apply(rename_tac i ei Ai vi e)(*strict*)
   apply(force)
  apply(rename_tac i ei Ai vi)(*strict*)
  apply(clarsimp)
  apply(rename_tac i Ai vi e1 e2 c1)(*strict*)
  apply(erule_tac
      x="e1"
      in meta_allE)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>A' va'. c1=\<lparr>cfg_conf = [teA A']@va'\<rparr>")
   apply(rename_tac i Ai vi e1 e2 c1)(*strict*)
   prefer 2
   apply(case_tac c1)
   apply(rename_tac i Ai vi e1 e2 c1 cfg_conf)(*strict*)
   apply(clarsimp)
   apply(rename_tac i Ai vi e1 e2 cfg_conf)(*strict*)
   apply(rename_tac w)
   apply(rename_tac i Ai vi e1 e2 w)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac i Ai vi e1 e2 l r)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac i Ai vi e1 e2 l r e)(*strict*)
   apply(case_tac l)
    apply(rename_tac i Ai vi e1 e2 l r e)(*strict*)
    prefer 2
    apply(rename_tac i Ai vi e1 e2 l r e a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac i Ai vi e1 e2 l r e)(*strict*)
   apply(clarsimp)
  apply(rename_tac i Ai vi e1 e2 c1)(*strict*)
  apply(clarsimp)
  apply(rename_tac i Ai vi e1 e2 A' va')(*strict*)
  apply(erule_tac
      x="A'"
      in meta_allE)
  apply(erule_tac
      x="va'"
      in meta_allE)
  apply(clarsimp)
  apply(rename_tac i Ai vi e1 e2 A' va' dB \<pi>B Bi vB)(*strict*)
  apply(case_tac e2)
  apply(rename_tac i Ai vi e1 e2 A' va' dB \<pi>B Bi vB prod_lhs prod_rhs)(*strict*)
  apply(clarsimp)
  apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB prod_lhs prod_rhs)(*strict*)
  apply(rename_tac X w)
  apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X w)(*strict*)
  apply(case_tac w)
   apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X w)(*strict*)
   apply(clarsimp)
   apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X)(*strict*)
   apply(simp add: left_degen_def sat_refined_def)
   apply(erule_tac
      x="i"
      and P="\<lambda>i. case dA (Suc i) of None \<Rightarrow> True | Some (pair e' c') \<Rightarrow> case dA i of None \<Rightarrow> False | Some (pair e c) \<Rightarrow> case e' of None \<Rightarrow> False | Some e' \<Rightarrow> (\<exists>w. cfg_conf c = teA (prod_lhs e') # w) \<and> (\<exists>A w. prod_rhs e' = teA A # w)"
      in allE)
   apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X)(*strict*)
   apply(clarsimp)
  apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X w a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X a list)(*strict*)
  apply(rename_tac w)
  apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X a w)(*strict*)
  apply(subgoal_tac "A'=X \<and> a#w@va' = teA Ai#vi")
   apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X a w)(*strict*)
   prefer 2
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X a w l r)(*strict*)
   apply(case_tac l)
    apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X a w l r)(*strict*)
    prefer 2
    apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X a w l r aa list)(*strict*)
    apply(clarsimp)
   apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X a w l r)(*strict*)
   apply(clarsimp)
  apply(rename_tac i Ai vi e1 A' va' dB \<pi>B Bi vB X a w)(*strict*)
  apply(clarsimp)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftA l' = w")
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterA w"
      in exI)
   apply(subgoal_tac "LR1ProdForm G")
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w)(*strict*)
    apply(simp add: LR1ProdForm_def)
    apply(erule_tac
      x="\<lparr>prod_lhs = X, prod_rhs = teA Ai # w\<rparr>"
      in ballE)
     apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w)(*strict*)
     prefer 2
     apply(simp add: cfgLM_step_relation_def)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w)(*strict*)
    apply(clarsimp)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w q1 q2 q3 q4 A1a A2)(*strict*)
    apply(erule disjE)
     apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w q1 q2 q3 q4 A1a A2)(*strict*)
     apply(clarsimp)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w q1 q2 q3 q4 A1a A2)(*strict*)
    apply(erule disjE)
     apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w q1 q2 q3 q4 A1a A2)(*strict*)
     apply(clarsimp)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w q1 q2 q3 q4 A1a A2)(*strict*)
    apply(clarsimp)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w)(*strict*)
   apply(rule sub_of_F_SDPDA_TO_CFG_STD__implies_LR1ProdForm)
   apply(simp add: F2LR1inputx_def)
   apply(force)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X w)(*strict*)
  apply(clarsimp)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
   prefer 2
   apply(rule_tac
      ?w1.0="Ai#l'"
      and p="\<lparr>prod_lhs = X, prod_rhs = teA Ai # liftA l'\<rparr>"
      and ?A1.0="X"
      and ?A2.0="Bi"
      in no_repeating_leading_nonterminal_Extended_hlp1)
         apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
         apply(force)
        apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
        apply(force)
       apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
       apply(force)
      apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
      apply(case_tac X)
       apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' q b)(*strict*)
       apply(clarsimp)
      apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' q1 b q2)(*strict*)
      apply(clarsimp)
      apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB l' q1 b q2)(*strict*)
      apply(case_tac Bi)
       apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB l' q1 b q2 q ba)(*strict*)
       prefer 2
       apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB l' q1 b q2 q1a ba q2a)(*strict*)
       apply(clarsimp)
      apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB l' q1 b q2 q ba)(*strict*)
      apply(clarsimp)
      apply(rename_tac i Ai e1 va' dB \<pi>B vB l' q1 b q2 q ba)(*strict*)
      apply(simp add: isl2_def)
     apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
     apply(simp add: cfgLM_step_relation_def)
     apply(clarsimp)
     apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' l r)(*strict*)
     apply(rule_tac
      x="[]"
      in exI)
     apply(rule_tac
      x="[]"
      in exI)
     apply(clarsimp)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
    apply(force)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
   apply(subgoal_tac "\<lparr>cfg_conf = teA Bi # vB\<rparr> \<in> cfg_configurations G")
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
    prefer 2
    apply(simp add: cfgLM.trans_der_def)
    apply(clarsimp)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' e ea)(*strict*)
    apply(rule_tac
      d="dB"
      in cfgLM.belongs_configurations)
     apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' e ea)(*strict*)
     apply(force)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' e ea)(*strict*)
    apply(force)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
   apply(simp add: cfg_configurations_def)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l')(*strict*)
  apply(clarsimp)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' p' w2)(*strict*)
  apply(subgoal_tac "p' = \<lparr>prod_lhs = Bi, prod_rhs = liftA w2\<rparr>")
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' p' w2)(*strict*)
   prefer 2
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' p' w2 l r la ra)(*strict*)
   apply(case_tac la)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' p' w2 l r la ra)(*strict*)
    prefer 2
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' p' w2 l r la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' p' w2 l r la ra)(*strict*)
   apply(clarsimp)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' p' w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' w2)(*strict*)
  apply(case_tac w2)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' w2)(*strict*)
   apply(clarsimp)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' w2 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
   prefer 2
   apply(rule_tac
      ?w1.0="[C]"
      and ?v2.0="[Bi]"
      and G="G"
      and ?v4.0="vB"
      and ?d1.0="dB"
      and ?d2.0="der2 \<lparr>cfg_conf = [teA Bi]\<rparr> \<lparr>prod_lhs = Bi, prod_rhs = teA a # liftA list\<rparr> \<lparr>cfg_conf = teA a # liftA list\<rparr>"
      in cfgLM_trans_der_concat_extend_prime_with_left_degen)
       apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
      prefer 3
      apply(clarsimp)
      apply(rule cfgLM.trans_der_der2)
        apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
        apply(simp add: split_TSstructure_def)
       apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
       apply(subgoal_tac "\<lparr>cfg_conf = teA Bi # vB\<rparr> \<in> cfg_configurations G")
        apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
        prefer 2
        apply(simp add: cfgLM.trans_der_def)
        apply(clarsimp)
        apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list e ea)(*strict*)
        apply(rule_tac
      d="dB"
      in cfgLM.belongs_configurations)
         apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list e ea)(*strict*)
         apply(force)
        apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list e ea)(*strict*)
        apply(force)
       apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
       apply(simp add: cfg_configurations_def)
      apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
      apply(force)
     apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
     apply(force)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
    apply(force)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
   apply(rule der2_left_degen)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
    apply(force)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
   apply(force)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list d)(*strict*)
  apply(rule_tac
      x="d"
      in exI)
  apply(rule_tac
      x="\<pi>B@[\<lparr>prod_lhs = Bi, prod_rhs = teA a # liftA list\<rparr>]"
      in exI)
  apply(clarsimp)
  apply(rule_tac
      t="take (Suc i) \<pi>A"
      and s="take i \<pi>A @ [\<pi>A!i]"
      in ssubst)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list d)(*strict*)
   apply(rule take_Suc_conv_app_nth)
   apply(force)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list d)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<lparr>prod_lhs = X, prod_rhs = teA Ai # liftA l'\<rparr>=\<pi>A!i")
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list d)(*strict*)
   prefer 2
   apply(rule_tac
      d="dA"
      in cfgLM.trans_der_getLabel_at_pos)
       apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list d)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list d)(*strict*)
      apply(force)
     apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list d)(*strict*)
     apply(force)
    apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list d)(*strict*)
    apply(force)
   apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list d)(*strict*)
   apply(force)
  apply(rename_tac i Ai e1 va' dB \<pi>B Bi vB X l' a list d)(*strict*)
  apply(clarsimp)
  apply(rule_tac
      x="a"
      in exI)
  apply(clarsimp)
  apply(rule_tac
      x="liftA list @ vB"
      in exI)
  apply(force)
  done

lemma prods_to_final_state: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> \<lparr>prod_lhs = cons_l2 q b, prod_rhs = []\<rparr> \<in> cfg_productions G
  \<Longrightarrow> q \<in> epda_marking G'"
  apply(subgoal_tac "\<lparr>prod_lhs = cons_l2 q b, prod_rhs = []\<rparr> \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
   prefer 2
   apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
   apply(force)
  apply(clarsimp)
  apply(erule disjE)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def)
   apply(erule disjE)
    apply(clarsimp)
    apply(rename_tac x)(*strict*)
    apply(case_tac "edge_event x")
     apply(rename_tac x)(*strict*)
     apply(clarsimp)
    apply(rename_tac x a)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
   apply(erule disjE)
    apply(clarsimp)
    apply(rename_tac x)(*strict*)
    apply(case_tac "edge_push x")
     apply(rename_tac x)(*strict*)
     apply(clarsimp)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
    apply(rename_tac x a list)(*strict*)
    apply(clarsimp)
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(case_tac "edge_push x")
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
   apply(rename_tac x a list)(*strict*)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac x a list)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac x a list aa)(*strict*)
   apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def)
  apply(erule disjE)
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(case_tac "edge_event x")
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
   apply(rename_tac x a)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def)
  apply(erule disjE)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
  apply(clarsimp)
  apply(rename_tac x)(*strict*)
  apply(case_tac "edge_push x")
   apply(rename_tac x)(*strict*)
   apply(clarsimp)
  apply(rename_tac x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
   apply(rename_tac x a list)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
  apply(rename_tac x a list aa)(*strict*)
  apply(clarsimp)
  done

lemma duplicate_markingH_use_in_CFG: "
F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> q \<in> epda_marking G'
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf = [teA A1]\<rparr> \<pi> \<lparr>cfg_conf = teA A2 # v2\<rparr>
  \<Longrightarrow> (cons_l2 q s1) = cropTol3l2_single A2
  \<Longrightarrow> (cons_l2 q s2) = cropTol3l2_single A1
  \<Longrightarrow> \<pi> \<noteq> []
  \<Longrightarrow> False"
  apply(subgoal_tac "\<not> duplicate_markingH G'")
   prefer 2
   apply(rule duplicate_marking_to_duplicate_markingH)
    apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
   apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
  apply(simp add: duplicate_markingH_def)
  apply(subgoal_tac "A1 \<in> cfgLM_accessible_nonterminals_ALT2 G")
   prefer 2
   apply(rule cfgLM_accessible_nonterminals_cfgLM_accessible_nonterminals_ALT2)
    apply(simp add: F2LR1inputx_def)
   apply(subgoal_tac "A1 \<in> cfg_nonterminals G")
    apply(simp add: F2LR1inputx_def)
   apply(subgoal_tac "\<lparr>cfg_conf = [teA A1]\<rparr> \<in> cfg_configurations G")
    prefer 2
    apply(simp add: cfgLM.trans_der_def)
    apply(clarsimp)
    apply(rename_tac e)(*strict*)
    apply(rule cfgLM.belongs_configurations)
     apply(rename_tac e)(*strict*)
     apply(force)
    apply(rename_tac e)(*strict*)
    apply(force)
   apply(simp add: cfg_configurations_def setAConcat setA_liftB setB_liftB)
  apply(simp add: cfgLM_accessible_nonterminals_ALT2_def)
  apply(clarsimp)
  apply(rename_tac da \<pi>' w1 w2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac da \<pi>' w1 w2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and ?v1.0="w1"
      and ?v4.0="w2"
      and ?d1.0="da"
      and ?d2.0="d"
      in cfgLM_trans_der_concat_extend)
     apply(rename_tac da \<pi>' w1 w2)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac da \<pi>' w1 w2)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac da \<pi>' w1 w2)(*strict*)
   apply(force)
  apply(rename_tac da \<pi>' w1 w2)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>d e. cfgLM.trans_der G d \<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr> (\<pi>' @ \<pi>) \<lparr>cfg_conf = liftB w1 @ teA A2 # v2 @ w2\<rparr> \<and> d (length \<pi>') = Some (pair e \<lparr>cfg_conf = liftB w1 @ teA A1 # w2\<rparr>)")
   apply(rename_tac da \<pi>' w1 w2)(*strict*)
   prefer 2
   apply(rule_tac
      x="derivation_append da (derivation_map d (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length \<pi>')"
      in exI)
   apply(rename_tac da \<pi>' w1 w2)(*strict*)
   apply(clarsimp)
   apply(simp add: derivation_append_def derivation_map_def cfgLM.trans_der_def)
  apply(rename_tac da \<pi>' w1 w2)(*strict*)
  apply(thin_tac "cfgLM.trans_der G (derivation_append da (derivation_map d (\<lambda>v. \<lparr>cfg_conf = liftB w1 @ cfg_conf v @ w2\<rparr>)) (length \<pi>')) \<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr> (\<pi>' @ \<pi>) \<lparr>cfg_conf = liftB w1 @ teA A2 # v2 @ w2\<rparr>")
  apply(rename_tac da \<pi>' w1 w2)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d \<lparr>cfg_conf = [teA A1]\<rparr> \<pi> \<lparr>cfg_conf = teA A2 # v2\<rparr>")
  apply(rename_tac d \<pi>' w1 w2)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d \<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr> \<pi>' \<lparr>cfg_conf = liftB w1 @ teA A1 # w2\<rparr>")
  apply(rename_tac d \<pi>' w1 w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>' w1 w2 d e)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac \<pi>' w1 w2 d e)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac \<pi>' w1 w2 d e)(*strict*)
  apply(erule_tac
      x="d"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cfg_initial G)]\<rparr>"
      in allE)
  apply(erule_tac
      x="\<pi>'@\<pi>"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = liftB w1 @ teA A2 # v2 @ w2\<rparr>"
      in allE)
  apply(clarsimp)
  apply(erule impE)
   apply(rename_tac \<pi>' w1 w2 d e)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[cfg_initial G]"
      in exI)
   apply(clarsimp)
  apply(rename_tac \<pi>' w1 w2 d e)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>' w1 w2 d e w1a w2a)(*strict*)
  apply(subgoal_tac "w1=w1a")
   apply(rename_tac \<pi>' w1 w2 d e w1a w2a)(*strict*)
   prefer 2
   apply (metis initial_liftB_strings_coincide)
  apply(rename_tac \<pi>' w1 w2 d e w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>' w2 d e w1a w2a)(*strict*)
  apply(case_tac w2a)
   apply(rename_tac \<pi>' w2 d e w1a w2a)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>' w2 d e w1a w2a a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>' w2 d e w1a list)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>' w2 d e w1a list)(*strict*)
   prefer 2
   apply(rule liftA_append)
   apply(force)
  apply(rename_tac \<pi>' w2 d e w1a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>' d e w1a l1 l2a)(*strict*)
  apply(thin_tac "liftA l1 @ liftA l2a = liftA (l1 @ l2a)")
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>' d e w1a l1 l2a)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac dR="d" and n="length (\<pi>'@\<pi>)" in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_back_hlp_prime_prime)
       apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
       apply(simp add: F2LR1inputx_def)
       apply(force)
      apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
      apply(force)
     apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
     apply(simp add: cfgLM.derivation_initial_def)
     apply(rule conjI)
      apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
      apply(rule cfg_sub_preserves_cfgLM_derivation)
        apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
       apply(force)
      apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
     apply(simp add: cfg_initial_configurations_def cfg_configurations_def)
     apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
    apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
    apply(force)
   apply(rename_tac \<pi>' d e w1a l1 l2a ea)(*strict*)
   apply(clarsimp)
   apply(simp add: setAConcat)
  apply(rename_tac \<pi>' d e w1a l1 l2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>' d e w1a l1 l2a dL)(*strict*)
  apply(erule_tac x="length \<pi>'" in allE')
  apply(erule_tac
      x="length \<pi>'+length \<pi>"
      in allE)
  apply(clarsimp)
  apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa cL cLa eR cR)(*strict*)
  apply(subgoal_tac "d (length \<pi>' + length \<pi>) = Some (pair eR \<lparr>cfg_conf = liftB w1a @ teA A2 # liftA (l1 @ l2a)\<rparr>)")
   apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa cL cLa eR cR)(*strict*)
   prefer 2
   apply(simp add: cfgLM.trans_der_def)
  apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa cL cLa eR cR)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa cL cLa eR)(*strict*)
  apply(simp add: setAConcat)
  apply(clarsimp)
  apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa)(*strict*)
  apply(erule_tac
      x="dL"
      in allE)
  apply(clarsimp)
  apply(case_tac \<pi>)
   apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi> d e w1a l1 l2a dL eL eLa eR w wa a list)(*strict*)
  apply(rename_tac p \<pi>)
  apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi>)(*strict*)
  apply(erule_tac
      x="length \<pi>'"
      in allE)
  apply(erule_tac
      x="length \<pi>"
      in allE)
  apply(simp add: get_configuration_def F_SDPDA_TO_CFG_STD__configuration_basic_RL_def Let_def)
  apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA A1 # liftA l2a = liftB w @ liftA v) = w1a")
   apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi>)(*strict*)
   apply(subgoal_tac "(THE w. \<exists>v. liftB w1a @ teA A2 # liftA (l1 @ l2a) = liftB w @ liftA v) = w1a")
    apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi>)(*strict*)
    apply(clarsimp)
    apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA A1 # liftA l2a = liftB w @ liftA v) = A1 # l2a")
     apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi>)(*strict*)
     apply(clarsimp)
     apply(subgoal_tac "(THE v. \<exists>w. liftB w1a @ teA A2 # liftA (l1 @ l2a) = liftB w @ liftA v) = A2 # (l1 @ l2a)")
      apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi>)(*strict*)
      apply(clarsimp)
      apply(case_tac A2)
       apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi> qa b)(*strict*)
       apply(case_tac A1)
        apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi> qa b qaa ba)(*strict*)
        apply(simp add: cropTol3l2_single_def)
       apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi> qa b q1 ba q2)(*strict*)
       apply(simp add: cropTol3l2_single_def)
      apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi> q1 b q2)(*strict*)
      apply(case_tac A1)
       apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi> q1 b q2 qa ba)(*strict*)
       apply(simp add: cropTol3l2_single_def)
      apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi> q1 b q2 q1a ba q2a)(*strict*)
      apply(simp add: cropTol3l2_single_def)
     apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi>)(*strict*)
     apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
    apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi>)(*strict*)
    apply (metis liftA.simps(2) THE_liftB_liftA event_stack_separation_def)
   apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi>)(*strict*)
   apply (metis SPLIT_2_1 liftA.simps(2))
  apply(rename_tac \<pi>' d e w1a l1 l2a dL eL eLa eR w wa p \<pi>)(*strict*)
  apply (metis SPLIT_2_1 liftA.simps(2))
  done

lemma THE_unique_edge_is_in_delta_prime_1: "
  F2LR1inputx G G'
  \<Longrightarrow> p \<in> cfg_productions G
  \<Longrightarrow> prod_rhs p \<noteq> []
  \<Longrightarrow> \<exists>x. x \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p"
  apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
  apply(subgoal_tac "p \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
   prefer 2
   apply(simp add: F2LR1inputx_def)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD_def cfg_sub_def)
   apply(force)
  apply(clarsimp)
  apply(erule disjE)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def)
   apply(erule disjE)
    apply(clarsimp)
    apply(rename_tac x)(*strict*)
    apply(rule_tac
      x="x"
      in exI)
    apply(clarsimp)
    apply(case_tac "edge_event x")
     apply(rename_tac x)(*strict*)
     apply(clarsimp)
    apply(rename_tac x a)(*strict*)
    apply(clarsimp)
   apply(erule disjE)
    apply(clarsimp)
    apply(rename_tac x)(*strict*)
    apply(rule_tac
      x="x"
      in exI)
    apply(clarsimp)
    apply(case_tac "edge_push x")
     apply(rename_tac x)(*strict*)
     prefer 2
     apply(rename_tac x a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(rule_tac
      x="x"
      in exI)
   apply(clarsimp)
   apply(case_tac "edge_push x")
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
   apply(rename_tac x a list)(*strict*)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac x a list)(*strict*)
    prefer 2
    apply(rename_tac x a list aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac x a list)(*strict*)
   apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def)
  apply(erule disjE)
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(rule_tac
      x="x"
      in exI)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
   apply(rename_tac x a)(*strict*)
   apply(clarsimp)
  apply(erule disjE)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
   apply(clarsimp)
  apply(clarsimp)
  apply(rename_tac x)(*strict*)
  apply(case_tac "edge_push x")
   apply(rename_tac x)(*strict*)
   apply(clarsimp)
  apply(rename_tac x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
   apply(rename_tac x a list)(*strict*)
   prefer 2
   apply(rename_tac x a list aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac x a list)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
  apply(erule disjE)
   apply(rename_tac x a list)(*strict*)
   apply(clarsimp)
   apply(rule_tac
      x="x"
      in exI)
   apply(clarsimp)
  apply(rename_tac x a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac x a list qs)(*strict*)
  apply(rule_tac
      x="x"
      in exI)
  apply(clarsimp)
  done

lemma THE_unique_edge_is_in_delta_prime_2: "
  F2LR1inputx G G'
  \<Longrightarrow> p \<in> cfg_productions G
  \<Longrightarrow> prod_rhs p \<noteq> []
  \<Longrightarrow> x \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p
  \<Longrightarrow> y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p
  \<Longrightarrow> x = y"
  apply(subgoal_tac "x \<in> epda_delta G'")
   prefer 2
   apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
  apply(subgoal_tac "y \<in> epda_delta G'")
   prefer 2
   apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
  apply(subgoal_tac "(\<lambda>e. case edge_event e of None \<Rightarrow> edge_push e = [] \<or> (\<exists>x. edge_push e = x # edge_pop e) | Some a \<Rightarrow> edge_pop e = edge_push e)x")
   prefer 2
   apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
  apply(subgoal_tac "(\<lambda>e. case edge_event e of None \<Rightarrow> edge_push e = [] \<or> (\<exists>x. edge_push e = x # edge_pop e) | Some a \<Rightarrow> edge_pop e = edge_push e)y")
   prefer 2
   apply(simp add: F2LR1inputx_def valid_simple_dpda_def)
  apply(subgoal_tac "\<exists>a. edge_pop x=[a]")
   prefer 2
   apply(rule_tac
      G="G'"
      in valid_pda_edge_pop_single)
    apply(simp add: F2LR1inputx_def valid_dpda_def valid_simple_dpda_def)
   apply(force)
  apply(clarsimp)
  apply(rename_tac a)(*strict*)
  apply(subgoal_tac "\<exists>a. edge_pop y=[a]")
   apply(rename_tac a)(*strict*)
   prefer 2
   apply(rule_tac
      G="G'"
      in valid_pda_edge_pop_single)
    apply(rename_tac a)(*strict*)
    apply(simp add: F2LR1inputx_def valid_dpda_def valid_simple_dpda_def)
   apply(rename_tac a)(*strict*)
   apply(force)
  apply(rename_tac a)(*strict*)
  apply(clarsimp)
  apply(rename_tac a aa)(*strict*)
  apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states G') \<and> (\<exists>y. edge_event x = Some y)"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya yaa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
    apply(clarsimp)
    apply(rename_tac a aa ya qta)(*strict*)
    apply(case_tac x)
    apply(rename_tac a aa ya qta edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
    apply(case_tac y)
    apply(rename_tac a aa ya qta edge_srca edge_eventa edge_popa edge_pusha edge_trga edge_srcaa edge_eventaa edge_popaa edge_pushaa edge_trgaa)(*strict*)
    apply(clarsimp)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa ya)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa ya)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
   apply(rename_tac a aa ya)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa ya)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya xa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
    apply(clarsimp)
   apply(rename_tac a aa ya)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa ya)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya yaa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa ya)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa ya xa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(clarsimp)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_read y (epda_states G') \<and> (\<exists>ya. edge_event y = Some ya)"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa ya)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa ya)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya xa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
    apply(clarsimp)
   apply(rename_tac a aa ya)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa ya)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya yb)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa ya)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa ya xa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(clarsimp)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop x \<and> edge_push x = []"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa xa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop y \<and> edge_push y = []"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa xa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<and> edge_push x \<noteq> [] \<and> edge_event x = None"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa xa xaa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
    apply(clarsimp)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa xa ya)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa xaa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(clarsimp)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l3_push y (epda_states G') \<and> edge_push y \<noteq> [] \<and> edge_event y = None"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa xa ya)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa xaa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(clarsimp)
  apply(rename_tac a aa)(*strict*)
  apply(erule_tac
      P="p \<in> F_SDPDA_TO_CFG_STD__edges_l2_read x \<and> (\<exists>y. edge_event x = Some y)"
      in disjE)
   apply(rename_tac a aa)(*strict*)
   apply(erule disjE)
    apply(rename_tac a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac a aa ya yaa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
    apply(clarsimp)
    apply(rename_tac a aa ya)(*strict*)
    apply(case_tac x)
    apply(rename_tac a aa ya edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
    apply(case_tac y)
    apply(rename_tac a aa ya edge_srca edge_eventa edge_popa edge_pusha edge_trga edge_srcaa edge_eventaa edge_popaa edge_pushaa edge_trgaa)(*strict*)
    apply(clarsimp)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa ya)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(rename_tac a aa)(*strict*)
  apply(erule disjE)
   apply(rename_tac a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac a aa xa ya)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(rename_tac a aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac a aa xa xaa)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(erule_tac
      P="p = \<lparr>prod_lhs = cons_l2 (edge_src x) a, prod_rhs = [teA (cons_l2   (edge_trg x) xa)]\<rparr>"
      in disjE)
   apply(rename_tac a aa xa xaa)(*strict*)
   apply(clarsimp)
  apply(rename_tac a aa xa xaa)(*strict*)
  apply(clarsimp)
  done

lemma unique_edge_exists_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1: "
  F2LR1inputx G G'
  \<Longrightarrow> p \<in> cfg_productions G
  \<Longrightarrow> prod_rhs p \<noteq> []
  \<Longrightarrow> \<exists>!x. x \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p"
  apply(rule ex_ex1I)
   apply(rule THE_unique_edge_is_in_delta_prime_1)
     apply(force)
    apply(force)
   apply(force)
  apply(rename_tac x y)(*strict*)
  apply(rule THE_unique_edge_is_in_delta_prime_2)
      apply(rename_tac x y)(*strict*)
      apply(force)
     apply(rename_tac x y)(*strict*)
     apply(force)
    apply(rename_tac x y)(*strict*)
    apply(force)
   apply(rename_tac x y)(*strict*)
   apply(force)
  apply(rename_tac x y)(*strict*)
  apply(force)
  done

lemma from_same_edge_implies_same_src: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> p1 \<in> cfg_productions G
  \<Longrightarrow> p2 \<in> cfg_productions G
  \<Longrightarrow> prod_rhs p1\<noteq>[]
  \<Longrightarrow> prod_rhs p2\<noteq>[]
  \<Longrightarrow> prod_to_edge G' p1 = prod_to_edge G' p2
  \<Longrightarrow> getSrc (prod_lhs p1) = getSrc (prod_lhs p2)"
  apply(simp add: prod_to_edge_def)
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      ?p.0="p1"
      in unique_edge_exists_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1)
     apply(force)
    apply(force)
   apply(force)
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      ?p.0="p2"
      in unique_edge_exists_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1)
     apply(force)
    apply(force)
   apply(force)
  apply(clarsimp)
  apply(rename_tac x xa)(*strict*)
  apply(subgoal_tac "x=xa")
   apply(rename_tac x xa)(*strict*)
   prefer 2
   apply(rule_tac
      t="x"
      and s="(THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1)"
      in ssubst)
    apply(rename_tac x xa)(*strict*)
    apply(rule_tac
      a="x"
      in theI2)
      apply(rename_tac x xa)(*strict*)
      apply(force)
     apply(rename_tac x xa xb)(*strict*)
     apply(force)
    apply(rename_tac x xa xb)(*strict*)
    apply(force)
   apply(rename_tac x xa)(*strict*)
   apply(rule_tac
      t="xa"
      and s="(THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2)"
      in ssubst)
    apply(rename_tac x xa)(*strict*)
    apply(rule_tac
      a="xa"
      in theI2)
      apply(rename_tac x xa)(*strict*)
      apply(force)
     apply(rename_tac x xa xb)(*strict*)
     apply(force)
    apply(rename_tac x xa xb)(*strict*)
    apply(force)
   apply(rename_tac x xa)(*strict*)
   apply(force)
  apply(rename_tac x xa)(*strict*)
  apply(clarsimp)
  apply(rename_tac xa)(*strict*)
  apply(thin_tac "(THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1) = (THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2)")
  apply(subgoal_tac "F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2 = {xa}")
   apply(rename_tac xa)(*strict*)
   prefer 2
   apply(rule order_antisym)
    apply(rename_tac xa)(*strict*)
    apply(force)
   apply(rename_tac xa)(*strict*)
   apply(force)
  apply(rename_tac xa)(*strict*)
  apply(subgoal_tac "F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 = {xa}")
   apply(rename_tac xa)(*strict*)
   prefer 2
   apply(rule order_antisym)
    apply(rename_tac xa)(*strict*)
    apply(force)
   apply(rename_tac xa)(*strict*)
   apply(force)
  apply(rename_tac xa)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2 = F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1")
   apply(rename_tac xa)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac xa)(*strict*)
  apply(thin_tac "F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 = {xa}")
  apply(thin_tac "F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2 = {xa}")
  apply(subgoal_tac "X" for X)
   apply(rename_tac xa)(*strict*)
   prefer 2
   apply(rule_tac
      ?e1.0="p1"
      and ?e2.0="p2"
      in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_equal_then_from_special_sets)
         apply(rename_tac xa)(*strict*)
         apply(simp add: F2LR1inputx_def)
         apply(force)
        apply(rename_tac xa)(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac xa)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac xa)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac xa)(*strict*)
     apply(force)
    apply(rename_tac xa)(*strict*)
    apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def cfg_sub_def)
    apply(force)
   apply(rename_tac xa)(*strict*)
   apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def cfg_sub_def)
   apply(force)
  apply(rename_tac xa)(*strict*)
  apply(erule disjE)+
   apply(rename_tac xa)(*strict*)
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
    apply(rename_tac x y)(*strict*)
    apply(erule disjE)+
      apply(rename_tac x y)(*strict*)
      apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def getSrc_def)
      apply(clarsimp)
     apply(rename_tac x y)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def getSrc_def)
     apply(clarsimp)
    apply(rename_tac x y)(*strict*)
    apply(erule disjE)+
     apply(rename_tac x y)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def getSrc_def)
     apply(clarsimp)
    apply(rename_tac x y)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def getSrc_def)
   apply(rename_tac x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac x)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def getSrc_def)
   apply(rename_tac x)(*strict*)
   apply(clarsimp)
   apply(erule disjE)+
     apply(rename_tac x)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def getSrc_def)
     apply(clarsimp)
    apply(rename_tac x)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def getSrc_def)
    apply(clarsimp)
    apply(rename_tac x qs qt)(*strict*)
    apply(erule disjE)+
     apply(rename_tac x qs qt)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def getSrc_def)
    apply(rename_tac x qs qt)(*strict*)
    apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac x)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def getSrc_def)
    apply(clarsimp)
    apply(rename_tac x qs qt)(*strict*)
    apply(erule disjE)+
     apply(rename_tac x qs qt)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def getSrc_def)
    apply(rename_tac x qs qt)(*strict*)
    apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def getSrc_def)
   apply(erule disjE)+
     apply(rename_tac x)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def getSrc_def)
    apply(rename_tac x)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def getSrc_def)
    apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac x)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def getSrc_def)
    apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(clarsimp)
  apply(rename_tac xa)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
  apply(clarsimp)
  done

definition getStack :: "('a,'b)DT_l2_l3_nonterminals \<Rightarrow> 'b" where
  "getStack X = (case X of cons_l2 q A \<Rightarrow> A | cons_l3 q1 A q2 \<Rightarrow> A)"

lemma no_repeating_leading_nonterminal_Extended: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf=[teA A1]\<rparr> \<pi> \<lparr>cfg_conf=[teA A2]@v\<rparr>
  \<Longrightarrow> left_degen G d
  \<Longrightarrow> cropTol3l2_single A1 = cropTol3l2_single A2
  \<Longrightarrow> \<pi>=[]"
  apply(case_tac "\<pi>=[]")
   apply(force)
  apply(clarsimp)
  apply(rule_tac
      P="\<lambda>n. \<exists>d' \<pi>' A' v'. cfgLM.trans_der G d' \<lparr>cfg_conf=[teA A2]\<rparr> \<pi>' \<lparr>cfg_conf=teA A'#v'\<rparr> \<and> cropTol3l2_single A2 = cropTol3l2_single A' \<and> length \<pi>' = n \<and> \<pi>' \<noteq> [] \<and> left_degen G d' "
      and Q="\<lambda>n. \<exists>d' \<pi>' \<alpha>. cfgLM.trans_der G d' \<lparr>cfg_conf=[teA A2]\<rparr> \<pi>' \<lparr>cfg_conf=liftB \<alpha>\<rparr> \<and> length \<pi>' = n"
      in always_extendable_satisfaction_in_conflict_with_finite_satisfaction)
     apply(rename_tac n)(*strict*)
     prefer 3
     apply(subgoal_tac "\<exists>dt \<alpha>t \<pi>t. cfgLM.trans_der G dt \<lparr>cfg_conf=[teA A2]\<rparr> \<pi>t \<lparr>cfg_conf=liftB \<alpha>t\<rparr>")
      prefer 2
      apply(rule cfgLM_trans_der_construct_elimininating_derivation_prime)
         apply(simp add: split_TSstructure_def)
        apply (metis split_TSstructure_def)
       apply(simp add: cfg_configurations_def)
       apply(subgoal_tac "\<lparr>cfg_conf = teA A2 # v\<rparr> \<in> cfg_configurations G")
        prefer 2
        apply(simp add: cfgLM.trans_der_def)
        apply(clarsimp)
        apply(rename_tac e)(*strict*)
        apply(rule cfgLM.belongs_configurations)
         apply(rename_tac e)(*strict*)
         apply(force)
        apply(rename_tac e)(*strict*)
        apply(force)
       apply(simp add: cfg_configurations_def)
      apply(clarsimp)
     apply(clarsimp)
     apply(rename_tac dt \<alpha>t \<pi>t)(*strict*)
     apply(rule_tac
      x="dt"
      in exI)
     apply(rule_tac
      x="\<pi>t"
      in exI)
     apply(rule_tac
      x="\<alpha>t"
      in exI)
     apply(force)
    apply(rename_tac n)(*strict*)
    prefer 3
    apply(subgoal_tac "X" for X)
     prefer 2
     apply(subgoal_tac "\<exists>e. d (length \<pi>) = Some (pair e \<lparr>cfg_conf = [teA A2] @ v\<rparr>)")
      prefer 2
      apply(unfold cfgLM.trans_der_def)
      apply(erule exE)+
      apply(rename_tac e)(*strict*)
      apply(fold cfgLM.trans_der_def)
      apply(force)
     apply(erule exE)+
     apply(rename_tac e)(*strict*)
     apply(rule_tac
      i="length \<pi>"
      in no_repeating_leading_nonterminal_Extended_hlp2)
           apply(rename_tac e)(*strict*)
           apply(force)
          apply(rename_tac e)(*strict*)
          apply(force)
         apply(rename_tac e)(*strict*)
         apply(force)
        apply(rename_tac e)(*strict*)
        apply(force)
       apply(rename_tac e)(*strict*)
       apply(force)
      apply(rename_tac e)(*strict*)
      apply(force)
     apply(rename_tac e)(*strict*)
     apply(force)
    apply(clarsimp)
    apply(rename_tac dB \<pi>B Bi vB)(*strict*)
    apply(rule_tac
      x="dB"
      in exI)
    apply(rule_tac
      x="\<pi>B"
      in exI)
    apply(rule_tac
      x="Bi"
      in exI)
    apply(clarsimp)
    apply(rule conjI)
     apply(rename_tac dB \<pi>B Bi vB)(*strict*)
     apply(rule_tac
      x="vB"
      in exI)
     apply(force)
    apply(rename_tac dB \<pi>B Bi vB)(*strict*)
    apply(force)
   apply(rename_tac n)(*strict*)
   apply(thin_tac "cfgLM.trans_der G d \<lparr>cfg_conf = [teA A1]\<rparr> \<pi> \<lparr>cfg_conf = teA A2 # v\<rparr>")
   apply(rename_tac n)(*strict*)
   apply(thin_tac "cropTol3l2_single A1 = cropTol3l2_single A2")
   apply(thin_tac "left_degen G d")
   apply(thin_tac "\<pi>\<noteq>[]")
   apply(clarsimp)
   apply(rename_tac d' \<pi>' A' v')(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac d' \<pi>' A' v')(*strict*)
    prefer 2
    apply(subgoal_tac "\<exists>e. d' (length \<pi>') = Some (pair e \<lparr>cfg_conf = [teA A'] @ v'\<rparr>)")
     apply(rename_tac d' \<pi>' A' v')(*strict*)
     prefer 2
     apply(unfold cfgLM.trans_der_def)
     apply(erule exE)+
     apply(rename_tac d' \<pi>' A' v' e)(*strict*)
     apply(fold cfgLM.trans_der_def)
     apply(force)
    apply(rename_tac d' \<pi>' A' v')(*strict*)
    apply(erule exE)+
    apply(rename_tac d' \<pi>' A' v' e)(*strict*)
    apply(rule_tac
      i="length \<pi>'"
      in no_repeating_leading_nonterminal_Extended_hlp2)
          apply(rename_tac d' \<pi>' A' v' e)(*strict*)
          apply(force)
         apply(rename_tac d' \<pi>' A' v' e)(*strict*)
         apply(force)
        apply(rename_tac d' \<pi>' A' v' e)(*strict*)
        apply(force)
       apply(rename_tac d' \<pi>' A' v' e)(*strict*)
       apply(force)
      apply(rename_tac d' \<pi>' A' v' e)(*strict*)
      apply(force)
     apply(rename_tac d' \<pi>' A' v' e)(*strict*)
     apply(force)
    apply(rename_tac d' \<pi>' A' v' e)(*strict*)
    apply(force)
   apply(rename_tac d' \<pi>' A' v')(*strict*)
   apply(clarsimp)
   apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB)(*strict*)
    prefer 2
    apply(rule_tac
      ?w1.0="[A2]"
      and ?v2.0="[A']"
      and G="G"
      and ?v4.0="v'"
      and ?d1.0="d'"
      and ?d2.0="dB"
      in cfgLM_trans_der_concat_extend_prime_with_left_degen)
        apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB)(*strict*)
        apply(simp add: split_TSstructure_def)
       apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB)(*strict*)
       prefer 3
       apply(clarsimp)
       apply(force)
      apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB)(*strict*)
      apply(clarsimp)
      apply(force)
     apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB)(*strict*)
     apply(force)
    apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB)(*strict*)
    apply(force)
   apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB)(*strict*)
   apply(clarsimp)
   apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB d)(*strict*)
   apply(rule_tac
      x="length (\<pi>'@\<pi>B)"
      in exI)
   apply(clarsimp)
   apply(rule conjI)
    apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB d)(*strict*)
    apply(force)
   apply(rename_tac d' \<pi>' A' v' dB \<pi>B Bi vB d)(*strict*)
   apply(rule_tac
      x="d"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="\<pi>'@\<pi>B"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="Bi"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="vB@v'"
      in exI)
   apply(force)
  apply(rename_tac k m)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d \<lparr>cfg_conf = [teA A1]\<rparr> \<pi> \<lparr>cfg_conf = teA A2 # v\<rparr>")
  apply(rename_tac k m)(*strict*)
  apply(thin_tac "cropTol3l2_single A1 = cropTol3l2_single A2")
  apply(thin_tac "left_degen G d")
  apply(thin_tac "\<pi>\<noteq>[]")
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>' \<pi>'a A' \<alpha> v')(*strict*)
  apply(subgoal_tac "\<pi>'=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac m d' d'a \<pi>' \<pi>'a A' \<alpha> v')(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac m d' d'a \<pi>' \<pi>'a A' \<alpha> v')(*strict*)
  apply(erule disjE)
   apply(rename_tac m d' d'a \<pi>' \<pi>'a A' \<alpha> v')(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v')(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' ea)(*strict*)
   apply(case_tac \<alpha>)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' ea)(*strict*)
    apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' ea a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>' \<pi>'a A' \<alpha> v')(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' w' a')(*strict*)
  apply(rename_tac \<pi>' p')
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p')(*strict*)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d' (length \<pi>') = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p')(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e ea)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc(length (\<pi>'))"
      in cfgLM.step_detail_before_some_position)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e ea)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e ea)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e ea)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p')(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1 c2)(*strict*)
  apply(subgoal_tac "c2=\<lparr>cfg_conf = liftB \<alpha>\<rparr>")
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1 c2)(*strict*)
   prefer 2
   apply(simp add: cfgLM.trans_der_def)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1 c2)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1)(*strict*)
  apply(subgoal_tac "e2=p'")
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1)(*strict*)
   prefer 2
   apply(rule_tac
      d="d'"
      in cfgLM.trans_der_getLabel_at_pos)
       apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1)(*strict*)
       apply(simp add: F2LR1inputx_def)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 e2 c1)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
  apply(subgoal_tac "cfgLM.trans_der G d' \<lparr>cfg_conf = [teA A2]\<rparr> \<pi>' c1")
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
   prefer 2
   apply(rule_tac
      n="length(\<pi>')"
      in cfgLM.trans_der_crop)
       apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
  apply(erule_tac
      x="d'"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA A2]\<rparr>"
      in allE)
  apply(erule_tac
      x="\<pi>'"
      in allE)
  apply(erule_tac
      x="c1"
      in allE)
  apply(erule impE)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
  apply(erule impE)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
   apply(clarsimp)
   apply(rule_tac
      x="[]"
      in exI)
   apply(rule_tac
      x="[A2]"
      in exI)
   apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1 w1 w2)(*strict*)
  apply(case_tac c1)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 c1 w1 w2 cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2)(*strict*)
  apply(subgoal_tac "w1=\<alpha> \<and> w2=[prod_lhs p'] \<and> prod_rhs p'=[]")
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2)(*strict*)
   prefer 2
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2 l r)(*strict*)
   apply(subgoal_tac "LR1ProdFormSimp G")
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2 l r)(*strict*)
    prefer 2
    apply(simp add: split_TSstructure_def)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2 l r)(*strict*)
   apply(simp add: LR1ProdFormSimp_def)
   apply(subgoal_tac "\<exists>l'. liftB l' = l")
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2 l r)(*strict*)
    prefer 2
    apply(rule_tac
      x="filterB l"
      in exI)
    apply (rule liftBDeConv2)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2 l r)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2 r l')(*strict*)
   apply(thin_tac "setA (liftB l') = {}")
   apply(subgoal_tac "w1=l'")
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2 r l')(*strict*)
    prefer 2
    apply (metis initial_liftB_strings_coincide)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2 r l')(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l')(*strict*)
   apply(erule_tac
      x="p'"
      in ballE)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l')(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l')(*strict*)
   apply(erule disjE)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l')(*strict*)
    apply(clarsimp)
    apply(case_tac w2)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l')(*strict*)
     apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l' a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 l' list)(*strict*)
    apply(case_tac list)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 l' list)(*strict*)
     prefer 2
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 l' list a lista)(*strict*)
     apply(clarsimp)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 l' a lista)(*strict*)
     apply (metis liftB_with_nonterminal_inside)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 l' list)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 l')(*strict*)
    apply(rule liftB_inj)
    apply(rule sym)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l')(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l' b A B)(*strict*)
   apply(erule disjE)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l' b A B)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 w2 r l' b A B)(*strict*)
    apply (rule_tac
      x="\<alpha>"
      and ?w1.0="liftB l' @ [teB b]"
      in liftB_with_nonterminal_inside)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l' b A B)(*strict*)
   apply(erule disjE)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l' b A B)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 w2 r l' A B)(*strict*)
    apply (rule_tac
      x="\<alpha>"
      and ?w1.0="liftB l'"
      in liftB_with_nonterminal_inside)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w2 r l' b A B)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 w2 r l' A B C)(*strict*)
   apply (rule_tac
      x="\<alpha>"
      and ?w1.0="liftB l'"
      in liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 w1 w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1)(*strict*)
  apply(case_tac p')
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' p' e1 prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 prod_lhs)(*strict*)
  apply(rename_tac X)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X)(*strict*)
  apply(subgoal_tac "\<exists>e c. d'a (length \<pi>') = Some (pair e c)")
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e ea eb)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac
      m="length (\<pi>'a)"
      in cfgLM.pre_some_position_is_some_position)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e ea eb)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e ea eb)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e ea eb)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e c)(*strict*)
  apply(case_tac c)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e c cfg_conf)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e cfg_conf)(*strict*)
  apply(rename_tac wx)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
  apply(subgoal_tac "cfgLM.trans_der G d'a \<lparr>cfg_conf = [teA A2]\<rparr> (take (length \<pi>') \<pi>'a) \<lparr>cfg_conf = wx\<rparr>")
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
   prefer 2
   apply(rule_tac
      n="length(\<pi>')"
      in cfgLM.trans_der_crop)
       apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
  apply(erule_tac
      x="d'a"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA A2]\<rparr>"
      in allE)
  apply(erule_tac
      x="take (length \<pi>') \<pi>'a"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = wx\<rparr>"
      in allE)
  apply(erule impE)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
  apply(erule impE)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
   apply(clarsimp)
   apply(rule_tac
      x="[]"
      in exI)
   apply(rule_tac
      x="[A2]"
      in exI)
   apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e wx)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w1 w2)(*strict*)
  apply(subgoal_tac "w1=[]")
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w1 w2)(*strict*)
   prefer 2
   apply(case_tac "w1")
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w1 w2)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w1 w2 a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list)(*strict*)
   apply(subgoal_tac "\<exists>w. cfg_get_history SSci @ w = cfg_get_history SScij" for SSci SScij)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list ea eb ec ed)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      d="d'a"
      and i="length \<pi>'"
      and j="length \<pi>'a - length \<pi>'"
      in cfgLM.derivation_monotonically_inc)
         apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list ea eb ec ed)(*strict*)
         apply(simp add: split_TSstructure_def)
         apply(force)
        apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list ea eb ec ed)(*strict*)
        apply(force)
       apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list ea eb ec ed)(*strict*)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list ea eb ec ed)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list ea eb ec ed)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list ea eb ec ed)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list)(*strict*)
   apply(simp add: cfg_get_history_def)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list w)(*strict*)
   apply(subgoal_tac "maxTermPrefix (teB a # liftB list @ liftA w2) = a#maxTermPrefix (liftB list @ liftA w2)")
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list w)(*strict*)
    prefer 2
    apply (metis maxTermPrefix_pull_out)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list w)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "maxTermPrefix (teA A' # v') = []")
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list w)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list w)(*strict*)
   apply (metis maxTermPrefix_vs_maximalPrefixB maximalPrefixB_front)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w1 w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2)(*strict*)
  apply(case_tac w2)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e)(*strict*)
   apply(subgoal_tac "\<exists>e1 e2 c1 c2. d'a (length \<pi>') = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e ea eb ec ed)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      m="length \<pi>'a"
      in cfgLM.step_detail_before_some_position)
      apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e ea eb ec ed)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e ea eb ec ed)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e ea eb ec ed)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e e2 c2)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e w2 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e a list)(*strict*)
  apply(rename_tac C v)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac
      ?x1.0="[]"
      and ?x2.0="\<alpha>"
      and ?v2.0="[]"
      and ?B2.0="C"
      and ?r2.0="v"
      and ?v1.0="\<alpha>"
      and ?B1.0="X"
      and ?r1.0="[]"
      and n="length \<pi>'"
      and ?d1.0="d'"
      and ?d2.0="d'a"
      and G="G'"
      and G'="G"
      in cfgLM_positions_remain_compatible_prime)
                  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
                  apply(simp add: F2LR1inputx_def)
                 apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
                 apply(simp add: F2LR1inputx_def)
                apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
                apply(simp add: F2LR1inputx_def)
               apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
             apply(force)
            apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
            apply(force)
           apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
           apply(force)
          apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
          apply(force)
         apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
         apply(force)
        apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
        apply(force)
       apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v ea eb ec ed)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' \<alpha> v' \<pi>' e1 X e C v)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 X e C v)(*strict*)
  apply(case_tac X)
   apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 X e C v q b)(*strict*)
   prefer 2
   apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 X e C v q1 b q2)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q1 b q2)(*strict*)
   apply(subgoal_tac "\<pi>'=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
    apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q1 b q2)(*strict*)
    prefer 2
    apply(rule case_list)
   apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q1 b q2)(*strict*)
   apply(erule disjE)
    apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q1 b q2)(*strict*)
    prefer 2
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q1 b q2 w' a')(*strict*)
    apply(rename_tac \<pi>' p')
    apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q1 b q2 \<pi>' p')(*strict*)
    apply(subgoal_tac "\<exists>e1 e2 c1 c2. d' (length \<pi>') = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
     apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q1 b q2 \<pi>' p')(*strict*)
     prefer 2
     apply(unfold cfgLM.trans_der_def)
     apply(erule exE)+
     apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q1 b q2 \<pi>' p' ea eb ec ed)(*strict*)
     apply(fold cfgLM.trans_der_def)
     apply(rule_tac
      m="Suc(length (\<pi>'))"
      in cfgLM.step_detail_before_some_position)
       apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q1 b q2 \<pi>' p' ea eb ec ed)(*strict*)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q1 b q2 \<pi>' p' ea eb ec ed)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q1 b q2 \<pi>' p' ea eb ec ed)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q1 b q2 \<pi>' p')(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 c1)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 c1 l r)(*strict*)
    apply(subgoal_tac "LR1ProdFormSimp G")
     apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 c1 l r)(*strict*)
     prefer 2
     apply(simp add: split_TSstructure_def)
    apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 c1 l r)(*strict*)
    apply(simp add: LR1ProdFormSimp_def)
    apply(case_tac c1)
    apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 c1 l r cfg_confa)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 l r)(*strict*)
    apply(case_tac l)
     apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 l r)(*strict*)
     prefer 2
     apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 l r a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 l r)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 r)(*strict*)
    apply(erule_tac
      x="e2"
      in ballE)
     apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 r)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 r)(*strict*)
    apply(subgoal_tac "\<exists>e1 e2 c1 c2. d'a (length \<pi>') = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
     apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 r)(*strict*)
     prefer 2
     apply(unfold cfgLM.trans_der_def)
     apply(erule exE)+
     apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 r ea eb ec ed)(*strict*)
     apply(fold cfgLM.trans_der_def)
     apply(rule_tac
      m="Suc(length (\<pi>'))"
      in cfgLM.step_detail_before_some_position)
       apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 r ea eb ec ed)(*strict*)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 r ea eb ec ed)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 r ea eb ec ed)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' e C v q1 b q2 \<pi>' p' e1a e2 r)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' C v q1 b q2 \<pi>' p' e1a e2 r e1 e2a c1)(*strict*)
    apply(erule_tac
      x="Suc (length \<pi>')"
      in allE)
    apply(simp add: get_label_def)
    apply(simp add: left_degen_def sat_refined_def)
    apply(erule_tac
      x=" (length \<pi>')"
      in allE)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' C v q1 b q2 \<pi>' p' e1a e2 r e1 e2a c1 w A wa)(*strict*)
    apply(case_tac c1)
    apply(rename_tac m d' d'a \<pi>'a A' v' C v q1 b q2 \<pi>' p' e1a e2 r e1 e2a c1 w A wa cfg_confa)(*strict*)
    apply(case_tac e2a)
    apply(rename_tac m d' d'a \<pi>'a A' v' C v q1 b q2 \<pi>' p' e1a e2 r e1 e2a c1 w A wa cfg_confa prod_lhsa prod_rhsa)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' C v q1 b q2 \<pi>' p' e1a e2 r e1 w A wa prod_lhsa)(*strict*)
    apply(rename_tac X2)
    apply(rename_tac m d' d'a \<pi>'a A' v' C v q1 b q2 \<pi>' p' e1a e2 r e1 w A wa X2)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' C v q1 b q2 \<pi>' p' e1a e2 r e1 w A wa X2 l ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac m d' d'a \<pi>'a A' v' C v q1 b q2 \<pi>' p' e1a e2 r e1 w A wa X2 l ra)(*strict*)
     prefer 2
     apply(rename_tac m d' d'a \<pi>'a A' v' C v q1 b q2 \<pi>' p' e1a e2 r e1 w A wa X2 l ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' C v q1 b q2 \<pi>' p' e1a e2 r e1 w A wa X2 l ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e2 r e1 A wa X2 ra)(*strict*)
    apply(erule disjE)
     apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e2 r e1 A wa X2 ra)(*strict*)
     prefer 2
     apply(clarsimp)
     apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e2 r e1 A wa X2 ra ba Aa B)(*strict*)
     apply(erule disjE)
      apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e2 r e1 A wa X2 ra ba Aa B)(*strict*)
      apply(clarsimp)
     apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e2 r e1 A wa X2 ra ba Aa B)(*strict*)
     apply(erule disjE)
      apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e2 r e1 A wa X2 ra ba Aa B)(*strict*)
      apply(clarsimp)
      apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra Aa)(*strict*)
      apply(subgoal_tac "LR1ProdForm G")
       apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra Aa)(*strict*)
       apply(simp add: LR1ProdForm_def)
       apply(erule_tac
      x="\<lparr>prod_lhs = Aa, prod_rhs = [teA (cons_l3   q1 b q2)]\<rparr>"
      in ballE)
        apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra Aa)(*strict*)
        prefer 2
        apply(force)
       apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra Aa)(*strict*)
       apply(clarsimp)
      apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra Aa)(*strict*)
      apply(rule sub_of_F_SDPDA_TO_CFG_STD__implies_LR1ProdForm)
      apply(simp add: F2LR1inputx_def)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e2 r e1 A wa X2 ra ba Aa B)(*strict*)
     apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e2 r e1 A wa X2 ra)(*strict*)
    apply(case_tac e2)
    apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e2 r e1 A wa X2 ra prod_lhsa prod_rhsa)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra prod_lhs)(*strict*)
    apply(rename_tac X3)
    apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra X3)(*strict*)
    apply(rule_tac
      ?B1.0="X3"
      and ?B2.0="X2"
      in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_contra)
           apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra X3)(*strict*)
           apply(simp add: F2LR1inputx_def)
           apply(force)
          apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra X3)(*strict*)
          apply(simp add: F2LR1inputx_def)
          apply(force)
         apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra X3)(*strict*)
         apply(simp add: F2LR1inputx_def)
        apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra X3)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra X3)(*strict*)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra X3)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra X3)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 \<pi>' p' e1a e1 A wa X2 ra X3)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q1 b q2)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q1 b q2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 ea)(*strict*)
   apply(case_tac v)
    apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 ea)(*strict*)
    prefer 2
    apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 ea a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' v q1 b q2 ea)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(thin_tac "equal_stack (cons_l3 q1 b q2) (cons_l3 q1 b q2)")
   apply(thin_tac "equal_front_state (cons_l3 q1 b q2) (cons_l3 q1 b q2)")
   apply(thin_tac "get_labels d'a 0 = []")
   apply(thin_tac "get_labels d' 0 = []")
   apply(subgoal_tac "\<exists>e1 e2 c1 c2. d'a 0 = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea)(*strict*)
    prefer 2
    apply(rule_tac
      m="length(\<pi>'a)"
      in cfgLM.step_detail_before_some_position)
      apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2)(*strict*)
   apply(subgoal_tac "\<exists>e1 e2 c1 c2. d'a (Suc 0) = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2)(*strict*)
    prefer 2
    apply(rule_tac
      m="length(\<pi>'a)"
      in cfgLM.step_detail_before_some_position)
      apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2 e2a c2a)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2 e2a c2a l r la ra)(*strict*)
   apply(case_tac l)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2 e2a c2a l r la ra)(*strict*)
    prefer 2
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2 e2a c2a l r la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2 e2a c2a l r la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2 e2a c2a la ra)(*strict*)
   apply(case_tac c2)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 c2 e2a c2a la ra cfg_confa)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 e2a c2a la ra)(*strict*)
   apply(case_tac e2)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2 e2a c2a la ra prod_lhsa prod_rhsa)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2a c2a la ra)(*strict*)
   apply(case_tac e2a)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea e2a c2a la ra prod_lhsa prod_rhsa)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea c2a la ra prod_lhs prod_rhs)(*strict*)
   apply(case_tac c2a)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea c2a la ra prod_lhs prod_rhs cfg_confa)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea la ra prod_lhs prod_rhs)(*strict*)
   apply(rename_tac X3 w)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea la ra X3 w)(*strict*)
   apply(simp add: left_degen_def sat_refined_def)
   apply(erule_tac x="0" in allE')
   apply(erule_tac
      x="Suc 0"
      in allE)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea la ra A wa Aa wc)(*strict*)
   apply(case_tac la)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea la ra A wa Aa wc)(*strict*)
    prefer 2
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea la ra A wa Aa wc a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea la ra A wa Aa wc)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
   apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
    prefer 2
    apply(simp add: split_TSstructure_def CFGtermLeft_def)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
   apply(erule_tac
      x="d'a"
      in allE)
   apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cons_l3   q1 b q2)]\<rparr>"
      in allE)
   apply(erule_tac
      x="[\<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = teA A # wa\<rparr>]"
      in allE)
   apply(erule_tac
      x="\<lparr>cfg_conf = teA A # wa\<rparr>"
      in allE)
   apply(erule impE)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
    apply(rule_tac
      \<pi>="\<pi>'a"
      and ?c1.0="\<lparr>cfg_conf = teA A' # v'\<rparr>"
      and n="Suc 0"
      in cfgLM.trans_der_crop)
        apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
        apply(simp add: split_TSstructure_def)
       apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
       apply(simp add: cfgLM.trans_der_def)
      apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
    apply(case_tac \<pi>'a)
     apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
     apply(clarsimp)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac m d' d'a A' v' q1 b q2 ea A wa Aa wc a list)(*strict*)
    apply(rule_tac
      \<pi>="a#list"
      and c="\<lparr>cfg_conf = [teA (cons_l3   q1 b q2)]\<rparr>"
      and c'="\<lparr>cfg_conf = teA A' # v'\<rparr>"
      and d="d'a"
      in cfgLM.trans_der_getLabel_at_pos)
        apply(rename_tac m d' d'a A' v' q1 b q2 ea A wa Aa wc a list)(*strict*)
        apply(simp add: split_TSstructure_def)
        apply(force)
       apply(rename_tac m d' d'a A' v' q1 b q2 ea A wa Aa wc a list)(*strict*)
       apply(simp add: cfgLM.trans_der_def)
      apply(rename_tac m d' d'a A' v' q1 b q2 ea A wa Aa wc a list)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a A' v' q1 b q2 ea A wa Aa wc a list)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a A' v' q1 b q2 ea A wa Aa wc a list)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
   apply(erule impE)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
    apply(clarsimp)
    apply(rule_tac
      x="[]"
      in exI)
    apply(rule_tac
      x="[cons_l3 q1 b q2]"
      in exI)
    apply(simp (no_asm))
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc w1 w2)(*strict*)
   apply(case_tac w1)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc w1 w2)(*strict*)
    prefer 2
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc w1 w2 a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc w1 w2)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc w2)(*strict*)
   apply(case_tac w2)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc w2)(*strict*)
    apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea A wa Aa wc w2 a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a list)(*strict*)
   apply(rename_tac wx)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
    prefer 2
    apply(rule_tac
      ?v2.0="[]"
      and ?w2.0="a#wx"
      and ?v1.0="[]"
      and ?w1.0="[]"
      and ?d1.0="d'"
      and ?d2.0="d'a"
      and n="Suc 0"
      and G="G'"
      and G'="G"
      in cfgLM_positions_remain_compatible_prime_prime)
                  apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
                  apply(simp add: F2LR1inputx_def)
               apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
             apply(simp add: F2LR1inputx_def)
            apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
            apply(simp add: F2LR1inputx_def)
           apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
           apply(simp add: split_TSstructure_def)
          apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
          apply(force)
         apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
         apply(force)
        apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
        apply(force)
       apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
  apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
  apply(clarsimp)
  apply(erule_tac
    x="Suc 0"
    in allE)
  apply(clarsimp)
  apply(simp add: get_label_def)
  apply(rule_tac
    ?B1.0="cons_l3 q1 b q2"
    and ?B2.0="cons_l3 q1 b q2"
    in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_contra)
        apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
       apply(simp add: F2LR1inputx_def)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
  apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' q1 b q2 ea Aa wc a wx)(*strict*)
  apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 X e C v q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b)(*strict*)
  apply(case_tac A2)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b qa ba)(*strict*)
  prefer 2
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "cfgLM.trans_der G d' \<lparr>cfg_conf = [teA (cons_l3   q1 ba q2)]\<rparr> \<pi>' \<lparr>cfg_conf = [teA (cons_l2   q b)]\<rparr>")
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
  prefer 2
  apply(rule_tac
    n="length(\<pi>')"
    in cfgLM.trans_der_crop)
      apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
  apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
  prefer 2
  apply(rule_tac
    c'="\<lparr>cfg_conf = [teA (cons_l2   q b)]\<rparr>"
    and d="d'"
    in only_l3_nonterminals_reachable)
       apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
       apply(simp add: F2LR1inputx_def)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
      apply(simp add: F2LR1inputx_def)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
    apply(simp add: F2LR1inputx_def)
   apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
   apply(simp add: split_TSstructure_def)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
  apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b q1 ba q2)(*strict*)
  apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b qa ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b qa ba)(*strict*)
  apply(subgoal_tac "q \<in> epda_marking G'")
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b qa ba)(*strict*)
  prefer 2
  apply(rule_tac
    b="b"
    in prods_to_final_state)
   apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b qa ba)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b qa ba)(*strict*)
  apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b qa ba)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b qa ba)(*strict*)
  apply(case_tac "\<pi>'")
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b qa ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(subgoal_tac "cons_l2 qa ba = cons_l2 q b")
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba)(*strict*)
  prefer 2
  apply(simp add: cfgLM.trans_der_def)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b)(*strict*)
  apply(rule duplicate_markingH_use_in_CFG)
       apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b)(*strict*)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b)(*strict*)
   apply(simp add: cropTol3l2_single_def)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b)(*strict*)
  apply(simp add: cropTol3l2_single_def)
  apply(case_tac A')
   apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d' d'a \<pi>'a v' e1 e C v qa ba)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b q1 ba q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b)(*strict*)
  apply(force)
  (*
d'
(qa,ba)
  \<Longrightarrow>p#\<pi>' (q,b)
  \<Longrightarrow>((q,b)\<rightarrow>\<lambda>) []
d'a
(qa,ba)
  \<Longrightarrow>take(Suc(length \<pi>'))\<pi>'a C#v = (q,b,?) # v
  \<Longrightarrow>drop(Suc(length \<pi>'))\<pi>'a A'#v' = (qa,ba,?) # v'
then:
dB:
(qa,ba,?)
  \<Longrightarrow>take(Suc(length \<pi>'))\<pi>B X1#v1 = (q,b,?) # v1
  \<Longrightarrow>drop(Suc(length \<pi>'))\<pi>B Bi#vB = (qa,ba,?) # vB
then:
(q,b,?) # v
  \<Longrightarrow>drop(Suc(length \<pi>'))\<pi>'a@take(Suc(length \<pi>'))\<pi>B (q,b,?) # v1 # v
then
(q,b,?)
  \<Longrightarrow>drop(Suc(length \<pi>'))\<pi>'a@take(Suc(length \<pi>'))\<pi>B (q,b,?) # v1
*)
  apply(rename_tac m d' d'a \<pi>'a A' v' \<pi>' e1 e C v q b qa ba a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba a list)(*strict*)
  apply(rename_tac p \<pi>')
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>')(*strict*)
  apply(thin_tac "cfgLM.trans_der G d' \<lparr>cfg_conf = [teA (cons_l2   qa ba)]\<rparr> (p # \<pi>' @ [\<lparr>prod_lhs = cons_l2 q b, prod_rhs = []\<rparr>]) \<lparr>cfg_conf = []\<rparr>")
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>')(*strict*)
  apply(thin_tac "d' (Suc (length \<pi>')) = Some (pair e1 \<lparr>cfg_conf = [teA (cons_l2   q b)]\<rparr>)")
  apply(thin_tac "d' (Suc (Suc (length \<pi>'))) = Some (pair (Some \<lparr>prod_lhs = cons_l2 q b, prod_rhs = []\<rparr>) \<lparr>cfg_conf = []\<rparr>)")
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>')(*strict*)
  apply(thin_tac "cfgLM_step_relation G \<lparr>cfg_conf = [teA (cons_l2   q b)]\<rparr> \<lparr>prod_lhs = cons_l2 q b, prod_rhs = []\<rparr> \<lparr>cfg_conf = []\<rparr>")
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>')(*strict*)
  apply(thin_tac "cfgLM.trans_der G d' \<lparr>cfg_conf = [teA (cons_l2   qa ba)]\<rparr> (p # \<pi>') \<lparr>cfg_conf = [teA (cons_l2   q b)]\<rparr>")
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>')(*strict*)
  apply(thin_tac "\<forall>k. Suc 0 \<le> k \<and> k \<le> Suc (length \<pi>') \<longrightarrow> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' (the (get_label (d' k))) = F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' (the (get_label (d'a k)))")
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>')(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>')(*strict*)
  prefer 2
  apply(subgoal_tac "\<exists>e. d'a (length \<pi>'a) = Some (pair e \<lparr>cfg_conf = teA A' # v'\<rparr>)")
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>')(*strict*)
  prefer 2
  apply(unfold cfgLM.trans_der_def)
  apply(erule exE)+
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>' ea eb)(*strict*)
  apply(fold cfgLM.trans_der_def)
  apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>')(*strict*)
  apply(erule exE)+
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>' ea)(*strict*)
  apply(rule_tac
    dA="d'a"
    and i="length \<pi>'a"
    in no_repeating_leading_nonterminal_Extended_hlp2)
       apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>' ea)(*strict*)
       apply(force)
      apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>' ea)(*strict*)
      apply(force)
     apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>' ea)(*strict*)
     apply(force)
    apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>' ea)(*strict*)
    apply(force)
   apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>' ea)(*strict*)
   apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>' ea)(*strict*)
  apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>' ea)(*strict*)
  apply(force)
  apply(rename_tac m d' d'a \<pi>'a A' v' e1 e C v q b qa ba p \<pi>')(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB)(*strict*)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d'a(Suc(length \<pi>')) = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB)(*strict*)
  prefer 2
  apply(unfold cfgLM.trans_der_def)
  apply(erule exE)+
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB ea eb ec)(*strict*)
  apply(fold cfgLM.trans_der_def)
  apply(rule_tac
    m="(length (\<pi>'a))"
    in cfgLM.step_detail_before_some_position)
   apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB ea eb ec)(*strict*)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB ea eb ec)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB ea eb ec)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e2 c2)(*strict*)
  apply(subgoal_tac "e2=\<pi>'a!Suc(length \<pi>')")
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e2 c2)(*strict*)
  prefer 2
  apply(rule_tac
    d="d'a"
    in cfgLM.trans_der_getLabel_at_pos)
     apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e2 c2)(*strict*)
     apply(simp add: split_TSstructure_def)
     apply(force)
    apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e2 c2)(*strict*)
    apply(force)
   apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e2 c2)(*strict*)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e2 c2)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e2 c2)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e2 c2)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2)(*strict*)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. dB(Suc(length \<pi>')) = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2)(*strict*)
  prefer 2
  apply(unfold cfgLM.trans_der_def)
  apply(erule exE)+
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 ea eb ec)(*strict*)
  apply(fold cfgLM.trans_der_def)
  apply(rule_tac
    m="(length (\<pi>B))"
    in cfgLM.step_detail_before_some_position)
   apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 ea eb ec)(*strict*)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 ea eb ec)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 ea eb ec)(*strict*)
  apply(rule_tac
    t="length \<pi>B"
    and s="length \<pi>'a"
    in subst)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 ea eb ec)(*strict*)
  apply (metis map_eq_imp_length_eq)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 ea eb ec)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 e2 c1 c2a)(*strict*)
  apply(subgoal_tac "e2=\<pi>B!Suc(length \<pi>')")
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 e2 c1 c2a)(*strict*)
  prefer 2
  apply(rule_tac
    d="dB"
    in cfgLM.trans_der_getLabel_at_pos)
     apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 e2 c1 c2a)(*strict*)
     apply(simp add: split_TSstructure_def)
     apply(force)
    apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 e2 c1 c2a)(*strict*)
    apply(force)
   apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 e2 c1 c2a)(*strict*)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 e2 c1 c2a)(*strict*)
  apply(rule_tac
    t="length \<pi>B"
    and s="length \<pi>'a"
    in subst)
   apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 e2 c1 c2a)(*strict*)
   apply (metis map_eq_imp_length_eq)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 e2 c1 c2a)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 e2 c1 c2a)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 e2 c1 c2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
  apply(subgoal_tac "C=prod_lhs (\<pi>'a ! Suc (length \<pi>'))")
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
  prefer 2
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a l r la ra)(*strict*)
  apply(case_tac c1)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a l r la ra cfg_confa)(*strict*)
  apply(case_tac c2)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a l r la ra cfg_confa cfg_confaa)(*strict*)
  apply(case_tac c2a)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a l r la ra cfg_confa cfg_confaa cfg_confb)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e1 l r la ra)(*strict*)
  apply(case_tac l)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e1 l r la ra)(*strict*)
  prefer 2
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e1 l r la ra a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB e1 l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e C v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
  prefer 2
  apply(rule_tac
    d="dB"
    and n="0"
    and m="Suc (length \<pi>')"
    in left_degen_preserves_leading_nonterminal_prime)
      apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
     apply(simp add: cfgLM.trans_der_def)
    apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
    apply(simp add: cfgLM.trans_der_def)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c1 c2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a A w)(*strict*)
  apply(rename_tac X1 v1)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a X1 v1)(*strict*)
  apply(subgoal_tac "X1 = prod_lhs (\<pi>B ! Suc (length \<pi>'))")
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a X1 v1)(*strict*)
  prefer 2
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a X1 v1 l r la ra)(*strict*)
  apply(case_tac la)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a X1 v1 l r la ra)(*strict*)
  prefer 2
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a X1 v1 l r la ra a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a X1 v1 l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a X1 v1)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(subgoal_tac "equal_front_state (cons_l2 q b) (cropTol3l2_single (prod_lhs(\<pi>B ! Suc (length \<pi>'))))")
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  prefer 2
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(subgoal_tac "(prod_to_edge G') (\<pi>'a!Suc(length \<pi>')) = (prod_to_edge G') (\<pi>B!Suc(length \<pi>'))")
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  prefer 2
  apply(rule_tac
    t="(prod_to_edge G') (\<pi>'a!Suc(length \<pi>'))"
    and s=" (map (prod_to_edge G') \<pi>'a)!Suc(length \<pi>') "
    in subst)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
   apply(rule nth_map)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(rule_tac
    t="(prod_to_edge G') (\<pi>B!Suc(length \<pi>'))"
    and s=" (map (prod_to_edge G') \<pi>B)!Suc(length \<pi>') "
    in subst)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
   apply(rule nth_map)
   apply(rule_tac
    t="length \<pi>B"
    and s="length \<pi>'a"
    in subst)
    apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
    apply (metis map_eq_imp_length_eq)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(subgoal_tac "q = getSrc (prod_lhs (\<pi>B ! Suc (length \<pi>')))")
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(case_tac "prod_lhs (\<pi>B ! Suc (length \<pi>'))")
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1 qb bb)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d'a \<pi>'a A' v' e v b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1 qb bb)(*strict*)
   apply(simp add: getSrc_def cropTol3l2_single_def equal_front_state_def)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1 q1 bb q2)(*strict*)
  apply(simp add: getSrc_def cropTol3l2_single_def equal_front_state_def)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(rule_tac
    t="q"
    and s="getSrc (prod_lhs (\<pi>'a ! Suc (length \<pi>')))"
    in ssubst)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(case_tac "prod_lhs (\<pi>'a ! Suc (length \<pi>'))")
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1 qb bb)(*strict*)
   apply(clarsimp)
   apply(simp add: getSrc_def cropTol3l2_single_def equal_front_state_def)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1 q1 bb q2)(*strict*)
  apply(simp add: getSrc_def cropTol3l2_single_def equal_front_state_def)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(rule from_same_edge_implies_same_src)
       apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
       apply(force)
      apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
      apply(force)
     apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
     apply(simp add: cfgLM_step_relation_def)
    apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
   apply(simp add: left_degen_def sat_refined_def)
   apply(clarsimp)
   apply(erule_tac
    x="Suc(length \<pi>')"
    and P="\<lambda>x. case d'a (Suc x) of None \<Rightarrow> True | Some (pair e' c') \<Rightarrow> case d'a x of None \<Rightarrow> False | Some (pair e c) \<Rightarrow> case e' of None \<Rightarrow> False | Some e' \<Rightarrow> (\<exists>w. cfg_conf c = teA (prod_lhs e') # w) \<and> (\<exists>A w. prod_rhs e' = teA A # w)"
    in allE)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
   apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(simp add: left_degen_def sat_refined_def)
  apply(clarsimp)
  apply(erule_tac
    x="Suc(length \<pi>')"
    and P="\<lambda>X. case dB (Suc X) of None \<Rightarrow> True | Some (pair e' c') \<Rightarrow> case dB X of None \<Rightarrow> False | Some (pair e c) \<Rightarrow> case e' of None \<Rightarrow> False | Some e' \<Rightarrow> (\<exists>w. cfg_conf c = teA (prod_lhs e') # w) \<and> (\<exists>A w. prod_rhs e' = teA A # w)"
    in allE)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  prefer 2
  apply(rule_tac
    n="Suc(length \<pi>')"
    and d="d'a"
    in cfgLM.trans_der_skip)
    apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
    apply(simp add: split_TSstructure_def)
    apply(force)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(subgoal_tac "left_degen G (derivation_drop d'a (Suc (length \<pi>')))")
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  prefer 2
  apply(rule derivation_drop_preserves_left_degen)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(simp add: split_TSstructure_def)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(subgoal_tac "cfgLM.trans_der G dB \<lparr>cfg_conf = [teA A']\<rparr> (take(Suc(length \<pi>'))\<pi>B) \<lparr>cfg_conf = teA (prod_lhs (\<pi>B ! Suc (length \<pi>'))) # v1\<rparr>")
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  prefer 2
  apply(rule_tac
    n="Suc(length \<pi>')"
    in cfgLM.trans_der_crop)
     apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
    apply(force)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
   apply(rule_tac
    t="length \<pi>B"
    and s="length \<pi>'a"
    in subst)
    apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
    apply (metis map_eq_imp_length_eq)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(thin_tac "cfgLM.trans_der G dB \<lparr>cfg_conf = [teA A']\<rparr> \<pi>B \<lparr>cfg_conf = teA Bi # vB\<rparr>")
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  prefer 2
  apply(rule_tac
    ?w1.0="prod_lhs (\<pi>'a ! Suc (length \<pi>'))#v"
    and ?v2.0="[A']"
    and G="G"
    and ?v4.0="v'"
    and ?d1.0="derivation_drop d'a (Suc (length \<pi>'))"
    and ?d2.0="dB"
    in cfgLM_trans_der_concat_extend_prime_with_left_degen)
     apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
    prefer 3
    apply(clarsimp)
    apply(force)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
   apply(clarsimp)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi vB c2 e1 c2a v1)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d)(*strict*)
  prefer 2
  apply(rule_tac
    d="d"
    in left_degen_context_persists)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d)(*strict*)
   apply(simp add: split_TSstructure_def)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d)(*strict*)
  apply(simp add: suffix_def)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c)(*strict*)
  prefer 2
  apply(rule_tac
    d="d"
    in left_degen_drop_context)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c)(*strict*)
   apply(simp add: split_TSstructure_def)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c)(*strict*)
  apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da)(*strict*)
  apply(rule_tac
    ?s2.0="getStack (prod_lhs (\<pi>'a ! Suc (length \<pi>')))"
    and ?s1.0="getStack (prod_lhs (\<pi>B ! Suc (length \<pi>')))"
    and d="da"
    and q="q"
    in duplicate_markingH_use_in_CFG)
      apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da)(*strict*)
      apply(force)
     apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da)(*strict*)
     apply(force)
    apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da)(*strict*)
    apply(force)
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da)(*strict*)
   apply(force)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da)(*strict*)
  apply(simp add: getStack_def cropTol3l2_single_def equal_front_state_def)
  apply(case_tac "prod_lhs (\<pi>'a ! Suc (length \<pi>'))")
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da qb bb)(*strict*)
   apply(clarsimp)
   apply(rename_tac m d'a \<pi>'a A' v' e v b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da bb)(*strict*)
   apply(case_tac "prod_lhs (\<pi>B ! Suc (length \<pi>'))")
    apply(rename_tac m d'a \<pi>'a A' v' e v b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da bb q bc)(*strict*)
    apply(clarsimp)
   apply(rename_tac m d'a \<pi>'a A' v' e v b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da bb q1 bc q2)(*strict*)
   apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da q1 bb q2)(*strict*)
  apply(case_tac "prod_lhs (\<pi>B ! Suc (length \<pi>'))")
   apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da q1 bb q2 qb bc)(*strict*)
   apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da q1 bb q2 q1a bc q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da)(*strict*)
  apply(simp add: getStack_def cropTol3l2_single_def equal_front_state_def)
  apply(case_tac "prod_lhs (\<pi>'a ! Suc (length \<pi>'))")
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da qb bb)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da q1 bb q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac m d'a \<pi>'a A' v' e v q b qa ba \<pi>' dB \<pi>B Bi c2 e1 c2a v1 d c da)(*strict*)
  apply(force)
  done

theorem always_no_repetition_in_left_degen_derivations: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d c1 \<pi> c2
  \<Longrightarrow> c1=\<lparr>cfg_conf=teA A#w\<rparr>
  \<Longrightarrow> left_degen G d
  \<Longrightarrow> norepHD d \<pi>"
  apply(subgoal_tac "\<exists>A w. c2=\<lparr>cfg_conf=teA A#w\<rparr>")
   prefer 2
   apply(rule left_degen_preserves_leading_nonterminal)
      apply(force)
     apply(force)
    apply(force)
   apply(force)
  apply(clarsimp)
  apply(rename_tac Aa wa)(*strict*)
  apply(simp add: norepHD_def norep_def)
  apply(clarsimp)
  apply(rename_tac Aa wa i j)(*strict*)
  apply(simp add: cfgLM.trans_der_def)
  apply(clarsimp)
  apply(rename_tac Aa wa i j e)(*strict*)
  apply(subgoal_tac "\<exists>e c. d i = Some (pair e c)")
   apply(rename_tac Aa wa i j e)(*strict*)
   prefer 2
   apply(rule_tac
      m="(length \<pi>)"
      in cfgLM.pre_some_position_is_some_position)
     apply(rename_tac Aa wa i j e)(*strict*)
     apply(force)
    apply(rename_tac Aa wa i j e)(*strict*)
    apply(force)
   apply(rename_tac Aa wa i j e)(*strict*)
   apply(force)
  apply(rename_tac Aa wa i j e)(*strict*)
  apply(erule exE)+
  apply(rename_tac Aa wa i j e ea c)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>e c. d j = Some (pair e c)")
   apply(rename_tac Aa wa i j e ea c)(*strict*)
   prefer 2
   apply(rule_tac
      m="(length \<pi>)"
      in cfgLM.pre_some_position_is_some_position)
     apply(rename_tac Aa wa i j e ea c)(*strict*)
     apply(force)
    apply(rename_tac Aa wa i j e ea c)(*strict*)
    apply(force)
   apply(rename_tac Aa wa i j e ea c)(*strict*)
   apply(force)
  apply(rename_tac Aa wa i j e ea c)(*strict*)
  apply(erule exE)+
  apply(rename_tac Aa wa i j e ea c eb ca)(*strict*)
  apply(clarsimp)
  apply(simp add: get_configuration_def)
  apply(case_tac c)
  apply(rename_tac Aa wa i j e ea c eb ca cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac Aa wa i j e ea eb ca cfg_confa)(*strict*)
  apply(case_tac ca)
  apply(rename_tac Aa wa i j e ea eb ca cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac Aa wa i j e ea eb cfg_conf cfg_confa)(*strict*)
  apply(rename_tac w1 w2)
  apply(rename_tac Aa wa i j e ea eb w1 w2)(*strict*)
  apply(case_tac w1)
   apply(rename_tac Aa wa i j e ea eb w1 w2)(*strict*)
   apply(clarsimp)
   apply(rename_tac Aa wa i j e ea eb w2)(*strict*)
   apply(subgoal_tac "\<exists>e1 e2 c1 c2. d i = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
    apply(rename_tac Aa wa i j e ea eb w2)(*strict*)
    prefer 2
    apply(rule_tac
      m="length \<pi>"
      in cfgLM.step_detail_before_some_position)
      apply(rename_tac Aa wa i j e ea eb w2)(*strict*)
      apply(force)
     apply(rename_tac Aa wa i j e ea eb w2)(*strict*)
     apply(force)
    apply(rename_tac Aa wa i j e ea eb w2)(*strict*)
    apply(force)
   apply(rename_tac Aa wa i j e ea eb w2)(*strict*)
   apply(clarsimp)
   apply(rename_tac Aa wa i j e ea eb w2 e2 c2)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
  apply(rename_tac Aa wa i j e ea eb w1 w2 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac Aa wa i j e ea eb w2 a list)(*strict*)
  apply(rename_tac w3)
  apply(rename_tac Aa wa i j e ea eb w2 a w3)(*strict*)
  apply(case_tac w2)
   apply(rename_tac Aa wa i j e ea eb w2 a w3)(*strict*)
   apply(clarsimp)
   apply(rename_tac Aa wa i j e ea eb a w3)(*strict*)
   apply(case_tac "j=length \<pi>")
    apply(rename_tac Aa wa i j e ea eb a w3)(*strict*)
    apply(clarsimp)
   apply(rename_tac Aa wa i j e ea eb a w3)(*strict*)
   apply(subgoal_tac "\<exists>e1 e2 c1 c2. d j = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
    apply(rename_tac Aa wa i j e ea eb a w3)(*strict*)
    prefer 2
    apply(rule_tac
      m="length \<pi>"
      in cfgLM.step_detail_before_some_position)
      apply(rename_tac Aa wa i j e ea eb a w3)(*strict*)
      apply(force)
     apply(rename_tac Aa wa i j e ea eb a w3)(*strict*)
     apply(force)
    apply(rename_tac Aa wa i j e ea eb a w3)(*strict*)
    apply(force)
   apply(rename_tac Aa wa i j e ea eb a w3)(*strict*)
   apply(clarsimp)
   apply(rename_tac Aa wa i j e ea eb a w3 e2 c2)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
  apply(rename_tac Aa wa i j e ea eb w2 a w3 aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac Aa wa i j e ea eb a w3 aa list)(*strict*)
  apply(rename_tac B w4)
  apply(rename_tac Aa wa i j e ea eb a w3 B w4)(*strict*)
  apply(subgoal_tac "\<exists>A w. \<lparr>cfg_conf = a # w3\<rparr>=\<lparr>cfg_conf=teA A#w\<rparr>")
   apply(rename_tac Aa wa i j e ea eb a w3 B w4)(*strict*)
   prefer 2
   apply(rule_tac
      d="d"
      and ?c1.0="\<lparr>cfg_conf = teA A # w\<rparr>"
      in left_degen_preserves_leading_nonterminal_prime)
        apply(rename_tac Aa wa i j e ea eb a w3 B w4)(*strict*)
        apply(force)
       apply(rename_tac Aa wa i j e ea eb a w3 B w4)(*strict*)
       apply(force)
      apply(rename_tac Aa wa i j e ea eb a w3 B w4)(*strict*)
      apply(force)
     apply(rename_tac Aa wa i j e ea eb a w3 B w4)(*strict*)
     apply(force)
    apply(rename_tac Aa wa i j e ea eb a w3 B w4)(*strict*)
    apply(force)
   apply(rename_tac Aa wa i j e ea eb a w3 B w4)(*strict*)
   apply(force)
  apply(rename_tac Aa wa i j e ea eb a w3 B w4)(*strict*)
  apply(clarsimp)
  apply(rename_tac Aa wa i j e ea eb w3 B w4 Aaa)(*strict*)
  apply(subgoal_tac "\<exists>A w. \<lparr>cfg_conf = B # w4\<rparr>=\<lparr>cfg_conf=teA A#w\<rparr>")
   apply(rename_tac Aa wa i j e ea eb w3 B w4 Aaa)(*strict*)
   prefer 2
   apply(rule_tac
      d="d"
      and ?c1.0="\<lparr>cfg_conf = teA A # w\<rparr>"
      in left_degen_preserves_leading_nonterminal_prime)
        apply(rename_tac Aa wa i j e ea eb w3 B w4 Aaa)(*strict*)
        apply(force)
       apply(rename_tac Aa wa i j e ea eb w3 B w4 Aaa)(*strict*)
       apply(force)
      apply(rename_tac Aa wa i j e ea eb w3 B w4 Aaa)(*strict*)
      apply(force)
     apply(rename_tac Aa wa i j e ea eb w3 B w4 Aaa)(*strict*)
     apply(force)
    apply(rename_tac Aa wa i j e ea eb w3 B w4 Aaa)(*strict*)
    apply(force)
   apply(rename_tac Aa wa i j e ea eb w3 B w4 Aaa)(*strict*)
   apply(force)
  apply(rename_tac Aa wa i j e ea eb w3 B w4 Aaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
  apply(subgoal_tac "\<exists>BX w2. \<lparr>cfg_conf = teA Aaa # w3\<rparr>=\<lparr>cfg_conf = teA BX # w2\<rparr> \<and> suffix w2 w")
   apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
   prefer 2
   apply(rule_tac
      n="0"
      and m="i"
      in left_degen_context_persists_prime)
       apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
      apply(force)
     apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
     apply(force)
    apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
    apply(force)
   apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
   apply(force)
  apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
  apply(subgoal_tac "\<exists>BX w2. \<lparr>cfg_conf = teA Ab # w4\<rparr>=\<lparr>cfg_conf = teA BX # w2\<rparr> \<and> suffix w2 w3")
   apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
   prefer 2
   apply(rule_tac
      n="i"
      and m="j-i"
      in left_degen_context_persists_prime)
       apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
      apply(force)
     apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
     apply(force)
    apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
    apply(force)
   apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
   apply(force)
  apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
  apply(subgoal_tac "\<exists>BX w2. \<lparr>cfg_conf = teA Aa # wa\<rparr>=\<lparr>cfg_conf = teA BX # w2\<rparr> \<and> suffix w2 w4")
   apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
   prefer 2
   apply(rule_tac
      n="j"
      and m="length \<pi>-j"
      in left_degen_context_persists_prime)
       apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
      apply(force)
     apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
     apply(force)
    apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
    apply(force)
   apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
   apply(force)
  apply(rename_tac Aa wa i j e ea eb w3 w4 Aaa Ab)(*strict*)
  apply(clarsimp)
  apply(simp add: suffix_def)
  apply(clarsimp)
  apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
  apply(subgoal_tac "\<exists>d \<pi>. cfgLM.trans_der G d \<lparr>cfg_conf=[teA Aaa]\<rparr> \<pi> \<lparr>cfg_conf=[teA Ab]@ca\<rparr> \<and> length \<pi>=j-i \<and> left_degen G d")
   apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
   prefer 2
   apply(subgoal_tac "\<exists>d'. cfgLM.trans_der SSG d' SSci (take (SSj - SSi) (drop SSi SSrenPI)) SScj \<and> (left_degen SSG SSd \<longrightarrow> left_degen SSG d')" for SSci SSj SSi SSrenPI SScj SSd SSG)
    apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
    prefer 2
    apply(rule_tac
      \<pi>="\<pi>"
      and c="\<lparr>cfg_conf = teA A # w\<rparr>"
      and G="G"
      and d="d"
      and j="j"
      and i="i"
      in cfgLM_trans_der_slice_prime)
         apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
         apply(simp add: split_TSstructure_def)
        apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
        apply(simp add: cfgLM.trans_der_def)
       apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
       apply(force)
      apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
      apply(force)
     apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
     apply(force)
    apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
    apply(force)
   apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
   apply(clarsimp)
   apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb d')(*strict*)
   apply(subgoal_tac "\<exists>d. cfgLM.trans_der SSG d \<lparr>cfg_conf = [teA SSA]\<rparr> SSrenPI \<lparr>cfg_conf = teA SSB # SSw\<rparr> \<and> left_degen SSG d" for SSA SSrenPI SSB SSw SSG)
    apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb d')(*strict*)
    prefer 2
    apply(rule_tac
      d="d'"
      in left_degen_drop_context)
      apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb d')(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(force)
     apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb d')(*strict*)
     apply(force)
    apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb d')(*strict*)
    apply(force)
   apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb d')(*strict*)
   apply(clarsimp)
   apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb d' da)(*strict*)
   apply(rule_tac
      x="da"
      in exI)
   apply(rule_tac
      x="(take (j - i) (drop i \<pi>))"
      in exI)
   apply(force)
  apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb)(*strict*)
  apply(clarsimp)
  apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb da \<pi>')(*strict*)
  apply(subgoal_tac "\<pi>'=[]")
   apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb da \<pi>')(*strict*)
   apply(force)
  apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb da \<pi>')(*strict*)
  apply(rule no_repeating_leading_nonterminal_Extended)
      apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb da \<pi>')(*strict*)
      apply(force)
     apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb da \<pi>')(*strict*)
     apply(force)
    apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb da \<pi>')(*strict*)
    apply(force)
   apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb da \<pi>')(*strict*)
   apply(force)
  apply(rename_tac Aa i j e ea eb Aaa Ab c ca cb da \<pi>')(*strict*)
  apply(force)
  done

lemma left_degen_repetitions_in_parallel_derivation: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=teA B#v\<rparr> \<pi>1 \<lparr>cfg_conf=teA A#w1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=teA B#v\<rparr> \<pi>2 \<lparr>cfg_conf=teA A#w2\<rparr>
  \<Longrightarrow> \<pi>1@x=\<pi>2
  \<Longrightarrow> x\<noteq>[]
  \<Longrightarrow> left_degen G d2
  \<Longrightarrow> Q"
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      ?d.0="d2"
      in always_no_repetition_in_left_degen_derivations)
       apply(force)
      apply(force)
     apply(force)
    apply(force)
   apply(force)
  apply(subgoal_tac "d1 (length \<pi>1) = d2 (length \<pi>1)")
   apply(clarsimp)
   apply(simp add: norepHD_def norep_def)
   apply(erule_tac
      x="length \<pi>1"
      in allE)
   apply(erule_tac
      x="length (\<pi>1@x)"
      in allE)
   apply(erule impE)
    apply(case_tac x)
     apply(force)
    apply(rename_tac a list)(*strict*)
    apply(force)
   apply(erule impE)
    apply(force)
   apply(subgoal_tac "hd (cfg_conf (the (get_configuration (d2 (length \<pi>1))))) = hd (cfg_conf (the (get_configuration (d2 (length (\<pi>1 @ x))))))")
    apply(force)
   apply(simp (no_asm_use) add: cfgLM.trans_der_def)
   apply(erule conjE)+
   apply(erule exE)+
   apply(rename_tac e ea)(*strict*)
   apply(rule_tac
      t="d2 (length \<pi>1)"
      and s="Some (pair e \<lparr>cfg_conf = teA A # w1\<rparr>)"
      in ssubst)
    apply(rename_tac e ea)(*strict*)
    apply(force)
   apply(rename_tac e ea)(*strict*)
   apply(rule_tac
      t="d2 (length \<pi>1 + length x)"
      and s="Some (pair ea \<lparr>cfg_conf = teA A # w2\<rparr>)"
      in ssubst)
    apply(rename_tac e ea)(*strict*)
    apply(force)
   apply(rename_tac e ea)(*strict*)
   apply(simp (no_asm) add: get_configuration_def)
  apply(rule sym)
  apply(rule_tac
      ?d1.0="d1"
      and ?d2.0="d2"
      and ?\<pi>2.0="x"
      in cfgLM_trans_der_coincide)
      apply(simp add: split_TSstructure_def)
      apply(force)
     apply(force)
    apply(force)
   apply(force)
  apply(force)
  done

lemma cfgLM_positions_remain_compatible_l2l3: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.derivation G d1
  \<Longrightarrow> cfgLM.derivation G d2
  \<Longrightarrow> cfgLM.belongs G d1
  \<Longrightarrow> cfgLM.belongs G d2
  \<Longrightarrow> d1 0 = Some (pair None \<lparr>cfg_conf=[teA (cons_l2   q A)]\<rparr>)
  \<Longrightarrow> d2 0 = Some (pair None \<lparr>cfg_conf=[teA (cons_l3   q A q2)]\<rparr>)
  \<Longrightarrow> d1 n = Some (pair e1 \<lparr>cfg_conf=liftB v1@liftA w1\<rparr>)
  \<Longrightarrow> d2 n = Some (pair e2 \<lparr>cfg_conf=liftB v2@liftA w2\<rparr>)
  \<Longrightarrow> w1 \<noteq> []
  \<Longrightarrow> v1@x1=v2@x2
  \<Longrightarrow> (\<forall>k. Suc 0\<le>k\<and>k\<le>n \<longrightarrow>
  F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' (the(get_label(d1 k)))
  = F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' (the(get_label(d2 k))))
  \<and> v1=v2
  \<and> l3seq_l2end w1
  \<and> l3seq w2
  \<and> (\<forall>q A. cons_l2 q A \<notin> set w2)
  \<and> equal_stacks w1 w2
  \<and> equal_front_states (take (Suc 0) w1) (take (Suc 0) w2)
  \<and> length w1 \<le> length w2"
  apply(induct n arbitrary: e1 e2 v1 v2 w1 w2 x1 x2)
   apply(rename_tac e1 e2 v1 v2 w1 w2 x1 x2)(*strict*)
   apply(clarsimp)
   apply(rename_tac v1 v2 w1 w2 x1 x2)(*strict*)
   apply(case_tac v1)
    apply(rename_tac v1 v2 w1 w2 x1 x2)(*strict*)
    prefer 2
    apply(rename_tac v1 v2 w1 w2 x1 x2 a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac v1 v2 w1 w2 x1 x2)(*strict*)
   apply(clarsimp)
   apply(rename_tac v2 w1 w2)(*strict*)
   apply(case_tac w1)
    apply(rename_tac v2 w1 w2)(*strict*)
    apply(clarsimp)
   apply(rename_tac v2 w1 w2 a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac v2 w2 list)(*strict*)
   apply(case_tac list)
    apply(rename_tac v2 w2 list)(*strict*)
    prefer 2
    apply(rename_tac v2 w2 list a lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac v2 w2 list)(*strict*)
   apply(clarsimp)
   apply(rename_tac v2 w2)(*strict*)
   apply(case_tac v2)
    apply(rename_tac v2 w2)(*strict*)
    prefer 2
    apply(rename_tac v2 w2 a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac v2 w2)(*strict*)
   apply(clarsimp)
   apply(rename_tac w2)(*strict*)
   apply(case_tac w2)
    apply(rename_tac w2)(*strict*)
    apply(clarsimp)
   apply(rename_tac w2 a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac list)(*strict*)
   apply(case_tac list)
    apply(rename_tac list)(*strict*)
    prefer 2
    apply(rename_tac list a lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac list)(*strict*)
   apply(clarsimp)
   apply(simp add: l3seq_l2end_def l3seq_def equal_stacks_def equal_stack_def equal_front_states_def equal_front_state_def)
  apply(rename_tac n e1 e2 v1 v2 w1 w2 x1 x2)(*strict*)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d1 n = Some (pair e1 c1) \<and> d1 (Suc n) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2")
   apply(rename_tac n e1 e2 v1 v2 w1 w2 x1 x2)(*strict*)
   prefer 2
   apply(rule_tac
      m="Suc n"
      in cfgLM.step_detail_before_some_position)
     apply(rename_tac n e1 e2 v1 v2 w1 w2 x1 x2)(*strict*)
     apply(force)
    apply(rename_tac n e1 e2 v1 v2 w1 w2 x1 x2)(*strict*)
    apply(force)
   apply(rename_tac n e1 e2 v1 v2 w1 w2 x1 x2)(*strict*)
   apply(force)
  apply(rename_tac n e1 e2 v1 v2 w1 w2 x1 x2)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e2 v1 v2 w1 w2 x1 x2 e1a e2a c1)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac n e2 v1 v2 w1 w2 x1 x2 e1a e2a c1 l r)(*strict*)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d2 n = Some (pair e1 c1) \<and> d2 (Suc n) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2")
   apply(rename_tac n e2 v1 v2 w1 w2 x1 x2 e1a e2a c1 l r)(*strict*)
   prefer 2
   apply(rule_tac
      m="Suc n"
      in cfgLM.step_detail_before_some_position)
     apply(rename_tac n e2 v1 v2 w1 w2 x1 x2 e1a e2a c1 l r)(*strict*)
     apply(force)
    apply(rename_tac n e2 v1 v2 w1 w2 x1 x2 e1a e2a c1 l r)(*strict*)
    apply(force)
   apply(rename_tac n e2 v1 v2 w1 w2 x1 x2 e1a e2a c1 l r)(*strict*)
   apply(force)
  apply(rename_tac n e2 v1 v2 w1 w2 x1 x2 e1a e2a c1 l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a c1 l r e1 e2b c1a)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a c1 l r e1 e2b c1a la ra)(*strict*)
  apply(erule_tac
      x="e1a"
      in meta_allE)
  apply(clarsimp)
  apply(erule_tac
      x="e1"
      in meta_allE)
  apply(clarsimp)
  apply(case_tac c1a)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a c1 l r e1 e2b c1a la ra cfg_confa)(*strict*)
  apply(case_tac c1)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a c1 l r e1 e2b c1a la ra cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a l r e1 e2b la ra)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a l r e1 e2b la ra)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply(force)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a l r e1 e2b la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b la ra l')(*strict*)
  apply(thin_tac "setA (liftB l') = {}")
  apply(subgoal_tac "\<exists>l'. liftB l' = la")
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b la ra l')(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB la"
      in exI)
   apply (rule liftBDeConv2)
   apply(force)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b la ra l')(*strict*)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a)(*strict*)
  apply(thin_tac "setA (liftB l'a) = {}")
  apply(subgoal_tac "\<exists>w1 w2. prod_rhs e2a = liftB w1 @ liftA w2")
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a)(*strict*)
   prefer 2
   apply(subgoal_tac "LR1ProdFormSimp G")
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a)(*strict*)
    apply(simp add: LR1ProdFormSimp_def)
    apply(erule_tac
      x="e2a"
      in ballE)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a)(*strict*)
    apply(erule disjE)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a)(*strict*)
     apply(rule_tac
      x="[]"
      in exI)
     apply(rule_tac
      x="[]"
      in exI)
     apply(clarsimp)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a)(*strict*)
    apply(clarsimp)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a b Aa B)(*strict*)
    apply(erule disjE)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a b Aa B)(*strict*)
     apply(rule_tac
      x="[b]"
      in exI)
     apply(rule_tac
      x="[B]"
      in exI)
     apply(clarsimp)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a b Aa B)(*strict*)
    apply(erule disjE)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a b Aa B)(*strict*)
     apply(rule_tac
      x="[]"
      in exI)
     apply(rule_tac
      x="[B]"
      in exI)
     apply(clarsimp)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a b Aa B)(*strict*)
    apply(clarsimp)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a r e1 e2b ra l' l'a Aa B C)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(rule_tac
      x="[B,C]"
      in exI)
    apply(clarsimp)
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a)(*strict*)
   apply(simp add: split_TSstructure_def)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a)(*strict*)
  apply(subgoal_tac "\<exists>w1 w2. prod_rhs e2b = liftB w1 @ liftA w2")
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a)(*strict*)
   prefer 2
   apply(subgoal_tac "LR1ProdFormSimp G")
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a)(*strict*)
    apply(simp add: LR1ProdFormSimp_def)
    apply(erule_tac
      x="e2b"
      in ballE)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a)(*strict*)
    apply(erule disjE)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a)(*strict*)
     apply(rule_tac
      x="[]"
      in exI)
     apply(rule_tac
      x="[]"
      in exI)
     apply(clarsimp)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a)(*strict*)
    apply(clarsimp)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a b Aa B)(*strict*)
    apply(erule disjE)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a b Aa B)(*strict*)
     apply(rule_tac
      x="[b]"
      in exI)
     apply(rule_tac
      x="[B]"
      in exI)
     apply(clarsimp)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a b Aa B)(*strict*)
    apply(erule disjE)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a b Aa B)(*strict*)
     apply(rule_tac
      x="[]"
      in exI)
     apply(rule_tac
      x="[B]"
      in exI)
     apply(clarsimp)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a b Aa B)(*strict*)
    apply(clarsimp)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 ra l' l'a w1a w2a Aa B C)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(rule_tac
      x="[B,C]"
      in exI)
    apply(clarsimp)
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a)(*strict*)
   apply(simp add: split_TSstructure_def)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
  apply(subgoal_tac "(\<exists>w1 w2. cfg_conf \<lparr>cfg_conf = liftB l' @ teA (prod_lhs e2a) # r\<rparr>=liftB w1@liftA w2)")
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
   prefer 2
   apply(rule_tac
      d="d1"
      and c="\<lparr>cfg_conf = [teA (cons_l2   q A)]\<rparr>"
      and c'="\<lparr>cfg_conf = liftB l' @ teA (prod_lhs e2a) # r\<rparr>"
      and \<pi>="map the (get_labels d1 n)"
      in cfgLM_preserves_liftB_liftA_splitting)
         apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
         apply(simp add: F2LR1inputx_def)
         apply(force)
        apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
    apply(simp add: cfgLM.trans_der_def)
    apply(rule_tac
      t="length (get_labels d1 n)"
      and s="n"
      in ssubst)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
     apply (metis get_labels_length)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
    apply(rule conjI)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
     apply(rule cfgLM.get_labels_the_Some_on_defined_positions)
      apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
      apply(force)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
     apply(force)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
    apply(force)
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(rule_tac
      x="[cons_l2 q A]"
      in exI)
   apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
  apply(subgoal_tac "(\<exists>w1 w2. cfg_conf \<lparr>cfg_conf = liftB l'a @ teA (prod_lhs e2b) # ra\<rparr>=liftB w1@liftA w2)")
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
   prefer 2
   apply(rule_tac
      d="d2"
      and c="\<lparr>cfg_conf = [teA (cons_l3   q A q2)]\<rparr>"
      and c'="\<lparr>cfg_conf = liftB l'a @ teA (prod_lhs e2b) # ra\<rparr>"
      and \<pi>="map the (get_labels d2 n)"
      in cfgLM_preserves_liftB_liftA_splitting)
         apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
         apply(simp add: F2LR1inputx_def)
         apply(force)
        apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
    apply(simp add: cfgLM.trans_der_def)
    apply(rule_tac
      t="length (get_labels d2 n)"
      and s="n"
      in ssubst)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
     apply (metis get_labels_length)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
    apply(rule conjI)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
     apply(rule cfgLM.get_labels_the_Some_on_defined_positions)
      apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
      apply(force)
     apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
     apply(force)
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
    apply(force)
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(rule_tac
      x="[cons_l3 q A q2]"
      in exI)
   apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b w1c w1d w2c w2d)(*strict*)
  apply(subgoal_tac "l'=w1c")
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b w1c w1d w2c w2d)(*strict*)
   prefer 2
   apply(rule initial_liftB_strings_coincide)
   apply(force)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b w1c w1d w2c w2d)(*strict*)
  apply(subgoal_tac "l'a=w1d")
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b w1c w1d w2c w2d)(*strict*)
   prefer 2
   apply(rule initial_liftB_strings_coincide)
   apply(force)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra l' l'a w1a w2a w1b w2b w1c w1d w2c w2d)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra w1a w2a w1b w2b w1c w1d w2c w2d)(*strict*)
  apply(case_tac w2c)
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra w1a w2a w1b w2b w1c w1d w2c w2d)(*strict*)
   apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a r e1 e2b ra w1a w2a w1b w2b w1c w1d w2c w2d a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b ra w1a w2a w1b w2b w1c w1d w2d list)(*strict*)
  apply(case_tac w2d)
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b ra w1a w2a w1b w2b w1c w1d w2d list)(*strict*)
   apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b ra w1a w2a w1b w2b w1c w1d w2d list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
  apply(subgoal_tac "v2=w1d@w1b")
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
   prefer 2
   apply(subgoal_tac "liftB v2 @ liftA w2 = liftB (w1d @ w1b) @ liftA (w2b @ lista)")
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
    apply(thin_tac "liftB v2 @ liftA w2 = liftB w1d @ liftB w1b @ liftA w2b @ liftA lista")
    apply (metis liftA_commutes_over_concat liftB_liftA_inj1)
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
   apply(simp add: simpY)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
  apply(subgoal_tac "v1=w1c@w1a")
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
   prefer 2
   apply(subgoal_tac "liftB v1 @ liftA w1 = liftB (w1c @ w1a) @ liftA (w2a @ list)")
    apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
    apply(thin_tac "liftB v1 @ liftA w1 = liftB w1c @ liftB w1a @ liftA w2a @ liftA list")
    apply (metis liftA_commutes_over_concat liftB_liftA_inj1)
   apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
   apply(simp add: simpY)
  apply(rename_tac n v1 v2 w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac n w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
  apply(simp add: simpY)
  apply(subgoal_tac "w2=w2b@lista")
   apply(rename_tac n w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
   prefer 2
   apply(rule liftA_inj)
   apply(simp add: simpY)
  apply(rename_tac n w1 w2 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac n w1 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
  apply(subgoal_tac "w1=w2a@list")
   apply(rename_tac n w1 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
   prefer 2
   apply(rule liftA_inj)
   apply(simp add: simpY)
  apply(rename_tac n w1 x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1a e2a e1 e2b w1a w2a w1b w2b w1c w1d list lista)(*strict*)
  apply(thin_tac "liftA (w2b @ lista) = liftA w2b @ liftA lista")
  apply(thin_tac "liftA (w2a @ list) = liftA w2a @ liftA list")
  apply(rename_tac e1 e1' e2 e2' \<alpha>1' e1'\<beta> \<alpha>2' e2'\<beta> \<alpha>1 \<alpha>2 \<beta>1 \<beta>2)
  apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1' e1'\<beta> \<alpha>2' e2'\<beta> \<alpha>1 \<alpha>2 \<beta>1 \<beta>2)(*strict*)
  apply(erule_tac
      x="\<alpha>1"
      in meta_allE)
  apply(erule_tac
      x="\<alpha>2"
      in meta_allE)
  apply(erule_tac
      x="prod_lhs e1'#\<beta>1"
      in meta_allE)
  apply(erule_tac
      x="prod_lhs e2'#\<beta>2"
      in meta_allE)
  apply(erule_tac
      x="\<alpha>1'@x1"
      in meta_allE)
  apply(erule_tac
      x="\<alpha>2'@x2"
      in meta_allE)
  apply(erule meta_impE)
   apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1' e1'\<beta> \<alpha>2' e2'\<beta> \<alpha>1 \<alpha>2 \<beta>1 \<beta>2)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1' e1'\<beta> \<alpha>2' e2'\<beta> \<alpha>1 \<alpha>2 \<beta>1 \<beta>2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1' e1'\<beta> \<alpha>2' e2'\<beta> \<alpha>1 \<alpha>2 \<beta>1 \<beta>2)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1' e1'\<beta> \<alpha>2' e2'\<beta> \<alpha>1 \<alpha>2 \<beta>1 \<beta>2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1' e1'\<beta> \<alpha>2' e2'\<beta> \<alpha>1 \<alpha>2 \<beta>1 \<beta>2)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1' e1'\<beta> \<alpha>2' e2'\<beta> \<alpha>1 \<alpha>2 \<beta>1 \<beta>2)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1' e1'\<beta> \<alpha>2' e2'\<beta> \<alpha>2 \<beta>1 \<beta>2)(*strict*)
  apply(rename_tac \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2)
  apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2)(*strict*)
  apply(case_tac e1')
  apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 prod_lhsa prod_rhsa)(*strict*)
  apply(case_tac e2')
  apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 prod_lhsa prod_rhsa prod_lhsaa prod_rhsaa)(*strict*)
  apply(rename_tac A1 w1 A2 w2)
  apply(rename_tac n x1 x2 e1 e1' e2 e2' \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 A1 w1 A2 w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 A1 A2)(*strict*)
  apply(case_tac A2)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 A1 A2 qa b)(*strict*)
   apply(erule_tac
      x="qa"
      in allE)+
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 A1 A2 q1 b q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 A1 q1 b q2a)(*strict*)
  apply(case_tac A1)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 A1 q1 b q2a qa ba)(*strict*)
   prefer 2
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 A1 q1 b q2a q1a ba q2aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q1a ba q2aa)(*strict*)
   apply(subgoal_tac "ba = b \<and> q1a = q1")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q1a ba q2aa)(*strict*)
    prefer 2
    apply(simp add: l3seq_def equal_stacks_def equal_stack_def equal_front_states_def equal_front_state_def)
    apply(simp add: Let_def)
    apply(erule_tac
      x="0"
      and P="\<lambda>i. Suc 0 \<le> i \<and> i \<le> n \<longrightarrow> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' (the (get_label (d1 i))) = F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' (the (get_label (d2 i)))"
      in allE)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q1a ba q2aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a ba q2aa)(*strict*)
    apply(erule_tac
      x="0"
      in allE)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q1a ba q2aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    prefer 2
    apply(rule_tac
      ?d1.0="der2 \<lparr>cfg_conf=[teA (cons_l3   q1 b q2aa)]\<rparr> \<lparr>prod_lhs = cons_l3 q1 b q2aa, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr> \<lparr>cfg_conf=liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
      and ?d2.0="der2 \<lparr>cfg_conf=[teA (cons_l3   q1 b q2a)]\<rparr> \<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr> \<lparr>cfg_conf=liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
      and n="Suc 0"
      in cfgLM_positions_remain_compatible_prime_prime)
                  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
                  apply(simp add: F2LR1inputx_def)
                  apply(force)
                 apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
                 apply(simp add: F2LR1inputx_def)
                 apply(force)
                apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
                apply(simp add: F2LR1inputx_def)
               apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
             apply(simp add: split_TSstructure_def)
            apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
            apply(rule cfgLM.der2_is_derivation)
            apply(simp add: cfgLM_step_relation_def)
            apply(rule_tac
      x="[]"
      in exI)
            apply(rule_tac
      x="[]"
      in exI)
            apply(force)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
           apply(rule cfgLM.der2_is_derivation)
           apply(simp add: cfgLM_step_relation_def)
           apply(rule_tac
      x="[]"
      in exI)
           apply(rule_tac
      x="[]"
      in exI)
           apply(force)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
          apply(rule cfgLM.der2_belongs)
            apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
            apply(subgoal_tac "\<lparr>cfg_conf = liftB \<alpha> @ teA (cons_l3   q1 b q2aa) # liftA \<beta>1\<rparr> \<in> cfg_configurations G")
             apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
             apply(simp add: cfg_configurations_def)
             apply(simp add: cfg_configurations_def setAConcat setBConcat setA_liftB setB_liftB)
            apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
            apply(rule_tac
      d="d1"
      and i="n"
      in cfgLM.belongs_configurations)
             apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
             apply(force)
            apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
            apply(force)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
           apply(rule_tac
      d="d1"
      and i="Suc n"
      in cfgLM.belongs_step_labels)
            apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
            apply(force)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
           apply(force)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
          apply(subgoal_tac "\<lparr>cfg_conf = liftB \<alpha> @ liftB \<alpha>1 @ liftA e1'\<beta> @ liftA \<beta>1\<rparr> \<in> cfg_configurations G")
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
           apply(simp add: cfg_configurations_def)
           apply(simp add: cfg_configurations_def setAConcat setBConcat setB_liftA setA_liftA setA_liftB setB_liftB)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
          apply(rule_tac
      d="d1"
      and i="Suc n"
      in cfgLM.belongs_configurations)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
           apply(force)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
          apply(force)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
         apply(rule cfgLM.der2_belongs)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
           apply(subgoal_tac "\<lparr>cfg_conf = liftB \<alpha> @ teA (cons_l3   q1 b q2a) # liftA \<beta>2\<rparr> \<in> cfg_configurations G")
            apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
            apply(simp add: cfg_configurations_def)
            apply(simp add: cfg_configurations_def setAConcat setBConcat setA_liftB setB_liftB)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
           apply(rule_tac
      d="d2"
      and i="n"
      in cfgLM.belongs_configurations)
            apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
            apply(force)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
           apply(force)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
          apply(rule_tac
      d="d2"
      and i="Suc n"
      in cfgLM.belongs_step_labels)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
           apply(force)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
          apply(force)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
         apply(subgoal_tac "\<lparr>cfg_conf = liftB \<alpha> @ liftB \<alpha>2 @ liftA e2'\<beta> @ liftA \<beta>2\<rparr> \<in> cfg_configurations G")
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
          apply(simp add: cfg_configurations_def)
          apply(simp add: cfg_configurations_def setAConcat setBConcat setB_liftA setA_liftA setA_liftB setB_liftB)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
         apply(rule_tac
      d="d2"
      and i="Suc n"
      in cfgLM.belongs_configurations)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
          apply(force)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
         apply(force)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
        apply(simp add: der2_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
       apply(simp add: der2_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
      apply(simp add: der2_def)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     apply(simp add: der2_def)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
   apply(erule_tac
      x="Suc 0"
      and P="\<lambda>k. Suc 0 \<le> k \<and> k \<le> Suc 0 \<longrightarrow> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' (the (get_label (der2 \<lparr>cfg_conf = [teA (cons_l3   q1 b q2aa)]\<rparr> \<lparr>prod_lhs = cons_l3 q1 b q2aa, prod_rhs = liftB \<alpha>2 @ liftA e1'\<beta>\<rparr> \<lparr>cfg_conf = liftB \<alpha>2 @ liftA e1'\<beta>\<rparr> k))) = F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' (the (get_label (der2 \<lparr>cfg_conf = [teA (cons_l3   q1 b q2a)]\<rparr> \<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr> \<lparr>cfg_conf = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr> k)))"
      in allE)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
   apply(clarsimp)
   apply(simp add: get_label_def der2_def)
   apply(thin_tac "equal_front_states [cons_l3 q1 b q2aa] [cons_l3 q1 b q2a]")
   apply(rule conjI)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa k)(*strict*)
    apply(case_tac "k=Suc n")
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa k)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa k)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
   apply(subgoal_tac "length e1'\<beta> = length e2'\<beta> \<and> (length e1'\<beta> = 0 \<longrightarrow> \<alpha>2=[])")
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    prefer 2
    apply(subgoal_tac "(\<exists>x\<in> epda_delta SSG. edge_event x \<noteq> None \<and> (SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states SSG) \<or> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_read x) \<and> (SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states SSG) \<or> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_read x) \<or> edge_event x = None \<and> edge_push x = [] \<and> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop x \<and> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop x \<or> edge_event x = None \<and> edge_push x \<noteq> [] \<and> (SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states SSG) \<or> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states SSG)) \<and> (SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states SSG) \<or> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states SSG))) \<or> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking SSG) (epda_gamma SSG) \<and> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking SSG) (epda_gamma SSG)" for SSG SSe2 SSe1)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     prefer 2
     apply(rule_tac
      ?e1.0="\<lparr>prod_lhs = cons_l3 q1 b q2aa, prod_rhs = liftB \<alpha>2 @ liftA e1'\<beta>\<rparr>"
      and ?e2.0="\<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
      in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_equal_then_from_special_sets)
           apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
           apply(simp add: F2LR1inputx_def)
           apply(force)
          apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
          apply(simp add: F2LR1inputx_def)
          apply(force)
         apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
         apply(simp add: F2LR1inputx_def)
        apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
       apply(force)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
      apply(subgoal_tac "X" for X)
       apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
       prefer 2
       apply(rule_tac
      d="d1"
      and i="Suc n"
      in cfgLM.belongs_step_labels)
        apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
        apply(force)
       apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
       apply(force)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
      apply(rule_tac
      A="cfg_step_labels G"
      in set_mp)
       apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
       apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfg_step_labels_def)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
      apply(force)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     apply(subgoal_tac "X" for X)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
      prefer 2
      apply(rule_tac
      d="d2"
      and i="Suc n"
      in cfgLM.belongs_step_labels)
       apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
       apply(force)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
      apply(force)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     apply(rule_tac
      A="cfg_step_labels G"
      in set_mp)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
      apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfg_step_labels_def)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     apply(force)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)+
    apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa x)(*strict*)
    apply(erule disjE)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa x)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y)(*strict*)
     apply(case_tac \<alpha>2)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y)(*strict*)
      apply(case_tac e1'\<beta>)
       apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y a list)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y list)(*strict*)
     apply(case_tac list)
      apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y list)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y)(*strict*)
      apply(case_tac e1'\<beta>)
       apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y a list)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y list)(*strict*)
      apply(case_tac list)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y list)(*strict*)
       apply(clarsimp)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y)(*strict*)
       apply(case_tac e2'\<beta>)
        apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y)(*strict*)
        apply(clarsimp)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y a list)(*strict*)
       apply(clarsimp)
       apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x y list)(*strict*)
       apply(case_tac list)
        apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x y list)(*strict*)
        apply(clarsimp)
       apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x y list a lista)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y list a lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x y list a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa x)(*strict*)
    apply(erule disjE)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa x)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 x)(*strict*)
     apply(case_tac \<alpha>2)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 x)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 x)(*strict*)
      apply(case_tac e1'\<beta>)
       apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 x)(*strict*)
       apply(clarsimp)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 x)(*strict*)
       apply(case_tac e2'\<beta>)
        apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 x)(*strict*)
        apply(clarsimp)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 x a list)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 x a list)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 x a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa x)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa)(*strict*)
    apply(case_tac \<alpha>2)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa)(*strict*)
     apply(case_tac e1'\<beta>)
      apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa list)(*strict*)
     apply(case_tac e2'\<beta>)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa list)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa list a lista)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa list lista)(*strict*)
     apply(case_tac list)
      apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa list lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa list lista a listb)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa lista listb)(*strict*)
     apply(case_tac lista)
      apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa lista listb)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa lista listb a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa listb list)(*strict*)
     apply(case_tac listb)
      apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa listb list)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa list)(*strict*)
      apply(case_tac list)
       apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa list)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa list a lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa listb list a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a q2aa x qs qsa a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
   apply(subgoal_tac "equal_stacks (e1'\<beta> @ \<beta>1) (e2'\<beta> @ \<beta>2)")
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    prefer 2
    apply(rule equal_stacks_append)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
      apply(force)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     apply(force)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    apply(rule equal_stacks_Cons)
    apply(force)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "equal_front_states (take (Suc 0) e1'\<beta> @ take (Suc 0 - length e2'\<beta>) \<beta>1) (take (Suc 0) e2'\<beta> @ take (Suc 0 - length e2'\<beta>) \<beta>2)")
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    prefer 2
    apply(case_tac "e1'\<beta>")
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     prefer 2
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    apply(case_tac \<beta>1)
     apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa a list)(*strict*)
    apply(simp add: equal_front_states_def)
    apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha> \<beta>2 q1 b q2a q2aa a list)(*strict*)
    apply(case_tac \<beta>2)
     apply(rename_tac n e1 e2 \<alpha> \<beta>2 q1 b q2a q2aa a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha> \<beta>2 q1 b q2a q2aa a list aa lista)(*strict*)
    apply(simp add: equal_front_states_def)
    apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
    apply(subgoal_tac "getSrc a = getSrc aa")
     apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
     apply(simp (no_asm) add: getSrc_def equal_front_states_def equal_front_state_def Let_def)
     apply(simp add: getSrc_def)
    apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
    apply(rule_tac
      t="getSrc a"
      and s="the(getTrg (cons_l3 q1 b q2aa))"
      in ssubst)
     apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
     prefer 2
     apply(rule_tac
      t="getSrc aa"
      and s="the(getTrg (cons_l3 q1 b q2a))"
      in ssubst)
      apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
      prefer 2
      apply(simp (no_asm) add: getTrg_def)
      apply(subgoal_tac "(\<exists>x\<in> epda_delta SSG. edge_event x \<noteq> None \<and> (SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states SSG) \<or> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_read x) \<and> (SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states SSG) \<or> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_read x) \<or> edge_event x = None \<and> edge_push x = [] \<and> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop x \<and> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop x \<or> edge_event x = None \<and> edge_push x \<noteq> [] \<and> (SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states SSG) \<or> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states SSG)) \<and> (SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states SSG) \<or> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states SSG))) \<or> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking SSG) (epda_gamma SSG) \<and> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking SSG) (epda_gamma SSG)" for SSG SSe1 SSe2)
       apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
       prefer 2
       apply(rule_tac
      ?e1.0="\<lparr>prod_lhs = cons_l3 q1 b q2aa, prod_rhs = []\<rparr>"
      and ?e2.0="\<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = []\<rparr>"
      in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_equal_then_from_special_sets)
             apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
             apply(simp add: F2LR1inputx_def)
             apply(force)
            apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
            apply(simp add: F2LR1inputx_def)
            apply(force)
           apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
           apply(simp add: F2LR1inputx_def)
          apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
          apply(simp add: F2LR1inputx_def)
         apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
         apply(force)
        apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
        apply(subgoal_tac "X" for X)
         apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
         prefer 2
         apply(rule_tac
      d="d1"
      and i="Suc n"
      in cfgLM.belongs_step_labels)
          apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
          apply(force)
         apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
         apply(force)
        apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
        apply(rule_tac
      A="cfg_step_labels G"
      in set_mp)
         apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
         apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfg_step_labels_def)
        apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
        apply(force)
       apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
       apply(subgoal_tac "X" for X)
        apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
        prefer 2
        apply(rule_tac
      d="d2"
      and i="Suc n"
      in cfgLM.belongs_step_labels)
         apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
         apply(force)
        apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
        apply(force)
       apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
       apply(rule_tac
      A="cfg_step_labels G"
      in set_mp)
        apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
        apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfg_step_labels_def)
       apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
       apply(force)
      apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
      apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)+
      apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
     apply(rule_tac
      ?w1.0="[]"
      in l3seq_getSrc_getTrg)
     apply(force)
    apply(rename_tac n e1 e2 \<alpha> q1 b q2a q2aa a list aa lista)(*strict*)
    apply(rule_tac
      ?w1.0="[]"
      in l3seq_l2end_getSrc_getTrg)
    apply(force)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
   apply(rule conjI)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    prefer 2
    apply(case_tac "\<beta>2=[]")
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    apply(subgoal_tac "e2'\<beta>=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     prefer 2
     apply(rule case_list)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    apply(erule disjE)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     apply(rule_tac
      x="[cons_l3 q1 b q2a]"
      in l3seq_append_decomp2)
     apply(force)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
    apply(rule l3seq_append)
        apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
        apply(force)
       apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
       apply(rule_tac
      x="[cons_l3 q1 b q2a]"
      in l3seq_append_decomp2)
       apply(force)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
      apply(force)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
     apply(force)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
  apply(case_tac \<beta>2)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa a list w' a')(*strict*)
  apply(case_tac a')
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa a list w' a' qa ba)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa a list w' qa ba)(*strict*)
   apply(erule_tac
    x="qa"
    and P="\<lambda>qa. \<forall>A. cons_l2 qa A \<noteq> a \<and> cons_l2 qa A \<notin> set list"
    in allE)
   apply(erule_tac
    x="ba"
    in allE)
   apply(force)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa a list w' a' q1a ba q2b)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa a list w' q1a ba q2b)(*strict*)
  apply(case_tac a)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa a list w' q1a ba q2b qa bb)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa list w' q1a ba q2b qa bb)(*strict*)
   apply(erule_tac
    x="qa"
    and P="\<lambda>q. \<forall>A. (q = qa \<longrightarrow> A \<noteq> bb) \<and> cons_l2 q A \<notin> set list"
    in allE)
   apply(erule_tac
    x="bb"
    in allE)
   apply(force)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa a list w' q1a ba q2b q1b bb q2c)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa list w' q1a ba q2b q1b bb q2c)(*strict*)
  apply(simp (no_asm) add: getTrg_def getSrc_def)
  apply(subgoal_tac "q2a=q1b")
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa list w' q1a ba q2b q1b bb q2c)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
   apply(subgoal_tac "LR1ProdForm G")
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
    apply(simp add: LR1ProdForm_def)
    apply(erule_tac
    x="\<lparr>prod_lhs = cons_l3 q1 b q1b, prod_rhs = liftB \<alpha>2 @ liftA (w' @ [cons_l3 q1a ba q2b])\<rparr>"
    in ballE)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
     prefer 2
     apply(simp add: cfgLM_step_relation_def)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
    apply(clarsimp)
    apply(erule disjE)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
     apply(clarsimp)
     apply (metis liftA_preserves_length liftB_empty liftB_reflects_length Suc_length Suc_neq_Zero list.size(3))
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a list w' q1a ba q2b q1b bb q2c bc q1c q2d q3 q4 A1)(*strict*)
    apply(erule disjE)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a list w' q1a ba q2b q1b bb q2c bc q1c q2d q3 q4 A1)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1)(*strict*)
     apply(case_tac \<alpha>2)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1)(*strict*)
      apply(case_tac w')
       apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1 a lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1 a lista)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1 lista)(*strict*)
     apply(case_tac lista)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1 lista)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1)(*strict*)
      apply(case_tac w')
       apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1 a lista)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list q1a ba q2b bb q2c bc q1c q2d q3 A1 lista)(*strict*)
      apply(case_tac lista)
       apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list q1a ba q2b bb q2c bc q1c q2d q3 A1 lista)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list q1a ba q2b bb q2c bc q1c q2d q3 A1 lista a listb)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c bc q1c q2d q3 A1 lista a listb)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a list w' q1a ba q2b q1b bb q2c bc q1c q2d q3 q4 A1)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2)(*strict*)
    apply(case_tac \<alpha>2)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2)(*strict*)
     apply(case_tac w')
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2 a lista)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2 lista)(*strict*)
     apply(case_tac lista)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2 lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2 lista a listb)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2 listb)(*strict*)
     apply(case_tac listb)
      apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2 listb)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha> \<beta>1 q2a list q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2 listb a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q2a list w' q1a ba q2b bb q2c q1c q2d q3 q4 A1 A2 a lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
   apply(rule sub_of_F_SDPDA_TO_CFG_STD__implies_LR1ProdForm)
   apply(simp add: F2LR1inputx_def)
   apply(force)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 \<alpha> \<beta>1 q1 b q2a q2aa list w' q1a ba q2b q1b bb q2c)(*strict*)
  apply(simp add: l3seq_def)
  apply(erule_tac
    x="[]"
    in allE)+
  apply(clarsimp)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
  apply(subgoal_tac "e1'\<beta>=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
  prefer 2
  apply(rule case_list)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
  apply(erule disjE)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
  apply(simp add: l3seq_l2end_def)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
  apply(case_tac \<beta>1)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa w' a')(*strict*)
  apply(simp add: l3seq_l2end_def l3seq_def)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa w' a' w1 x y w2)(*strict*)
  apply(case_tac x)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa w' a' w1 x y w2 qa ba)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa w' a' w1 y w2 qa ba)(*strict*)
   apply(erule_tac
    x="w1"
    in allE)+
   apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa w' a' w1 x y w2 q1a ba q2b)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa w' a' w1 y w2 q1a ba q2b)(*strict*)
  apply(case_tac y)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa w' a' w1 y w2 q1a ba q2b qa bb)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa w' a' w1 w2 q1a ba q2b qa bb)(*strict*)
   apply(erule_tac
    x="w1"
    in allE)+
   apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa w' a' w1 y w2 q1a ba q2b q1b bb q2c)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa w' a' w1 w2 q1a ba q2b q1b bb q2c)(*strict*)
  apply(erule_tac
    x="w1"
    in allE)+
  apply(clarsimp)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a q2aa a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' a')(*strict*)
  apply(case_tac a')
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' a' qa ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' qa ba)(*strict*)
  apply(erule_tac
    x="qa"
    and P="\<lambda>qa. \<forall>A. cons_l2 qa A \<notin> set \<beta>2"
    in allE)
  apply(erule_tac
    x="ba"
    in allE)
  apply(force)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' a' q1a ba q2b)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' q1a ba q2b)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' q1a ba q2b)(*strict*)
  prefer 2
  apply(rule_tac
    x="w'@[cons_l3 q1a ba q2b]"
    and y="a#list"
    in l3seq_l2end_append)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' q1a ba q2b)(*strict*)
     apply(force)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' q1a ba q2b)(*strict*)
    apply(rule_tac
    x="[cons_l3 q1 b q2aa]"
    in l3seq_l2end_append_decomp2)
    apply(force)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' q1a ba q2b)(*strict*)
   apply(force)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' q1a ba q2b)(*strict*)
  apply(simp add: getTrg_def)
  apply(case_tac a)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' q1a ba q2b qa bb)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa list w' q1a ba q2b qa bb)(*strict*)
   apply(simp add: getSrc_def)
   apply(subgoal_tac "q2aa=qa")
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa list w' q1a ba q2b qa bb)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb)(*strict*)
    apply(subgoal_tac "qa=q2b")
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb)(*strict*)
    apply(subgoal_tac "LR1ProdForm G")
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb)(*strict*)
     apply(simp add: LR1ProdForm_def)
     apply(erule_tac
    x="\<lparr>prod_lhs = cons_l3 q1 b qa, prod_rhs = liftB \<alpha>2 @ liftA (w' @ [cons_l3 q1a ba q2b])\<rparr>"
    in ballE)
      apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb)(*strict*)
      prefer 2
      apply(simp add: cfgLM_step_relation_def)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb)(*strict*)
     apply(clarsimp)
     apply(erule disjE)
      apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb)(*strict*)
      apply(clarsimp)
      apply (metis liftA_preserves_length liftB_empty liftB_reflects_length Suc_length Suc_neq_Zero list.size(3))
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb bc q1b q2aa q3 q4 A1)(*strict*)
     apply(erule disjE)
      apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb bc q1b q2aa q3 q4 A1)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1)(*strict*)
      apply(case_tac \<alpha>2)
       apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1)(*strict*)
       apply(clarsimp)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1)(*strict*)
       apply(case_tac w')
        apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1)(*strict*)
        apply(clarsimp)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1 a lista)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1 a lista)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1 lista)(*strict*)
      apply(case_tac lista)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1 lista)(*strict*)
       apply(clarsimp)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1)(*strict*)
       apply(case_tac w')
        apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1)(*strict*)
        apply(clarsimp)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1 a lista)(*strict*)
       apply(clarsimp)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb bc q1b q2aa q3 A1 lista)(*strict*)
       apply(case_tac lista)
        apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb bc q1b q2aa q3 A1 lista)(*strict*)
        apply(clarsimp)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb bc q1b q2aa q3 A1 lista a listb)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb bc q1b q2aa q3 A1 lista a listb)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb bc q1b q2aa q3 q4 A1)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q1b q2aa q3 q4 A1 A2)(*strict*)
     apply(case_tac \<alpha>2)
      apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q1b q2aa q3 q4 A1 A2)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q1b q2aa q3 q4 A1 A2)(*strict*)
      apply(case_tac w')
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q1b q2aa q3 q4 A1 A2)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q1b q2aa q3 q4 A1 A2 a lista)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q1b q2aa q3 q4 A1 A2 lista)(*strict*)
      apply(case_tac lista)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q1b q2aa q3 q4 A1 A2 lista)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q1b q2aa q3 q4 A1 A2 lista a listb)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q1b q2aa q3 q4 A1 A2 listb)(*strict*)
      apply(case_tac listb)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q1b q2aa q3 q4 A1 A2 listb)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q1b q2aa q3 q4 A1 A2 listb a lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q1b q2aa q3 q4 A1 A2 a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b qa bb)(*strict*)
    apply(rule sub_of_F_SDPDA_TO_CFG_STD__implies_LR1ProdForm)
    apply(simp add: F2LR1inputx_def)
    apply(force)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa list w' q1a ba q2b qa bb)(*strict*)
   apply(simp add: l3seq_l2end_def)
   apply(erule_tac
    x="[]"
    in allE)+
   apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' q1a ba q2b q1b bb q2c)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa list w' q1a ba q2b q1b bb q2c)(*strict*)
  apply(simp add: getSrc_def)
  apply(subgoal_tac "q2aa=q1b")
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa list w' q1a ba q2b q1b bb q2c)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
   apply(subgoal_tac "LR1ProdForm G")
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
    apply(simp add: LR1ProdForm_def)
    apply(erule_tac
    x="\<lparr>prod_lhs = cons_l3 q1 b q1b, prod_rhs = liftB \<alpha>2 @ liftA (w' @ [cons_l3 q1a ba q2b])\<rparr>"
    in ballE)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
     prefer 2
     apply(simp add: cfgLM_step_relation_def)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
    apply(clarsimp)
    apply(erule disjE)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
     apply(clarsimp)
     apply (metis liftA_preserves_length liftB_empty liftB_reflects_length Suc_length Suc_neq_Zero list.size(3))
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b q1b bb q2c bc q1c q2aa q3 q4 A1)(*strict*)
    apply(erule disjE)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b q1b bb q2c bc q1c q2aa q3 q4 A1)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1)(*strict*)
     apply(case_tac \<alpha>2)
      apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1)(*strict*)
      apply(case_tac w')
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1 a lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1 a lista)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1 lista)(*strict*)
     apply(case_tac lista)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1 lista)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1)(*strict*)
      apply(case_tac w')
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1 a lista)(*strict*)
      apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q2c bc q1c q2aa q3 A1 lista)(*strict*)
      apply(case_tac lista)
       apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q2c bc q1c q2aa q3 A1 lista)(*strict*)
       apply(clarsimp)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q2c bc q1c q2aa q3 A1 lista a listb)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c bc q1c q2aa q3 A1 lista a listb)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b q1b bb q2c bc q1c q2aa q3 q4 A1)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2)(*strict*)
    apply(case_tac \<alpha>2)
     apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2)(*strict*)
     apply(case_tac w')
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2 a lista)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2 lista)(*strict*)
     apply(case_tac lista)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2 lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2 lista a listb)(*strict*)
     apply(clarsimp)
     apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2 listb)(*strict*)
     apply(case_tac listb)
      apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2 listb)(*strict*)
      apply(clarsimp)
     apply(rename_tac n e1 e2 e2'\<beta> \<alpha> \<beta>2 q2a list q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2 listb a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q2a list w' q1a ba q2b bb q2c q1c q2aa q3 q4 A1 A2 a lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a list w' q1a ba q2b q1b bb q2c)(*strict*)
   apply(rule sub_of_F_SDPDA_TO_CFG_STD__implies_LR1ProdForm)
   apply(simp add: F2LR1inputx_def)
   apply(force)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa list w' q1a ba q2b q1b bb q2c)(*strict*)
  apply(simp add: l3seq_l2end_def)
  apply(erule_tac
    x="[]"
    in allE)+
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>2 q1 b q2a q2aa a list w' q1a ba q2b)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 A1 q1 b q2a qa ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a qa ba)(*strict*)
  apply(subgoal_tac "qa=q1 \<and> ba=b")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a qa ba)(*strict*)
  prefer 2
  apply(rule context_conjI)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a qa ba)(*strict*)
  apply(simp add: l3seq_def equal_stacks_def equal_stack_def equal_front_states_def equal_front_state_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a qa ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a ba)(*strict*)
  apply(simp add: l3seq_def equal_stacks_def equal_stack_def equal_front_states_def equal_front_state_def)
  apply(erule_tac
    x="0"
    and P="\<lambda>X. X < Suc (length \<beta>1) \<and> X < Suc (length \<beta>2) \<longrightarrow> (let cmp = case_DT_l2_l3_nonterminals (\<lambda>q A. A) (\<lambda>q1 A q2. A) in cmp ((cons_l2 q1 ba # \<beta>1) ! X) = cmp ((cons_l3 q1 b q2a # \<beta>2) ! X))"
    in allE)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a qa ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(thin_tac "equal_front_states [cons_l2 q1 b] [cons_l3 q1 b q2a]")
  apply(subgoal_tac "\<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr> \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  prefer 2
  apply(rule_tac
    A="cfg_productions G"
    in set_mp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
  apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def cfg_sub_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(subgoal_tac "\<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr> \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  prefer 2
  apply(rule_tac
    A="cfg_productions G"
    in set_mp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
  apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def cfg_sub_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(clarsimp)
  apply(erule_tac
    P="\<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr> \<in> F_SDPDA_TO_CFG_STD__edges_l3 G'"
    in disjE)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  prefer 2
  apply(rule l3_production_not_in_F_SDPDA_TO_CFG_STD__edges_l2)
  apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(erule disjE)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(rule l2_production_not_in_F_SDPDA_TO_CFG_STD__edges_l3)
  apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(rule context_conjI)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a k)(*strict*)
  apply(erule_tac
    x="k"
    in allE)
  apply(clarsimp)
  apply(subgoal_tac "k=Suc n")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a k)(*strict*)
  prefer 2
  apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a k)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(simp add: get_label_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def F_SDPDA_TO_CFG_STD__edges_l3_def)
  apply(erule_tac
    P="\<exists>x\<in> epda_delta G'. \<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr> \<in> (case edge_event x of None \<Rightarrow> {} | Some A \<Rightarrow> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states G'))"
    in disjE)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(erule disjE)
  (*read1/read2*)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(case_tac "edge_event x")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a)(*strict*)
   apply(case_tac "edge_event xa")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
   apply(clarsimp)
   apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
    and s="{xa}"
    in ssubst)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
    apply(rule F_SDPDA_TO_CFG_STD__edges_l2_read_single_source)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
   apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
    and s="{x}"
    in ssubst)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
    apply(rule F_SDPDA_TO_CFG_STD__edges_l3_read_single_source)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
    prefer 2
    apply(rule valid_simple_dpda_edge_alt)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
     apply(simp add: F2LR1inputx_def)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
   apply(subgoal_tac "(\<exists>s1 s2. edge_pop xa=[s1] \<and> ((edge_event xa \<noteq> None \<and> edge_push xa=[s1]) \<or> (edge_event xa = None \<and> edge_push xa=[s2,s1]) \<or> (edge_event xa = None \<and> edge_push xa=[])))")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
    prefer 2
    apply(rule valid_simple_dpda_edge_alt)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
     apply(simp add: F2LR1inputx_def)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
   apply(rule_tac
    G="G'"
    in epdaS_apply_is_forward_edge_deterministic_accessibleE_with_ReachableEdge)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
         apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
        apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
       apply(rule_tac
    A="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD G' (cfgLM_accessible_productions (F_SDPDA_TO_CFG_STD G'))"
    in set_mp)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
        apply(rule_tac
    t="epdaS_accessible_edges G'"
    and s="epdaH_accessible_edges G'"
    in ssubst)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
         apply(rule epdaH_accessible_edges_vs_epdaS_accessible_edges)
         apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
        apply(rule F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_pt1)
        apply(simp add: F_SDPDA_TO_CFG_STD__SpecInput_def)
        apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
       apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
       apply(rule_tac
    x="\<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
    in bexI)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
        apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
       apply(rule_tac
    A="cfg_productions G"
    in set_mp)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
        apply(rule only_cfgLM_accessible_productions)
            apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
            apply(force)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
           apply(force)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
          apply(force)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
         apply(force)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
        apply(force)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
       apply(force)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa a aa s1 s1a)(*strict*)
   apply(simp add: prefix_def)
   apply(simp add: option_to_list_def)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
   apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a)(*strict*)
   apply(case_tac "\<alpha>1")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a)(*strict*)
    apply(case_tac e1'\<beta>)
     apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a ab list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a ab list)(*strict*)
   apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a list)(*strict*)
   apply(case_tac "\<alpha>2")
    apply(rename_tac n x1 x2 e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a list)(*strict*)
    apply(case_tac e2'\<beta>)
     apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 e1'\<beta> e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a list ab lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x xa a aa s1a list ab lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(erule disjE)
  (*read1/final*)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
   apply(clarsimp)
   apply(case_tac \<alpha>1)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
    prefer 2
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(case_tac e1'\<beta>)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
    prefer 2
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(subgoal_tac "\<beta>1=[]")
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(simp add: l3seq_l2end_def)
   apply(erule_tac
    x="[]"
    in allE)
   apply(clarsimp)
   apply(case_tac \<beta>1)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
    apply(force)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x a list)(*strict*)
   apply(force)
  (*read1/push2*)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   prefer 2
   apply(rule valid_simple_dpda_edge_alt)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    apply(simp add: F2LR1inputx_def)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop xa=[s1] \<and> ((edge_event xa \<noteq> None \<and> edge_push xa=[s1]) \<or> (edge_event xa = None \<and> edge_push xa=[s2,s1]) \<or> (edge_event xa = None \<and> edge_push xa=[])))")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   prefer 2
   apply(rule valid_simple_dpda_edge_alt)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    apply(simp add: F2LR1inputx_def)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a)(*strict*)
  apply(case_tac "edge_event x")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
  apply(case_tac "edge_push xa")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event xa")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
   prefer 2
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list ab)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
    and s="{x}"
    in ssubst)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(rule F_SDPDA_TO_CFG_STD__edges_l3_read_single_source)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
    and s="{xa}"
    in ssubst)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(rule F_SDPDA_TO_CFG_STD__edges_l2_push_single_source)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(force)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(clarsimp)
  apply(rule sym)
  apply(rule_tac
    G="G'"
    in epdaS_apply_is_forward_edge_deterministic_accessibleE_with_ReachableEdge)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
        apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(rule_tac
    A="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD G' (cfgLM_accessible_productions (F_SDPDA_TO_CFG_STD G'))"
    in set_mp)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(rule_tac
    t="epdaS_accessible_edges G'"
    and s="epdaH_accessible_edges G'"
    in ssubst)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
        apply(rule epdaH_accessible_edges_vs_epdaS_accessible_edges)
        apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(rule F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_pt1)
       apply(simp add: F_SDPDA_TO_CFG_STD__SpecInput_def)
       apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
      apply(rule_tac
    x="\<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
    in bexI)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(rule_tac
    A="cfg_productions G"
    in set_mp)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(rule only_cfgLM_accessible_productions)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
           apply(force)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
          apply(force)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
         apply(force)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
        apply(force)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(force)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
    apply(erule disjE)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(clarsimp)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
   apply(erule disjE)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(simp add: prefix_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(erule disjE)+
  (*pop1/read2*)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    prefer 2
    apply(rule valid_simple_dpda_edge_alt)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
     apply(simp add: F2LR1inputx_def)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(subgoal_tac "(\<exists>s1 s2. edge_pop xa=[s1] \<and> ((edge_event xa \<noteq> None \<and> edge_push xa=[s1]) \<or> (edge_event xa = None \<and> edge_push xa=[s2,s1]) \<or> (edge_event xa = None \<and> edge_push xa=[])))")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    prefer 2
    apply(rule valid_simple_dpda_edge_alt)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
     apply(simp add: F2LR1inputx_def)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a)(*strict*)
   apply(case_tac "edge_event x")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(clarsimp)
   apply(case_tac "edge_push xa")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    prefer 2
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(clarsimp)
   apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
    and s="{xa}"
    in ssubst)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    apply(rule F_SDPDA_TO_CFG_STD__edges_l3_pop_single_source)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
    and s="{x}"
    in ssubst)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    apply(rule F_SDPDA_TO_CFG_STD__edges_l2_read_single_source)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(clarsimp)
   apply(rule_tac
    G="G'"
    in epdaS_apply_is_forward_edge_deterministic_accessibleE_with_ReachableEdge)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
         apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
        apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(rule_tac
    A="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD G' (cfgLM_accessible_productions (F_SDPDA_TO_CFG_STD G'))"
    in set_mp)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
        apply(rule_tac
    t="epdaS_accessible_edges G'"
    and s="epdaH_accessible_edges G'"
    in ssubst)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
         apply(rule epdaH_accessible_edges_vs_epdaS_accessible_edges)
         apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
        apply(rule F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_pt1)
        apply(simp add: F_SDPDA_TO_CFG_STD__SpecInput_def)
        apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
       apply(rule_tac
    x="\<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
    in bexI)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
        apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(rule_tac
    A="cfg_productions G"
    in set_mp)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
        apply(rule only_cfgLM_accessible_productions)
            apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
            apply(force)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
           apply(force)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
          apply(force)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
         apply(force)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
        apply(force)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(force)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
   apply(simp add: prefix_def)
   apply(simp add: option_to_list_def)
  (*push1/read2*)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   prefer 2
   apply(rule valid_simple_dpda_edge_alt)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    apply(simp add: F2LR1inputx_def)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop xa=[s1] \<and> ((edge_event xa \<noteq> None \<and> edge_push xa=[s1]) \<or> (edge_event xa = None \<and> edge_push xa=[s2,s1]) \<or> (edge_event xa = None \<and> edge_push xa=[])))")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   prefer 2
   apply(rule valid_simple_dpda_edge_alt)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    apply(simp add: F2LR1inputx_def)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a)(*strict*)
  apply(case_tac "edge_event x")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_push xa")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event xa")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
   prefer 2
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list ab)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
    and s="{xa}"
    in ssubst)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(rule F_SDPDA_TO_CFG_STD__edges_l3_push_single_source)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(force)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
    and s="{x}"
    in ssubst)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(rule F_SDPDA_TO_CFG_STD__edges_l2_read_single_source)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(clarsimp)
  apply(rule_tac
    G="G'"
    in epdaS_apply_is_forward_edge_deterministic_accessibleE_with_ReachableEdge)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
        apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(rule_tac
    A="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD G' (cfgLM_accessible_productions (F_SDPDA_TO_CFG_STD G'))"
    in set_mp)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(rule_tac
    t="epdaS_accessible_edges G'"
    and s="epdaH_accessible_edges G'"
    in ssubst)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
        apply(rule epdaH_accessible_edges_vs_epdaS_accessible_edges)
        apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(rule F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_pt1)
       apply(simp add: F_SDPDA_TO_CFG_STD__SpecInput_def)
       apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
      apply(rule_tac
    x="\<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
    in bexI)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(rule_tac
    A="cfg_productions G"
    in set_mp)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(rule only_cfgLM_accessible_productions)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
           apply(force)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
          apply(force)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
         apply(force)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
        apply(force)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(force)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
  apply(simp add: prefix_def)
  apply(simp add: option_to_list_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(erule disjE)+
  (*pop1/final2*)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
   apply(clarsimp)
   apply(case_tac \<alpha>1)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
    prefer 2
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(case_tac e1'\<beta>)
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
    prefer 2
    apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(subgoal_tac "\<beta>1=[]")
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(simp add: l3seq_l2end_def)
   apply(erule_tac
    x="[]"
    in allE)
   apply(clarsimp)
   apply(case_tac \<beta>1)
    apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
    apply(force)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x a list)(*strict*)
   apply(force)
  (*pop1/push2*)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   prefer 2
   apply(rule valid_simple_dpda_edge_alt)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    apply(simp add: F2LR1inputx_def)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop xa=[s1] \<and> ((edge_event xa \<noteq> None \<and> edge_push xa=[s1]) \<or> (edge_event xa = None \<and> edge_push xa=[s2,s1]) \<or> (edge_event xa = None \<and> edge_push xa=[])))")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   prefer 2
   apply(rule valid_simple_dpda_edge_alt)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
    apply(simp add: F2LR1inputx_def)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a)(*strict*)
  apply(case_tac "edge_push xa")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event xa")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a list)(*strict*)
   prefer 2
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a list aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
  apply(case_tac "edge_push x")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   prefer 2
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
  apply(clarsimp)
  apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
    and s="{x}"
    in ssubst)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(rule F_SDPDA_TO_CFG_STD__edges_l3_pop_single_source)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
  apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
    and s="{xa}"
    in ssubst)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(rule F_SDPDA_TO_CFG_STD__edges_l2_push_single_source)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
        apply(simp add: F2LR1inputx_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(force)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
  apply(clarsimp)
  apply(rule sym)
  apply(rule_tac
    G="G'"
    in epdaS_apply_is_forward_edge_deterministic_accessibleE_with_ReachableEdge)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
        apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
      apply(rule_tac
    A="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD G' (cfgLM_accessible_productions (F_SDPDA_TO_CFG_STD G'))"
    in set_mp)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(rule_tac
    t="epdaS_accessible_edges G'"
    and s="epdaH_accessible_edges G'"
    in ssubst)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
        apply(rule epdaH_accessible_edges_vs_epdaS_accessible_edges)
        apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(rule F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_pt1)
       apply(simp add: F_SDPDA_TO_CFG_STD__SpecInput_def)
       apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
      apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
      apply(rule_tac
    x="\<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
    in bexI)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
      apply(rule_tac
    A="cfg_productions G"
    in set_mp)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(rule only_cfgLM_accessible_productions)
           apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
           apply(force)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
          apply(force)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
         apply(force)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
        apply(force)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
       apply(force)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
    apply(erule disjE)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
     apply(clarsimp)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
   apply(erule disjE)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
  apply(simp add: prefix_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(erule disjE)+
  (*push1/final2*)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
  apply(clarsimp)
  apply(case_tac \<alpha>1)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   prefer 2
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(case_tac e1'\<beta>)
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   prefer 2
   apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac n e1 e2 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(subgoal_tac "\<beta>1=[]")
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(simp add: l3seq_l2end_def)
  apply(erule_tac
    x="[]"
    in allE)
  apply(clarsimp)
  apply(case_tac \<beta>1)
   apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(force)
  apply(rename_tac n e1 e2 \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x a list)(*strict*)
  apply(force)
  (*push1/push2*)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop x=[s1] \<and> ((edge_event x \<noteq> None \<and> edge_push x=[s1]) \<or> (edge_event x = None \<and> edge_push x=[s2,s1]) \<or> (edge_event x = None \<and> edge_push x=[])))")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  prefer 2
  apply(rule valid_simple_dpda_edge_alt)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(simp add: F2LR1inputx_def)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(subgoal_tac "(\<exists>s1 s2. edge_pop xa=[s1] \<and> ((edge_event xa \<noteq> None \<and> edge_push xa=[s1]) \<or> (edge_event xa = None \<and> edge_push xa=[s2,s1]) \<or> (edge_event xa = None \<and> edge_push xa=[])))")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  prefer 2
  apply(rule valid_simple_dpda_edge_alt)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
   apply(simp add: F2LR1inputx_def)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a)(*strict*)
  apply(case_tac "edge_push xa")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event xa")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a list)(*strict*)
  prefer 2
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a list aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
  apply(case_tac "edge_push x")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
  prefer 2
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list ab)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa list)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
    and s="{x}"
    in ssubst)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(rule F_SDPDA_TO_CFG_STD__edges_l3_push_single_source)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(rule_tac
    t="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' \<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
    and s="{xa}"
    in ssubst)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(rule F_SDPDA_TO_CFG_STD__edges_l2_push_single_source)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(clarsimp)
  apply(rule sym)
  apply(rule_tac
    G="G'"
    in epdaS_apply_is_forward_edge_deterministic_accessibleE_with_ReachableEdge)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(rule_tac
    A="F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD G' (cfgLM_accessible_productions (F_SDPDA_TO_CFG_STD G'))"
    in set_mp)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(rule_tac
    t="epdaS_accessible_edges G'"
    and s="epdaH_accessible_edges G'"
    in ssubst)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(rule epdaH_accessible_edges_vs_epdaS_accessible_edges)
       apply(simp add: F2LR1inputx_def valid_simple_dpda_def valid_dpda_def valid_pda_def)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(rule F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD__SOUND_pt1)
      apply(simp add: F_SDPDA_TO_CFG_STD__SpecInput_def)
      apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(simp add: F2LR1inputx_def F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_def)
     apply(rule_tac
    x="\<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
    in bexI)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(simp add: F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_def)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(rule_tac
    A="cfg_productions G"
    in set_mp)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(rule only_cfgLM_accessible_productions)
          apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
          apply(force)
         apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
         apply(force)
        apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
        apply(force)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
       apply(force)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
     apply(force)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
   apply(erule disjE)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(erule disjE)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x xa s1 s1a a aa)(*strict*)
  apply(simp add: prefix_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(thin_tac "\<forall>k. Suc 0 \<le> k \<and> k \<le> n \<longrightarrow> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' (the (get_label (d1 k))) = F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' (the (get_label (d2 k)))")
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(erule_tac
    x="Suc n"
    in allE)
  apply(clarsimp)
  apply(simp add: get_label_def)
  apply(subgoal_tac "(\<exists>x\<in> epda_delta SSG. edge_event x \<noteq> None \<and> (SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states SSG) \<or> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_read x) \<and> (SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states SSG) \<or> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_read x) \<or> edge_event x = None \<and> edge_push x = [] \<and> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop x \<and> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop x \<or> edge_event x = None \<and> edge_push x \<noteq> [] \<and> (SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states SSG) \<or> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states SSG)) \<and> (SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states SSG) \<or> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states SSG))) \<or> SSe1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking SSG) (epda_gamma SSG) \<and> SSe2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking SSG) (epda_gamma SSG)" for SSG SSe1 SSe2)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  prefer 2
  apply(rule_tac
    ?e1.0="\<lparr>prod_lhs = cons_l2 q1 b, prod_rhs = liftB \<alpha>1 @ liftA e1'\<beta>\<rparr>"
    and ?e2.0="\<lparr>prod_lhs = cons_l3 q1 b q2a, prod_rhs = liftB \<alpha>2 @ liftA e2'\<beta>\<rparr>"
    in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_equal_then_from_special_sets)
       apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
       apply(simp add: F2LR1inputx_def)
       apply(force)
      apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
      apply(simp add: F2LR1inputx_def)
      apply(force)
     apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
    apply(simp add: F2LR1inputx_def)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(simp add: F2LR1inputx_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(erule disjE)+
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(erule disjE)+
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x y)(*strict*)
  apply(erule disjE)+
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x y)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x y)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x y)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x y)(*strict*)
  apply(subgoal_tac "\<alpha>1=[y] \<and> e1'\<beta> = [(cons_l2   (edge_trg x) (edge_pop x ! 0))]")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x y)(*strict*)
   prefer 2
   apply(rule liftB_liftA_one_one)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x y)(*strict*)
  apply(subgoal_tac "\<alpha>2=[y] \<and> e2'\<beta> = [(cons_l3   (edge_trg x) (edge_pop x ! 0)) q2a]")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x y)(*strict*)
   prefer 2
   apply(rule liftB_liftA_one_one)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x y)(*strict*)
  apply(subgoal_tac "\<beta>1=[]")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x y)(*strict*)
   prefer 2
   apply(rule l3seq_l2end_l2_at_end)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x y)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x y)(*strict*)
  apply(simp add: equal_stacks_def equal_stack_def)
  apply(simp add: equal_front_states_def equal_front_state_def)
  apply(rule conjI)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x y)(*strict*)
   apply(simp add: l3seq_l2end_def)
  apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x y)(*strict*)
  apply (metis l3seq_change_initial_state)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(erule disjE)+
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(clarsimp)
  apply(erule disjE)+
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(erule disjE)+
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs)(*strict*)
  apply(erule disjE)+
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "\<alpha>2=[] \<and> e2'\<beta>= [(cons_l3   (edge_trg x) (edge_push x ! 0) qs), (cons_l3 qs (edge_pop x ! 0) q2a)]")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs)(*strict*)
    prefer 2
    apply(rule liftB_liftA_zero_two)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs)(*strict*)
   apply(subgoal_tac "\<alpha>1=[] \<and> e1'\<beta>= [(cons_l2   (edge_trg x) (edge_push x ! 0))]")
    apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs)(*strict*)
    prefer 2
    apply(rule liftB_liftA_zero_one)
    apply(force)
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a x qs)(*strict*)
   apply(subgoal_tac "\<beta>1=[]")
    apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a x qs)(*strict*)
    prefer 2
    apply(rule l3seq_l2end_l2_at_end)
    apply(force)
   apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a x qs)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs)(*strict*)
   apply(simp add: equal_stacks_def equal_stack_def)
   apply(simp add: equal_front_states_def equal_front_state_def)
   apply(rule conjI)
    apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs)(*strict*)
    apply(simp add: l3seq_l2end_def)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs)(*strict*)
   apply (metis l3_seq_add_initial_state)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs qsa)(*strict*)
  apply(subgoal_tac "\<alpha>2 = [] \<and> e2'\<beta> = [(cons_l3   (edge_trg x) (edge_push x ! 0) qs), (cons_l3 qs (edge_pop x ! 0) q2a)]")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs qsa)(*strict*)
   prefer 2
   apply(rule liftB_liftA_zero_two)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs qsa)(*strict*)
  apply(subgoal_tac "\<alpha>1=[] \<and> e1'\<beta>= [(cons_l3   (edge_trg x) (edge_push x ! 0) qsa), (cons_l2 qsa (edge_pop x ! 0))]")
   apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs qsa)(*strict*)
   prefer 2
   apply(rule liftB_liftA_zero_two)
   apply(force)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q2a x qs qsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a x qs qsa)(*strict*)
  apply(subgoal_tac "\<beta>1=[]")
   apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a x qs qsa)(*strict*)
   prefer 2
   apply(rule l3seq_l2end_l2_at_end)
   apply(force)
  apply(rename_tac n e1 e2 \<alpha> \<beta>1 \<beta>2 q2a x qs qsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa)(*strict*)
  apply(simp add: equal_front_states_def equal_front_state_def)
  apply(rule conjI)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa)(*strict*)
   apply(simp add: l3seq_l2end_def)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 xa y w2)(*strict*)
   apply(case_tac xa)
    apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 xa y w2 qa b)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 y w2 qa b)(*strict*)
    apply(case_tac w1)
     apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 y w2 qa b)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 y w2 qa b a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 xa y w2 q1 b q2aa)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 y w2 q1 b q2aa)(*strict*)
   apply(case_tac y)
    apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 y w2 q1 b q2aa qa ba)(*strict*)
    apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 w2 q1 b q2aa qa ba)(*strict*)
    apply(case_tac w1)
     apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 w2 q1 b q2aa qa ba)(*strict*)
     apply(clarsimp)
    apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 w2 q1 b q2aa qa ba a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 y w2 q1 b q2aa q1a ba q2b)(*strict*)
   apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 w2 q1 b q2aa q1a ba q2b)(*strict*)
   apply(case_tac w1)
    apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 w2 q1 b q2aa q1a ba q2b)(*strict*)
    apply(clarsimp)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa w1 w2 q1 b q2aa q1a ba q2b a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa)(*strict*)
  apply(rule conjI)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa)(*strict*)
   apply (metis l3_seq_add_initial_state)
  apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa)(*strict*)
  apply(simp add: equal_stacks_def equal_stack_def Let_def)
  apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa i)(*strict*)
  apply(case_tac i)
   apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa i)(*strict*)
   apply(clarsimp)
  apply(rename_tac n e1 e2 \<alpha> \<beta>2 q2a x qs qsa i nat)(*strict*)
  apply(clarsimp)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a x)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
  apply(rename_tac n x1 x2 e1 e2 \<alpha>1 e1'\<beta> \<alpha>2 e2'\<beta> \<alpha> \<beta>1 \<beta>2 q1 b q2a)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def F_SDPDA_TO_CFG_STD__edges_l2_push_def F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l3_pop_def F_SDPDA_TO_CFG_STD__edges_l2_read_def F_SDPDA_TO_CFG_STD__edges_l3_read_def)
  done

lemma left_degen_derivation_preserve_equivalent_state_stack_top: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = [teA A1]\<rparr> \<pi>1 \<lparr>cfg_conf = teA B1 # liftA t1\<rparr>
  \<Longrightarrow> cropTol3l2_single A1 = cropTol3l2_single A2
  \<Longrightarrow> left_degen G d1
  \<Longrightarrow> left_degen G d2
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA A2]\<rparr> \<pi>2 \<lparr>cfg_conf = teA B2 # liftA t2\<rparr>
  \<Longrightarrow> length \<pi>1=length \<pi>2
  \<Longrightarrow> cropTol3l2_single B1 = cropTol3l2_single B2"
  apply(case_tac A1)
   apply(rename_tac q b)(*strict*)
   apply(clarsimp)
   apply(case_tac A2)
    apply(rename_tac q b qa ba)(*strict*)
    apply(clarsimp)
    apply(simp add: cropTol3l2_single_def)
    apply(clarsimp)
    apply(rename_tac qa ba)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac qa ba)(*strict*)
     prefer 2
     apply(unfold cfgLM.trans_der_def)
     apply(erule exE)+
     apply(rename_tac qa ba e ea)(*strict*)
     apply(fold cfgLM.trans_der_def)
     apply(rule_tac
      ?x1.0="[]"
      and ?x2.0="[]"
      and ?v2.0="[]"
      and ?B2.0="B2"
      and ?r2.0="t2"
      and ?v1.0="[]"
      and ?B1.0="B1"
      and ?r1.0="t1"
      and n="length \<pi>1"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and G="G'"
      and G'="G"
      in cfgLM_positions_remain_compatible_prime)
                    apply(rename_tac qa ba e ea)(*strict*)
                    apply(simp add: F2LR1inputx_def)
                   apply(rename_tac qa ba e ea)(*strict*)
                   apply(simp add: F2LR1inputx_def)
                  apply(rename_tac qa ba e ea)(*strict*)
                  apply(simp add: F2LR1inputx_def)
                 apply(rename_tac qa ba e ea)(*strict*)
                 apply(simp add: F2LR1inputx_def)
                apply(rename_tac qa ba e ea)(*strict*)
                apply(simp add: F2LR1inputx_def)
               apply(rename_tac qa ba e ea)(*strict*)
               apply(force)
              apply(rename_tac qa ba e ea)(*strict*)
              apply(force)
             apply(rename_tac qa ba e ea)(*strict*)
             apply(force)
            apply(rename_tac qa ba e ea)(*strict*)
            apply(force)
           apply(rename_tac qa ba e ea)(*strict*)
           apply(force)
          apply(rename_tac qa ba e ea)(*strict*)
          apply(force)
         apply(rename_tac qa ba e ea)(*strict*)
         apply(force)
        apply(rename_tac qa ba e ea)(*strict*)
        apply(force)
       apply(rename_tac qa ba e ea)(*strict*)
       apply(force)
      apply(rename_tac qa ba e ea)(*strict*)
      apply(force)
     apply(rename_tac qa ba e ea)(*strict*)
     apply(force)
    apply(rename_tac qa ba)(*strict*)
    apply(case_tac B1)
     apply(rename_tac qa ba q b)(*strict*)
     apply(clarsimp)
     apply(case_tac B2)
      apply(rename_tac qa ba q b qb bb)(*strict*)
      apply(simp add: equal_stack_def equal_front_state_def)
     apply(rename_tac qa ba q b q1 bb q2)(*strict*)
     apply(clarsimp)
     apply(simp add: equal_stack_def equal_front_state_def)
    apply(rename_tac qa ba q1 b q2)(*strict*)
    apply(clarsimp)
    apply(case_tac B2)
     apply(rename_tac qa ba q1 b q2 q bb)(*strict*)
     apply(simp add: equal_stack_def equal_front_state_def)
    apply(rename_tac qa ba q1 b q2 q1a bb q2a)(*strict*)
    apply(clarsimp)
    apply(simp add: equal_stack_def equal_front_state_def)
   apply(rename_tac q b q1 ba q2)(*strict*)
   apply(clarsimp)
   apply(simp add: cropTol3l2_single_def)
   apply(clarsimp)
   apply(rename_tac q1 ba q2)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac q1 ba q2)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac q1 ba q2 e ea)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      ?v2.0="[]"
      and ?w2.0="B2#t2"
      and ?v1.0="[]"
      and ?w1.0="B1#t1"
      and n="(length \<pi>1)"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and G="G"
      and G'="G'"
      in cfgLM_positions_remain_compatible_l2l3)
               apply(rename_tac q1 ba q2 e ea)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac q1 ba q2 e ea)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac q1 ba q2 e ea)(*strict*)
             apply(simp add: F2LR1inputx_def)
            apply(rename_tac q1 ba q2 e ea)(*strict*)
            apply(simp add: F2LR1inputx_def)
           apply(rename_tac q1 ba q2 e ea)(*strict*)
           apply(simp add: F2LR1inputx_def)
          apply(rename_tac q1 ba q2 e ea)(*strict*)
          apply(force)
         apply(rename_tac q1 ba q2 e ea)(*strict*)
         apply(force)
        apply(rename_tac q1 ba q2 e ea)(*strict*)
        apply(force)
       apply(rename_tac q1 ba q2 e ea)(*strict*)
       apply(force)
      apply(rename_tac q1 ba q2 e ea)(*strict*)
      apply(force)
     apply(rename_tac q1 ba q2 e ea)(*strict*)
     apply(force)
    apply(rename_tac q1 ba q2 e ea)(*strict*)
    apply(force)
   apply(rename_tac q1 ba q2)(*strict*)
   apply(case_tac B1)
    apply(rename_tac q1 ba q2 q b)(*strict*)
    apply(clarsimp)
    apply(case_tac B2)
     apply(rename_tac q1 ba q2 q b qa bb)(*strict*)
     apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
     apply(clarsimp)
     apply(rename_tac q1 ba q2 b qa bb)(*strict*)
     apply(erule_tac
      x="0"
      in allE)+
     apply(clarsimp)
    apply(rename_tac q1 ba q2 q b q1a bb q2a)(*strict*)
    apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
    apply(clarsimp)
    apply(rename_tac q1 ba q2 b q1a bb q2a)(*strict*)
    apply(erule_tac
      x="0"
      in allE)+
    apply(clarsimp)
   apply(rename_tac q1 ba q2 q1a b q2a)(*strict*)
   apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
   apply(clarsimp)
   apply(rename_tac q1 ba q2 b q2a)(*strict*)
   apply(erule_tac
      x="0"
      in allE)+
   apply(clarsimp)
   apply(rename_tac q1 ba q2 q2a)(*strict*)
   apply(case_tac B2)
    apply(rename_tac q1 ba q2 q2a q b)(*strict*)
    apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
   apply(rename_tac q1 ba q2 q2a q1a b q2b)(*strict*)
   apply(clarsimp)
  apply(rename_tac q1 b q2)(*strict*)
  apply(clarsimp)
  apply(case_tac A2)
   apply(rename_tac q1 b q2 q ba)(*strict*)
   apply(clarsimp)
   apply(simp add: cropTol3l2_single_def)
   apply(subgoal_tac "X" for X)
    apply(rename_tac q1 b q2 q ba)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac q1 b q2 q ba e ea)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      ?x1.0="[]"
      and ?x2.0="[]"
      and ?v1.0="[]"
      and ?w2.0="B1#t1"
      and ?v2.0="[]"
      and ?w1.0="B2#t2"
      and n="(length \<pi>1)"
      and ?d2.0="d1"
      and ?d1.0="d2"
      and G="G"
      and G'="G'"
      in cfgLM_positions_remain_compatible_l2l3)
               apply(rename_tac q1 b q2 q ba e ea)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac q1 b q2 q ba e ea)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac q1 b q2 q ba e ea)(*strict*)
             apply(simp add: F2LR1inputx_def)
            apply(rename_tac q1 b q2 q ba e ea)(*strict*)
            apply(simp add: F2LR1inputx_def)
           apply(rename_tac q1 b q2 q ba e ea)(*strict*)
           apply(simp add: F2LR1inputx_def)
          apply(rename_tac q1 b q2 q ba e ea)(*strict*)
          apply(force)
         apply(rename_tac q1 b q2 q ba e ea)(*strict*)
         apply(force)
        apply(rename_tac q1 b q2 q ba e ea)(*strict*)
        apply(force)
       apply(rename_tac q1 b q2 q ba e ea)(*strict*)
       apply(force)
      apply(rename_tac q1 b q2 q ba e ea)(*strict*)
      apply(force)
     apply(rename_tac q1 b q2 q ba e ea)(*strict*)
     apply(force)
    apply(rename_tac q1 b q2 q ba e ea)(*strict*)
    apply(force)
   apply(rename_tac q1 b q2 q ba)(*strict*)
   apply(case_tac B1)
    apply(rename_tac q1 b q2 q ba qa bb)(*strict*)
    apply(clarsimp)
    apply(rename_tac q2 q ba qa bb)(*strict*)
    apply(case_tac B2)
     apply(rename_tac q2 q ba qa bb qb b)(*strict*)
     apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
     apply(clarsimp)
     apply(rename_tac q2 q ba qa bb b)(*strict*)
     apply(erule_tac
      x="0"
      in allE)+
     apply(clarsimp)
    apply(rename_tac q2 q ba qa bb q1 b q2a)(*strict*)
    apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
    apply(clarsimp)
    apply(rename_tac q2 q ba qa bb b q2a)(*strict*)
    apply(erule_tac
      x="0"
      in allE)+
    apply(clarsimp)
   apply(rename_tac q1 b q2 q ba q1a bb q2a)(*strict*)
   apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
   apply(clarsimp)
   apply(rename_tac q2 q ba bb q2a)(*strict*)
   apply(erule_tac
      x="0"
      in allE)+
   apply(clarsimp)
   apply(rename_tac q2 q ba q2a)(*strict*)
   apply(case_tac B2)
    apply(rename_tac q2 q ba q2a qa b)(*strict*)
    apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
   apply(rename_tac q2 q ba q2a q1 b q2b)(*strict*)
   apply(clarsimp)
  apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
  apply(clarsimp)
  apply(simp add: cropTol3l2_single_def)
  apply(subgoal_tac "X" for X)
   apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac
      ?x1.0="[]"
      and ?x2.0="[]"
      and ?v2.0="[]"
      and ?w2.0="B2#t2"
      and ?v1.0="[]"
      and ?w1.0="B1#t1"
      and n="(length \<pi>1)"
      and ?d1.0="d1"
      and ?d2.0="d2"
      in cfgLM_positions_remain_compatible_prime_prime)
                 apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
                 apply(simp add: F2LR1inputx_def)
                 apply(force)
                apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
                apply(simp add: F2LR1inputx_def)
                apply(force)
               apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
             apply(simp add: F2LR1inputx_def)
            apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
            apply(simp add: split_TSstructure_def)
           apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
           apply(force)
          apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
          apply(force)
         apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
         apply(force)
        apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
        apply(force)
       apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
       apply(force)
      apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
      apply(force)
     apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
     apply(force)
    apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
    apply(force)
   apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
   apply(force)
  apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
  apply(case_tac B1)
   apply(rename_tac q1 b q2 q1a ba q2a q bb)(*strict*)
   apply(clarsimp)
   apply(rename_tac q2 q1a ba q2a q bb)(*strict*)
   apply(case_tac B2)
    apply(rename_tac q2 q1a ba q2a q bb qa b)(*strict*)
    apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
    apply(clarsimp)
    apply(rename_tac q2 q1a ba q2a bb qa b)(*strict*)
    apply(erule_tac
      x="0"
      in allE)+
    apply(clarsimp)
   apply(rename_tac q2 q1a ba q2a q bb q1 b q2b)(*strict*)
   apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
   apply(clarsimp)
   apply(rename_tac q2 q1a ba q2a bb q1 b q2b)(*strict*)
   apply(erule_tac
      x="0"
      in allE)+
   apply(clarsimp)
  apply(rename_tac q1 b q2 q1a ba q2a q1b bb q2b)(*strict*)
  apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
  apply(clarsimp)
  apply(rename_tac q2 q1a ba q2a bb q2b)(*strict*)
  apply(erule_tac
      x="0"
      in allE)+
  apply(clarsimp)
  apply(rename_tac q2 q1a ba q2a q2b)(*strict*)
  apply(case_tac B2)
   apply(rename_tac q2 q1a ba q2a q2b q b)(*strict*)
   apply(simp add: equal_stack_def equal_front_state_def equal_stacks_def equal_front_states_def)
  apply(rename_tac q2 q1a ba q2a q2b q1 b q2c)(*strict*)
  apply(clarsimp)
  done

lemma prod_to_edge_equality_for_nonterminal_generation: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = [teA A1]\<rparr> \<pi>1 \<lparr>cfg_conf = teA a # liftA t1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA A2]\<rparr> \<pi>2 \<lparr>cfg_conf = teA a # liftA t2\<rparr>
  \<Longrightarrow> length \<pi>1 = length \<pi>2
  \<Longrightarrow> cropTol3l2_single A1 = cropTol3l2_single A2
  \<Longrightarrow> left_degen G d1
  \<Longrightarrow> left_degen G d2
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2"
  apply(case_tac A1)
   apply(rename_tac q b)(*strict*)
   apply(clarsimp)
   apply(case_tac A2)
    apply(rename_tac q b qa ba)(*strict*)
    apply(clarsimp)
    apply(simp add: cropTol3l2_single_def)
    apply(clarsimp)
    apply(rename_tac qa ba)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac qa ba)(*strict*)
     prefer 2
     apply(unfold cfgLM.trans_der_def)
     apply(erule exE)+
     apply(rename_tac qa ba e ea)(*strict*)
     apply(fold cfgLM.trans_der_def)
     apply(rule_tac
      ?x1.0="[]"
      and ?x2.0="[]"
      and ?v2.0="[]"
      and ?B2.0="a"
      and ?r2.0="t2"
      and ?v1.0="[]"
      and ?B1.0="a"
      and ?r1.0="t1"
      and n="length \<pi>1"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and G="G'"
      and G'="G"
      in cfgLM_positions_remain_compatible_prime)
                    apply(rename_tac qa ba e ea)(*strict*)
                    apply(simp add: F2LR1inputx_def)
                   apply(rename_tac qa ba e ea)(*strict*)
                   apply(simp add: F2LR1inputx_def)
                  apply(rename_tac qa ba e ea)(*strict*)
                  apply(simp add: F2LR1inputx_def)
                 apply(rename_tac qa ba e ea)(*strict*)
                 apply(simp add: F2LR1inputx_def)
                apply(rename_tac qa ba e ea)(*strict*)
                apply(simp add: F2LR1inputx_def)
               apply(rename_tac qa ba e ea)(*strict*)
               apply(force)
              apply(rename_tac qa ba e ea)(*strict*)
              apply(force)
             apply(rename_tac qa ba e ea)(*strict*)
             apply(force)
            apply(rename_tac qa ba e ea)(*strict*)
            apply(force)
           apply(rename_tac qa ba e ea)(*strict*)
           apply(force)
          apply(rename_tac qa ba e ea)(*strict*)
          apply(force)
         apply(rename_tac qa ba e ea)(*strict*)
         apply(force)
        apply(rename_tac qa ba e ea)(*strict*)
        apply(force)
       apply(rename_tac qa ba e ea)(*strict*)
       apply(force)
      apply(rename_tac qa ba e ea)(*strict*)
      apply(force)
     apply(rename_tac qa ba e ea)(*strict*)
     apply(force)
    apply(rename_tac qa ba)(*strict*)
    apply(rule equal_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_to_equal_prod_to_edge)
        apply(rename_tac qa ba)(*strict*)
        apply(simp add: split_TSstructure_def)
        apply(force)
       apply(rename_tac qa ba)(*strict*)
       apply(force)
      apply(rename_tac qa ba)(*strict*)
      apply(force)
     apply(rename_tac qa ba)(*strict*)
     apply(force)
    apply(rename_tac qa ba)(*strict*)
    apply(force)
   apply(rename_tac q b q1 ba q2)(*strict*)
   apply(clarsimp)
   apply(simp add: cropTol3l2_single_def)
   apply(clarsimp)
   apply(rename_tac q1 ba q2)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac q1 ba q2)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac q1 ba q2 e ea)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      ?v2.0="[]"
      and ?w2.0="a#t2"
      and ?v1.0="[]"
      and ?w1.0="a#t1"
      and n="(length \<pi>1)"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and G="G"
      and G'="G'"
      in cfgLM_positions_remain_compatible_l2l3)
               apply(rename_tac q1 ba q2 e ea)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac q1 ba q2 e ea)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac q1 ba q2 e ea)(*strict*)
             apply(simp add: F2LR1inputx_def)
            apply(rename_tac q1 ba q2 e ea)(*strict*)
            apply(simp add: F2LR1inputx_def)
           apply(rename_tac q1 ba q2 e ea)(*strict*)
           apply(simp add: F2LR1inputx_def)
          apply(rename_tac q1 ba q2 e ea)(*strict*)
          apply(force)
         apply(rename_tac q1 ba q2 e ea)(*strict*)
         apply(force)
        apply(rename_tac q1 ba q2 e ea)(*strict*)
        apply(force)
       apply(rename_tac q1 ba q2 e ea)(*strict*)
       apply(force)
      apply(rename_tac q1 ba q2 e ea)(*strict*)
      apply(force)
     apply(rename_tac q1 ba q2 e ea)(*strict*)
     apply(force)
    apply(rename_tac q1 ba q2 e ea)(*strict*)
    apply(force)
   apply(rename_tac q1 ba q2)(*strict*)
   apply(clarsimp)
   apply(rule equal_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_to_equal_prod_to_edge)
       apply(rename_tac q1 ba q2)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac q1 ba q2)(*strict*)
      apply(force)
     apply(rename_tac q1 ba q2)(*strict*)
     apply(force)
    apply(rename_tac q1 ba q2)(*strict*)
    apply(force)
   apply(rename_tac q1 ba q2)(*strict*)
   apply(force)
  apply(rename_tac q1 b q2)(*strict*)
  apply(case_tac A2)
   apply(rename_tac q1 b q2 q ba)(*strict*)
   apply(clarsimp)
   apply(simp add: cropTol3l2_single_def)
   apply(subgoal_tac "X" for X)
    apply(rename_tac q1 b q2 q ba)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac q1 b q2 q ba e ea)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      ?x1.0="[]"
      and ?x2.0="[]"
      and ?v1.0="[]"
      and ?w1.0="a#t2"
      and ?v2.0="[]"
      and ?w2.0="a#t1"
      and n="(length \<pi>1)"
      and ?d2.0="d1"
      and ?d1.0="d2"
      and G="G"
      and G'="G'"
      in cfgLM_positions_remain_compatible_l2l3)
               apply(rename_tac q1 b q2 q ba e ea)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac q1 b q2 q ba e ea)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac q1 b q2 q ba e ea)(*strict*)
             apply(simp add: F2LR1inputx_def)
            apply(rename_tac q1 b q2 q ba e ea)(*strict*)
            apply(simp add: F2LR1inputx_def)
           apply(rename_tac q1 b q2 q ba e ea)(*strict*)
           apply(simp add: F2LR1inputx_def)
          apply(rename_tac q1 b q2 q ba e ea)(*strict*)
          apply(force)
         apply(rename_tac q1 b q2 q ba e ea)(*strict*)
         apply(force)
        apply(rename_tac q1 b q2 q ba e ea)(*strict*)
        apply(force)
       apply(rename_tac q1 b q2 q ba e ea)(*strict*)
       apply(force)
      apply(rename_tac q1 b q2 q ba e ea)(*strict*)
      apply(force)
     apply(rename_tac q1 b q2 q ba e ea)(*strict*)
     apply(force)
    apply(rename_tac q1 b q2 q ba e ea)(*strict*)
    apply(force)
   apply(rename_tac q1 b q2 q ba)(*strict*)
   apply(clarsimp)
   apply(rename_tac q2 q ba)(*strict*)
   apply(rule equal_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_to_equal_prod_to_edge)
       apply(rename_tac q2 q ba)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac q2 q ba)(*strict*)
      apply(force)
     apply(rename_tac q2 q ba)(*strict*)
     apply(force)
    apply(rename_tac q2 q ba)(*strict*)
    apply(force)
   apply(rename_tac q2 q ba)(*strict*)
   apply(force)
  apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
  apply(simp add: cropTol3l2_single_def)
  apply(subgoal_tac "X" for X)
   apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac
      ?x1.0="[]"
      and ?x2.0="[]"
      and ?v2.0="[]"
      and ?w2.0="a#t2"
      and ?v1.0="[]"
      and ?w1.0="a#t1"
      and n="(length \<pi>1)"
      and ?d1.0="d1"
      and ?d2.0="d2"
      in cfgLM_positions_remain_compatible_prime_prime)
                 apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
                 apply(simp add: F2LR1inputx_def)
                 apply(force)
                apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
                apply(simp add: F2LR1inputx_def)
                apply(force)
               apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
             apply(simp add: F2LR1inputx_def)
            apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
            apply(simp add: split_TSstructure_def)
           apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
           apply(force)
          apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
          apply(force)
         apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
         apply(force)
        apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
        apply(force)
       apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
       apply(force)
      apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
      apply(force)
     apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
     apply(force)
    apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
    apply(force)
   apply(rename_tac q1 b q2 q1a ba q2a e ea)(*strict*)
   apply(force)
  apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
  apply(rule equal_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_to_equal_prod_to_edge)
      apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(force)
     apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
     apply(force)
    apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
    apply(force)
   apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
   apply(force)
  apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
  apply(force)
  done

lemmas prod_sets =
  F_SDPDA_TO_CFG_STD__edges_l3_read_def
  F_SDPDA_TO_CFG_STD__edges_l2_read_def
  F_SDPDA_TO_CFG_STD__edges_l3_pop_def
  F_SDPDA_TO_CFG_STD__edges_l3_push_def
  F_SDPDA_TO_CFG_STD__edges_l2_push_def
  F_SDPDA_TO_CFG_STD__edges_l2_final_def

lemma F_SDPDA_TO_CFG_STD__only_l3_nonterminals_preserved: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf=liftB w1@liftA v1\<rparr> \<pi> \<lparr>cfg_conf=liftB w2@liftA v2\<rparr>
  \<Longrightarrow> only_l3_nonterminals v1
  \<Longrightarrow> only_l3_nonterminals v2"
  apply(induct \<pi> arbitrary: w2 v2 rule: rev_induct)
   apply(rename_tac w2 v2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(subgoal_tac "w2=w1")
    apply(rename_tac w2 v2)(*strict*)
    apply(clarsimp)
    apply(rename_tac v2)(*strict*)
    apply(subgoal_tac "v2=v1")
     apply(rename_tac v2)(*strict*)
     apply(clarsimp)
    apply(rename_tac v2)(*strict*)
    apply(rule liftA_inj)
    apply(force)
   apply(rename_tac w2 v2)(*strict*)
   apply (metis liftB_liftA_inj1)
  apply(rename_tac x xs w2 v2)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d (length xs) = Some (pair e1 c1) \<and> SSd (Suc (SSn)) = Some (pair (Some e2) c2) \<and> cfgLM_step_relation G c1 e2 c2" for SSd SSn)
   apply(rename_tac x xs w2 v2)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac x xs w2 v2 e)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac
      m="length (xs@[x])"
      in cfgLM.step_detail_before_some_position)
     apply(rename_tac x xs w2 v2 e)(*strict*)
     apply(force)
    apply(rename_tac x xs w2 v2 e)(*strict*)
    apply(force)
   apply(rename_tac x xs w2 v2 e)(*strict*)
   apply(force)
  apply(rename_tac x xs w2 v2)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
  apply(erule_tac
      x="d"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = liftB w1 @ liftA v1\<rparr>"
      in allE)
  apply(erule_tac
      x="xs"
      in allE)
  apply(erule_tac
      x="c1"
      in allE)
  apply(erule impE)
   apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc 0"
      and v="[Some x]"
      in get_labels_drop_tail)
    apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
    apply(force)
   apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
   apply(force)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
  apply(erule impE)
   apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
   apply(rule_tac
      x="w1"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="v1"
      in exI)
   apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2 w1a w2a)(*strict*)
  apply(case_tac c1)
  apply(rename_tac x xs w2 v2 e1 e2 c1 c2 w1a w2a cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
  apply(erule_tac
      x="w1a"
      in meta_allE)
  apply(erule_tac
      x="w2a"
      in meta_allE)
  apply(erule meta_impE)
   apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc 0"
      and v="[Some x]"
      in get_labels_drop_tail)
    apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
    apply(force)
   apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
   apply(force)
  apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
  apply(subgoal_tac "c2 = \<lparr>cfg_conf = liftB w2 @ liftA v2\<rparr>")
   apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
   prefer 2
   apply(simp add: cfgLM.trans_der_def)
  apply(rename_tac x xs w2 v2 e1 e2 c2 w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 v2 e1 e2 w1a w2a)(*strict*)
  apply(simp add: only_l3_nonterminals_def)
  apply(clarsimp)
  apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b xA)(*strict*)
  apply(case_tac xA)
   apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b xA q b)(*strict*)
   prefer 2
   apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b xA q1 b q2)(*strict*)
   apply(force)
  apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b xA q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b q b)(*strict*)
  apply(subgoal_tac "e2=x")
   apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b q b)(*strict*)
   prefer 2
   apply(rule_tac
      d="d"
      in cfgLM.trans_der_getLabel_at_pos)
       apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b q b)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b q b)(*strict*)
      apply(force)
     apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b q b)(*strict*)
     apply(force)
    apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b q b)(*strict*)
    apply(force)
   apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b q b)(*strict*)
   apply (metis nth_append_beyond)
  apply(rename_tac x xs w2 e1 e2 w1a w2a w1aa w2b q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
  apply(subgoal_tac "x \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
   apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
   prefer 2
   apply(simp add: F2LR1inputx_def cfgLM_step_relation_def F_SDPDA_TO_CFG_STD_def cfg_sub_def)
   apply(clarsimp)
   apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b l r)(*strict*)
   apply(blast)
  apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
  apply(subgoal_tac "\<exists>\<alpha> \<beta>. prod_rhs x = liftB \<alpha> @ liftA \<beta>")
   apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
   prefer 2
   apply(subgoal_tac "LR1ProdFormSimp G")
    apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
    prefer 2
    apply(simp add: split_TSstructure_def)
   apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
   apply(simp add: LR1ProdFormSimp_def)
   apply(erule_tac
      x="x"
      in ballE)
    apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
    prefer 2
    apply(simp add: cfgLM_step_relation_def)
   apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
   apply(erule_tac
      P="prod_rhs x = []"
      in disjE)
    apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(rule_tac
      x="[]"
      in exI)
    apply(force)
   apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
   apply(clarsimp)
   apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b ba A B)(*strict*)
   apply(erule_tac
      P="x = \<lparr>prod_lhs = A, prod_rhs = [teB ba, teA B]\<rparr>"
      in disjE)
    apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b ba A B)(*strict*)
    apply(rule_tac
      x="[ba]"
      in exI)
    apply(rule_tac
      x="[B]"
      in exI)
    apply(force)
   apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b ba A B)(*strict*)
   apply(erule_tac
      P="x = \<lparr>prod_lhs = A, prod_rhs = [teA B]\<rparr>"
      in disjE)
    apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b ba A B)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(rule_tac
      x="[B]"
      in exI)
    apply(force)
   apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b ba A B)(*strict*)
   apply(erule exE)+
   apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b ba A B C)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(rule_tac
      x="[B,C]"
      in exI)
   apply(force)
  apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b \<alpha> \<beta>)(*strict*)
  apply(case_tac x)
  apply(rename_tac x xs w2 e1 w1a w2a w1aa w2b q b \<alpha> \<beta> prod_lhs prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w2a w1aa w2b q b \<alpha> \<beta> prod_lhs)(*strict*)
  apply(rename_tac X)
  apply(rename_tac xs w2 e1 w1a w2a w1aa w2b q b \<alpha> \<beta> X)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def F_SDPDA_TO_CFG_STD__edges_l2_def cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w2a w1aa w2b q b \<alpha> \<beta> X l r)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac xs w2 e1 w1a w2a w1aa w2b q b \<alpha> \<beta> X l r)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac xs w2 e1 w1a w2a w1aa w2b q b \<alpha> \<beta> X l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w2a w1aa w2b q b \<alpha> \<beta> X r l')(*strict*)
  apply(subgoal_tac "w1a=l'")
   apply(rename_tac xs w2 e1 w1a w2a w1aa w2b q b \<alpha> \<beta> X r l')(*strict*)
   prefer 2
   apply (metis initial_liftB_strings_coincide)
  apply(rename_tac xs w2 e1 w1a w2a w1aa w2b q b \<alpha> \<beta> X r l')(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w2a w1a w2b q b \<alpha> \<beta> X r l')(*strict*)
  apply(case_tac w2a)
   apply(rename_tac xs w2 e1 w2a w1a w2b q b \<alpha> \<beta> X r l')(*strict*)
   apply(clarsimp)
  apply(rename_tac xs w2 e1 w2a w1a w2b q b \<alpha> \<beta> X r l' a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs w2 e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
  apply (simp only: liftA_commutes_over_concat)
  apply(clarsimp)
  apply(subgoal_tac "w2=l'@\<alpha>")
   apply(rename_tac xs w2 e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
   prefer 2
   apply (metis liftA.simps(2) liftA_commutes_over_concat liftB_commutes_over_concat append_assoc maxTermPrefix_drop_liftA maxTermPrefix_term_string)
  apply(rename_tac xs w2 e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
  apply (simp only: liftB_commutes_over_concat)
  apply(clarsimp)
  apply(thin_tac "setA (liftB l') = {}")
  apply(subgoal_tac "w1a@[cons_l2 q b]@w2b = \<beta>@list")
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
   prefer 2
   apply(rule liftA_inj)
   apply (simp only: liftA_commutes_over_concat)
   apply(force)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
  apply(thin_tac "liftA w1a @ teA (cons_l2   q b) # liftA w2b = liftA \<beta> @ liftA list")
  apply(erule disjE)+
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
   apply(case_tac "edge_event x")
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a)(*strict*)
   apply(clarsimp)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a qt)(*strict*)
   apply(case_tac "\<alpha>")
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a qt)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a qt)(*strict*)
    apply(case_tac \<beta>)
     apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a qt)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a qt aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a qt aa lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a qt lista)(*strict*)
   apply(case_tac \<beta>)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a qt lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b l' x a qt lista)(*strict*)
    apply(case_tac lista)
     apply(rename_tac xs e1 w1a w2b q b l' x a qt lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b l' x a qt lista aa list)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a qt lista aa listb)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b l' list x a qt lista aa listb)(*strict*)
   apply(case_tac lista)
    apply(rename_tac xs e1 w1a w2b q b l' list x a qt lista aa listb)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b l' list x a qt listb)(*strict*)
    apply(case_tac listb)
     apply(rename_tac xs e1 w1a w2b q b l' list x a qt listb)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 w1a w2b q b l' list x a qt)(*strict*)
     apply(case_tac w1a)
      apply(rename_tac xs e1 w1a w2b q b l' list x a qt)(*strict*)
      apply(clarsimp)
     apply(rename_tac xs e1 w1a w2b q b l' list x a qt aa lista)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 w2b q b l' x a qt lista)(*strict*)
     apply(erule_tac
      x="cons_l3 (edge_src x) (edge_pop x ! 0) qt # lista"
      and P="\<lambda>w1. \<forall> w2 xA. cons_l3 (edge_src x) (edge_pop x ! 0) qt # lista @ cons_l2 q b # w2b = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
     apply(rename_tac xs e1 w2b q b l' x a qt lista)(*strict*)
     apply(force)
    apply(rename_tac xs e1 w1a w2b q b l' list x a qt listb aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b l' list x a qt lista aa listb ab listc)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
  apply(erule disjE)+
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
   apply(case_tac "edge_push x")
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
    prefer 2
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
   apply(clarsimp)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x)(*strict*)
   apply(case_tac \<beta>)
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b \<alpha> l' x)(*strict*)
    apply(erule_tac
      x="cons_l3 (edge_src x) (edge_pop x ! 0) (edge_trg x) # w1a"
      and P="\<lambda>w1. \<forall>w2 xA. cons_l3 (edge_src x) (edge_pop x ! 0) (edge_trg x) # w1a @ cons_l2 q b # w2b = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
    apply(rename_tac xs e1 w1a w2b q b \<alpha> l' x)(*strict*)
    apply(clarsimp)
   apply(force)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
  apply(erule disjE)+
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
   apply(case_tac "edge_push x")
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista)(*strict*)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista)(*strict*)
    prefer 2
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista)(*strict*)
   apply(clarsimp)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a lista qs qt)(*strict*)
   apply(case_tac \<alpha>)
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a lista qs qt)(*strict*)
    prefer 2
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a lista qs qt aa listb)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a lista qs qt)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a lista qs qt)(*strict*)
   apply(case_tac \<beta>)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a lista qs qt)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a lista qs qt aa listb)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b l' list x a lista qs qt listb)(*strict*)
   apply(case_tac listb)
    apply(rename_tac xs e1 w1a w2b q b l' list x a lista qs qt listb)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b l' list x a lista qs qt listb aa listc)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b l' list x a lista qs qt listc)(*strict*)
   apply(case_tac listc)
    apply(rename_tac xs e1 w1a w2b q b l' list x a lista qs qt listc)(*strict*)
    prefer 2
    apply(rename_tac xs e1 w1a w2b q b l' list x a lista qs qt listc aa listb)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b l' list x a lista qs qt listc)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b l' list x a lista qs qt)(*strict*)
   apply(case_tac w1a)
    apply(rename_tac xs e1 w1a w2b q b l' list x a lista qs qt)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b l' list x a lista qs qt aa listb)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w2b q b l' list x a lista qs qt listb)(*strict*)
   apply(case_tac listb)
    apply(rename_tac xs e1 w2b q b l' list x a lista qs qt listb)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w2b q b l' list x a lista qs qt listb aa listc)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w2b q b l' x a lista qs qt listc)(*strict*)
   apply(erule_tac
      x="cons_l3 (edge_src x) (edge_pop x ! 0) qt # listc"
      and P="\<lambda>w1. \<forall>w2 xA. cons_l3 (edge_src x) (edge_pop x ! 0) qt # listc @ cons_l2 q b # w2b = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
   apply(rename_tac xs e1 w2b q b l' x a lista qs qt listc)(*strict*)
   apply(force)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
  apply(erule disjE)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
   apply(case_tac "edge_event x")
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a)(*strict*)
   apply(clarsimp)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a)(*strict*)
   apply(case_tac \<alpha>)
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a)(*strict*)
    apply(case_tac \<beta>)
     apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a aa lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a lista)(*strict*)
   apply(case_tac lista)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a)(*strict*)
    apply(case_tac \<beta>)
     apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a aa lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b l' list x a lista)(*strict*)
    apply(case_tac lista)
     apply(rename_tac xs e1 w1a w2b q b l' list x a lista)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 w1a w2b q b l' list x a)(*strict*)
     apply(case_tac w1a)
      apply(rename_tac xs e1 w1a w2b q b l' list x a)(*strict*)
      apply(clarsimp)
      apply(rename_tac xs e1 l' list x a)(*strict*)
      apply(erule_tac
      x="[]"
      and P="\<lambda>w1. \<forall> w2 xA. cons_l2 (edge_src x) (edge_pop x ! 0) # list = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
      apply(rename_tac xs e1 l' list x a)(*strict*)
      apply(clarsimp)
     apply(force)
    apply(rename_tac xs e1 w1a w2b q b l' list x a aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a lista aa listb)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
  apply(erule disjE)+
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
   apply(clarsimp)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list i A)(*strict*)
   apply(case_tac \<alpha>)
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list i A)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list i A)(*strict*)
    apply(case_tac \<beta>)
     apply(rename_tac xs e1 w1a w2b q b \<beta> l' list i A)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 w1a w2b q b l' i A)(*strict*)
     apply(erule_tac
      x="[]"
      and P="\<lambda>w1. \<forall>w2 xA. cons_l2 i A # w1a @ cons_l2 q b # w2b = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
     apply(rename_tac xs e1 w1a w2b q b l' i A)(*strict*)
     apply(clarsimp)
    apply(force)
   apply(rename_tac xs e1 w1a w2b q b \<beta> l' list i A a lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
  apply(case_tac "edge_push x")
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista)(*strict*)
   prefer 2
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista)(*strict*)
  apply(clarsimp)
  apply(simp add: prod_sets)
  apply(erule disjE)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a lista)(*strict*)
   apply(case_tac \<alpha>)
    apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a lista)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a lista)(*strict*)
    apply(case_tac \<beta>)
     apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b \<beta> l' list x a lista aa listb)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs e1 w1a w2b q b l' list x a lista listb)(*strict*)
    apply(case_tac listb)
     apply(rename_tac xs e1 w1a w2b q b l' list x a lista listb)(*strict*)
     apply(clarsimp)
     apply(rename_tac xs e1 w1a w2b q b l' list x a lista)(*strict*)
     apply(erule_tac
      x="[]"
      and P="\<lambda>w1. \<forall> w2 xA. cons_l2 (edge_src x) (edge_pop x ! 0) # list = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
     apply(rename_tac xs e1 w1a w2b q b l' list x a lista)(*strict*)
     apply(clarsimp)
    apply(force)
   apply(rename_tac xs e1 w1a w2b q b l' list x a lista listb aa listc)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> X l' list x a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a lista qs)(*strict*)
  apply(erule_tac
      x="[]"
      and P="\<lambda>w1. \<forall>w2 xA. cons_l2 (edge_src x) (edge_pop x ! 0) # list = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
  apply(rename_tac xs e1 w1a w2b q b \<alpha> \<beta> l' list x a lista qs)(*strict*)
  apply(force)
  done

lemma only_l3_nonterminals_or_l3_l2_separation_ALT_preserved: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf = liftB \<alpha>@liftA w\<rparr> \<pi> cn
  \<Longrightarrow> only_l3_nonterminals w \<or> l3_l2_separation_ALT w
  \<Longrightarrow> d n = Some (pair e \<lparr>cfg_conf=v\<rparr>)
  \<Longrightarrow> n\<le>length \<pi>
  \<Longrightarrow> w \<noteq> []
  \<Longrightarrow> \<exists>v1 v2. v=liftB v1@liftA v2
  \<and> (only_l3_nonterminals w\<longrightarrow>only_l3_nonterminals v2)
  \<and> (l3_l2_separation_ALT w\<longrightarrow>v2\<noteq>[]\<longrightarrow>l3_l2_separation_ALT v2)"
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(erule_tac
      x="d"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = liftB \<alpha>@liftA w\<rparr>"
      in allE)
  apply(erule_tac
      x="take n \<pi>"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf=v\<rparr>"
      in allE)
  apply(erule impE)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      t="min (length \<pi>) n"
      and s="n"
      in ssubst)
    apply(force)
   apply(clarsimp)
   apply(rename_tac ea)(*strict*)
   apply(rule_tac
      m="length \<pi>-n"
      and v="map Some (drop n \<pi>)"
      in get_labels_drop_tail)
    apply(rename_tac ea)(*strict*)
    apply(clarsimp)
    apply (metis List.map_append append_take_drop_id)
   apply(rename_tac ea)(*strict*)
   apply(force)
  apply(erule impE)
   apply(rule_tac
      x="\<alpha>"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="w"
      in exI)
   apply(clarsimp)
  apply(clarsimp)
  apply(rename_tac w1 w2)(*strict*)
  apply(rule_tac
      x="w1"
      in exI)
  apply(rule_tac
      x="w2"
      in exI)
  apply(clarsimp)
  apply(erule disjE)
   apply(rename_tac w1 w2)(*strict*)
   apply(clarsimp)
   apply(rule conjI)
    apply(rename_tac w1 w2)(*strict*)
    prefer 2
    apply(clarsimp)
    apply(subgoal_tac "False")
     apply(rename_tac w1 w2)(*strict*)
     apply(force)
    apply(rename_tac w1 w2)(*strict*)
    apply(simp add: only_l3_nonterminals_def l3_l2_separation_ALT_def)
    apply(case_tac w)
     apply(rename_tac w1 w2)(*strict*)
     apply(clarsimp)
    apply(rename_tac w1 w2 a list)(*strict*)
    apply(clarsimp)
    apply(rule_tac
      xs="list"
      in rev_cases)
     apply(rename_tac w1 w2 a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac w1 w2 a)(*strict*)
     apply(case_tac a)
      apply(rename_tac w1 w2 a q b)(*strict*)
      apply(clarsimp)
      apply(rename_tac w1 w2 q b)(*strict*)
      apply(erule_tac
      x="[]"
      in allE)
      apply(clarsimp)
     apply(force)
    apply(rename_tac w1 w2 a list ys y)(*strict*)
    apply(clarsimp)
    apply(rename_tac w1 w2 a ys y)(*strict*)
    apply(case_tac a)
     apply(rename_tac w1 w2 a ys y q b)(*strict*)
     apply(clarsimp)
    apply(rename_tac w1 w2 a ys y q1 b q2)(*strict*)
    apply(clarsimp)
    apply(rename_tac w1 w2 ys y q1 b q2)(*strict*)
    apply(case_tac y)
     apply(rename_tac w1 w2 ys y q1 b q2 q ba)(*strict*)
     prefer 2
     apply(rename_tac w1 w2 ys y q1 b q2 q1a ba q2a)(*strict*)
     apply(clarsimp)
    apply(rename_tac w1 w2 ys y q1 b q2 q ba)(*strict*)
    apply(clarsimp)
    apply(rename_tac w1 w2 ys q1 b q2 q ba)(*strict*)
    apply(erule_tac
      x="cons_l3 q1 b q2 # ys"
      in allE)
    apply(force)
   apply(rename_tac w1 w2)(*strict*)
   apply(rule_tac
      ?v1.0="w"
      and ?w1.0="\<alpha>"
      and d="d"
      and \<pi>="take n \<pi>"
      and ?w2.0="w1"
      and ?v2.0="w2"
      in F_SDPDA_TO_CFG_STD__only_l3_nonterminals_preserved)
      apply(rename_tac w1 w2)(*strict*)
      apply(force)
     apply(rename_tac w1 w2)(*strict*)
     apply(force)
    apply(rename_tac w1 w2)(*strict*)
    apply(simp add: cfgLM.trans_der_def)
    apply(rule_tac
      t="min (length \<pi>) n"
      and s="n"
      in ssubst)
     apply(rename_tac w1 w2)(*strict*)
     apply(force)
    apply(rename_tac w1 w2)(*strict*)
    apply(clarsimp)
    apply(rename_tac w1 w2 ea)(*strict*)
    apply(rule_tac
      m="length \<pi> - n "
      and v="map Some (drop n \<pi>)"
      in get_labels_drop_tail)
     apply(rename_tac w1 w2 ea)(*strict*)
     apply(rule_tac
      t="n + (length \<pi> - n)"
      and s="length \<pi>"
      in ssubst)
      apply(rename_tac w1 w2 ea)(*strict*)
      apply(force)
     apply(rename_tac w1 w2 ea)(*strict*)
     apply (metis map_append append_take_drop_id_hlp)
    apply(rename_tac w1 w2 ea)(*strict*)
    apply(force)
   apply(rename_tac w1 w2)(*strict*)
   apply(force)
  apply(rename_tac w1 w2)(*strict*)
  apply(clarsimp)
  apply(rule conjI)
   apply(rename_tac w1 w2)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "False")
    apply(rename_tac w1 w2)(*strict*)
    apply(force)
   apply(rename_tac w1 w2)(*strict*)
   apply(simp add: only_l3_nonterminals_def l3_l2_separation_ALT_def)
   apply(case_tac w)
    apply(rename_tac w1 w2)(*strict*)
    apply(clarsimp)
   apply(rename_tac w1 w2 a list)(*strict*)
   apply(rule_tac
      xs="w"
      in rev_cases)
    apply(rename_tac w1 w2 a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac w1 w2 a list ys y)(*strict*)
   apply(subgoal_tac "(\<forall>A\<in> set (butlast w). case A of cons_l2 q A \<Rightarrow> False | cons_l3 q1 b q2 \<Rightarrow> True) \<and> (case last w of cons_l2 qa b \<Rightarrow> True | cons_l3 q A q' \<Rightarrow> False)")
    apply(rename_tac w1 w2 a list ys y)(*strict*)
    prefer 2
    apply(case_tac w)
     apply(rename_tac w1 w2 a list ys y)(*strict*)
     apply(force)
    apply(rename_tac w1 w2 a list ys y aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac w1 w2 a list ys y)(*strict*)
   apply(thin_tac "w=a#list")
   apply(thin_tac "case w of [] \<Rightarrow> True | a # w' \<Rightarrow> (\<forall>A\<in> set (butlast w). case A of cons_l2 q A \<Rightarrow> False | cons_l3 q1 b q2 \<Rightarrow> True) \<and> (case last w of cons_l2 qa b \<Rightarrow> True | cons_l3 q A q' \<Rightarrow> False)")
   apply(rename_tac w1 w2 a list ys y)(*strict*)
   apply(clarsimp)
   apply(rename_tac w1 w2 ys y)(*strict*)
   apply(case_tac y)
    apply(rename_tac w1 w2 ys y q b)(*strict*)
    apply(clarsimp)
    apply(rename_tac w1 w2 ys q b)(*strict*)
    apply(erule_tac
      x="ys"
      in allE)
    apply(force)
   apply(rename_tac w1 w2 ys y q1 b q2)(*strict*)
   apply(clarsimp)
  apply(rename_tac w1 w2)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
   apply(rename_tac w1 w2)(*strict*)
   prefer 2
   apply(rule_tac
      ?w1.0="\<alpha>"
      and ?v1.0="w"
      and G="G"
      and G'="G'"
      and d="d"
      and \<pi>="take n \<pi>"
      in F_SDPDA_TO_CFG_STD__l3_l2_separation_ALT_preserved)
      apply(rename_tac w1 w2)(*strict*)
      apply(force)
     apply(rename_tac w1 w2)(*strict*)
     apply(force)
    apply(rename_tac w1 w2)(*strict*)
    apply(simp add: cfgLM.trans_der_def)
    apply(rule_tac
      t="min (length \<pi>) n"
      and s="n"
      in ssubst)
     apply(rename_tac w1 w2)(*strict*)
     apply(force)
    apply(rename_tac w1 w2)(*strict*)
    apply(clarsimp)
    apply(rename_tac w1 w2 ea)(*strict*)
    apply(rule conjI)
     apply(rename_tac w1 w2 ea)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac w1 w2 ea)(*strict*)
    apply(rule_tac
      m="length \<pi> - n "
      and v="map Some (drop n \<pi>)"
      in get_labels_drop_tail)
     apply(rename_tac w1 w2 ea)(*strict*)
     apply(rule_tac
      t="n + (length \<pi> - n)"
      and s="length \<pi>"
      in ssubst)
      apply(rename_tac w1 w2 ea)(*strict*)
      apply(force)
     apply(rename_tac w1 w2 ea)(*strict*)
     apply (metis map_append append_take_drop_id_hlp)
    apply(rename_tac w1 w2 ea)(*strict*)
    apply(force)
   apply(rename_tac w1 w2)(*strict*)
   apply(force)
  apply(rename_tac w1 w2)(*strict*)
  apply(force)
  done

lemma only_l3_nonterminals_butlast_preserved: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf = liftB \<alpha>@liftA w\<rparr> \<pi> cn
  \<Longrightarrow> only_l3_nonterminals (butlast w)
  \<Longrightarrow> d n = Some (pair e \<lparr>cfg_conf=v\<rparr>)
  \<Longrightarrow> n\<le>length \<pi>
  \<Longrightarrow> w \<noteq> []
  \<Longrightarrow> \<exists>v1 v2. v=liftB v1@liftA v2
  \<and> (only_l3_nonterminals (butlast v2))"
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule only_l3_nonterminals_or_l3_l2_separation_ALT_preserved)
         apply(force)
        apply(force)
       apply(force)
      apply(rule_tac
      xs="w"
      in rev_cases)
       apply(clarsimp)
      apply(rename_tac ys y)(*strict*)
      apply(clarsimp)
      apply(case_tac y)
       apply(rename_tac ys y q b)(*strict*)
       apply(clarsimp)
       apply(rename_tac ys q b)(*strict*)
       apply(subgoal_tac "l3_l2_separation_ALT (ys @ [cons_l2 q b])")
        apply(rename_tac ys q b)(*strict*)
        apply(force)
       apply(rename_tac ys q b)(*strict*)
       apply(rule only_l3_nonterminals_to_l3_l2_separation_ALT)
       apply(force)
      apply(rename_tac ys y q1 b q2)(*strict*)
      apply(clarsimp)
      apply(rename_tac ys q1 b q2)(*strict*)
      apply(thin_tac "\<not> l3_l2_separation_ALT (ys @ [cons_l3 q1 b q2])")
      apply(rule only_l3_nonterminals_append1)
      apply(force)
     apply(force)
    apply(force)
   apply(force)
  apply(clarsimp)
  apply(rename_tac v1 v2)(*strict*)
  apply(rule_tac
      x="v1"
      in exI)
  apply(rule_tac
      x="v2"
      in exI)
  apply(clarsimp)
  apply(rule_tac
      xs="w"
      in rev_cases)
   apply(rename_tac v1 v2)(*strict*)
   apply(clarsimp)
  apply(rename_tac v1 v2 ys y)(*strict*)
  apply(clarsimp)
  apply(case_tac y)
   apply(rename_tac v1 v2 ys y q b)(*strict*)
   apply(thin_tac "only_l3_nonterminals (ys @ [y]) \<longrightarrow> only_l3_nonterminals v2")
   apply(clarsimp)
   apply(rename_tac v1 v2 ys q b)(*strict*)
   apply(erule impE)
    apply(rename_tac v1 v2 ys q b)(*strict*)
    apply(rule only_l3_nonterminals_to_l3_l2_separation_ALT)
    apply(force)
   apply(rename_tac v1 v2 ys q b)(*strict*)
   apply(case_tac "v2=[]")
    apply(rename_tac v1 v2 ys q b)(*strict*)
    apply(clarsimp)
    apply(rename_tac v1 ys q b)(*strict*)
    apply(simp add: only_l3_nonterminals_def)
   apply(rename_tac v1 v2 ys q b)(*strict*)
   apply(clarsimp)
   apply(rule l3_l2_separation_ALT_to_only_l3_nonterminals)
   apply(force)
  apply(rename_tac v1 v2 ys y q1 b q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac v1 v2 ys q1 b q2)(*strict*)
  apply(thin_tac "l3_l2_separation_ALT (ys @ [cons_l3 q1 b q2]) \<longrightarrow> v2 \<noteq> [] \<longrightarrow> l3_l2_separation_ALT v2")
  apply(erule impE)
   apply(rename_tac v1 v2 ys q1 b q2)(*strict*)
   apply(rule only_l3_nonterminals_append1)
   apply(force)
  apply(rename_tac v1 v2 ys q1 b q2)(*strict*)
  apply(rule only_l3_nonterminals_butlast)
  apply(clarsimp)
  done

lemma nonfinal_prod_to_edge_to_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_equality: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> p1 \<in> cfg_productions G
  \<Longrightarrow> p2 \<in> cfg_productions G
  \<Longrightarrow> prod_to_edge G' p1 = prod_to_edge G' p2
  \<Longrightarrow> prod_rhs p1 = [] \<longrightarrow> isl3 (prod_lhs p1)
  \<Longrightarrow> prod_rhs p2 = [] \<longrightarrow> isl3 (prod_lhs p2)
  \<Longrightarrow> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 = F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2"
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      p="p1"
      in unique_edge_exists_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_enhanced)
     apply(force)
    apply(force)
   apply(force)
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      p="p2"
      in unique_edge_exists_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_enhanced)
     apply(force)
    apply(force)
   apply(force)
  apply(clarsimp)
  apply(rename_tac x xa)(*strict*)
  apply(simp add: prod_to_edge_def)
  apply(subgoal_tac "x=xa \<and> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 = F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2")
   apply(rename_tac x xa)(*strict*)
   prefer 2
   apply(subgoal_tac "F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 = {x}")
    apply(rename_tac x xa)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac x xa)(*strict*)
   apply(subgoal_tac "F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2 = {xa}")
    apply(rename_tac x xa)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac x xa)(*strict*)
   apply(subgoal_tac "(THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1) = x")
    apply(rename_tac x xa)(*strict*)
    prefer 2
    apply(rule theI2_prime_prime)
      apply(rename_tac x xa)(*strict*)
      prefer 3
      apply(rename_tac x xa xb)(*strict*)
      apply(erule_tac x="xb" and P="\<lambda>y. \<forall>y'. y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> y' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> y = y'"in allE)
      apply(erule_tac
      x="x"
      and P="\<lambda>x. xb \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> x \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> xb = x"
      in allE)
      apply(force)
     apply(rename_tac x xa)(*strict*)
     apply(rule_tac
      x="x"
      in exI)
     apply(force)
    apply(rename_tac x xa xb y)(*strict*)
    apply(erule_tac x="xb" and P="\<lambda>y. \<forall>y'. y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> y' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> y = y'"in allE)
    apply(erule_tac
      x="x"
      and P="\<lambda>x. xb \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> x \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> xb = x"
      in allE)
    apply(force)
   apply(rename_tac x xa)(*strict*)
   apply(subgoal_tac "(THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2) = xa")
    apply(rename_tac x xa)(*strict*)
    prefer 2
    apply(rule theI2_prime_prime)
      apply(rename_tac x xa)(*strict*)
      prefer 3
      apply(rename_tac x xa xb)(*strict*)
      apply(erule_tac x="xb" and P="\<lambda>y. \<forall>y'. y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> y' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> y = y'"in allE)
      apply(erule_tac
      x="xa"
      and P="\<lambda>xa. xb \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> xa \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> xb = xa"
      in allE)
      apply(force)
     apply(rename_tac x xa)(*strict*)
     apply(rule_tac
      x="xa"
      in exI)
     apply(force)
    apply(rename_tac x xa xb y)(*strict*)
    apply(erule_tac x="xb" and P="\<lambda>y. \<forall>y'. y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> y' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> y = y'"in allE)
    apply(erule_tac
      x="xa"
      and P="\<lambda>xa. xb \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> xa \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> xb = xa"
      in allE)
    apply(force)
   apply(rename_tac x xa)(*strict*)
   apply(force)
  apply(rename_tac x xa)(*strict*)
  apply(force)
  done

lemma nonfinal_prod_to_edge_to_special_production_set: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> p1 \<in> cfg_productions G
  \<Longrightarrow> p2 \<in> cfg_productions G
  \<Longrightarrow> prod_to_edge G' p1 = prod_to_edge G' p2
  \<Longrightarrow> prod_rhs p1 = [] \<longrightarrow> isl3 (prod_lhs p1)
  \<Longrightarrow> prod_rhs p2 = [] \<longrightarrow> isl3 (prod_lhs p2)
  \<Longrightarrow> (\<exists>x\<in> epda_delta G'.
         edge_event x \<noteq> None \<and>
         (p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states G') \<or>
          p1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_read x) \<and>
         (p2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states G') \<or>
          p2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_read x) \<or>
         edge_event x = None \<and>
         edge_push x = [] \<and> p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop x \<and> p2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_pop x \<or>
         edge_event x = None \<and>
         edge_push x \<noteq> [] \<and>
         (p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or>
          p1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G')) \<and>
         (p2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or>
          p2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G'))) \<or>
     p1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G') \<and>
     p2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_final (epda_marking G') (epda_gamma G')"
  apply(rule_tac
      G="G'"
      and ?e1.0="p1"
      and ?e2.0="p2"
      in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_equal_then_from_special_sets)
        apply(simp add: F2LR1inputx_def)
       apply(simp add: F2LR1inputx_def)
       apply(force)
      apply(simp add: F2LR1inputx_def)
     apply(simp add: F2LR1inputx_def)
    apply(rule nonfinal_prod_to_edge_to_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_equality)
          apply(force)
         apply(force)
        apply(force)
       apply(force)
      apply(force)
     apply(force)
    apply(force)
   apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
   apply(force)
  apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
  apply(force)
  done

lemma cfgLMMIP_decompose_into_trans_der_and_cfgLMMIP: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLMMIP G d (liftB \<alpha>'@liftA(w@[A])) \<pi> (liftB(\<alpha>'@\<alpha>@[b])) (liftA v)
  \<Longrightarrow> \<exists>\<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2. \<pi>1@\<pi>2=\<pi> \<and> \<alpha>1@\<alpha>2=\<alpha> \<and> cfgLM.trans_der G d1 \<lparr>cfg_conf=liftA w\<rparr> \<pi>1 \<lparr>cfg_conf=liftB \<alpha>1\<rparr> \<and> cfgLMMIP G d2 [teA A] \<pi>2 (liftB(\<alpha>2@[b])) (liftA v)"
  apply(induct \<pi> arbitrary: d w A \<alpha>' \<alpha> v)
   apply(rename_tac d w A \<alpha>' \<alpha> v)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLMMIP_def)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply (simp only: liftA_commutes_over_concat liftB_commutes_over_concat)
   apply(clarsimp)
   apply(case_tac "\<alpha>")
    apply(rename_tac d w A \<alpha>' \<alpha> v)(*strict*)
    apply(clarsimp)
    apply(rename_tac d w A \<alpha>' v)(*strict*)
    apply(case_tac w)
     apply(rename_tac d w A \<alpha>' v)(*strict*)
     apply(clarsimp)
    apply(rename_tac d w A \<alpha>' v a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d w A \<alpha>' \<alpha> v a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d w A \<alpha>' v a list)(*strict*)
   apply(case_tac w)
    apply(rename_tac d w A \<alpha>' v a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d w A \<alpha>' v a list aa lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac a \<pi> d w A \<alpha>' \<alpha> v)(*strict*)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def cfgLMMIP_def)
   apply(erule conjE)+
   apply(erule exE)+
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e)(*strict*)
   apply(erule conjE)+
   apply(fold cfgLM.trans_der_def cfgLMMIP_def)
   apply(rule_tac
      n="0"
      and m="length (p#\<pi>)"
      and d="d"
      in cfgLM.step_detail_before_some_position)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e)(*strict*)
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e)(*strict*)
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e)(*strict*)
   apply(force)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v)(*strict*)
  apply(clarsimp)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c1 c2)(*strict*)
  apply(subgoal_tac "c1=\<lparr>cfg_conf=liftB \<alpha>'@liftA (w @ [A])\<rparr>")
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c1 c2)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def cfgLMMIP_def)
   apply(erule conjE)+
   apply(erule exE)+
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c1 c2 e)(*strict*)
   apply(erule conjE)+
   apply(fold cfgLM.trans_der_def cfgLMMIP_def)
   apply(clarsimp)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c1 c2)(*strict*)
  apply(clarsimp)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c2)(*strict*)
  apply(subgoal_tac "e2=p")
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c2)(*strict*)
   prefer 2
   apply(unfold cfgLMMIP_def)
   apply(erule conjE)+
   apply(fold cfgLMMIP_def)
   apply(rule_tac
      d="d"
      in cfgLM.trans_der_getLabel_at_pos)
       apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c2)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c2)(*strict*)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c2)(*strict*)
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c2)(*strict*)
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c2)(*strict*)
   apply(force)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 e2 c2)(*strict*)
  apply(clarsimp)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
  apply(case_tac "\<pi>=[]")
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
   apply(clarsimp)
   apply(rename_tac p d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
   apply(thin_tac "\<And>d w A \<alpha>' \<alpha> v. cfgLMMIP G d (liftB \<alpha>' @ liftA (w @ [A])) [] (liftB (\<alpha>' @ \<alpha> @ [b])) (liftA v) \<Longrightarrow> \<exists>\<alpha>1 \<alpha>2. \<alpha>1 @ \<alpha>2 = \<alpha> \<and> (\<exists>d1. cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w\<rparr> [] \<lparr>cfg_conf = liftB \<alpha>1\<rparr>) \<and> (\<exists>d2. cfgLMMIP G d2 [teA A] [] (liftB (\<alpha>2 @ [b])) (liftA v))")
   apply(rename_tac p d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
   apply(subgoal_tac "c2 = \<lparr>cfg_conf=(liftB (\<alpha>' @ \<alpha> @ [b]))@ (liftA v)\<rparr>")
    apply(rename_tac p d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
    prefer 2
    apply(simp add: cfgLMMIP_def cfgLM.trans_der_def)
   apply(rename_tac p d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
   apply(clarsimp)
   apply(rename_tac p d w A \<alpha>' \<alpha> v e1)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac p d w A \<alpha>' \<alpha> v e1 l r)(*strict*)
   apply(subgoal_tac "\<exists>l'. liftB l' = l")
    apply(rename_tac p d w A \<alpha>' \<alpha> v e1 l r)(*strict*)
    prefer 2
    apply(rule_tac
      x="filterB l"
      in exI)
    apply (rule liftBDeConv2)
    apply (metis setA_liftB_substring liftB_commutes_over_concat)
   apply(rename_tac p d w A \<alpha>' \<alpha> v e1 l r)(*strict*)
   apply(clarsimp)
   apply(rename_tac p d w A \<alpha>' \<alpha> v e1 r l')(*strict*)
   apply(thin_tac "setA (liftB l') = {}")
   apply(subgoal_tac "\<alpha>'=l'")
    apply(rename_tac p d w A \<alpha>' \<alpha> v e1 r l')(*strict*)
    prefer 2
    apply (metis initial_liftB_strings_coincide)
   apply(rename_tac p d w A \<alpha>' \<alpha> v e1 r l')(*strict*)
   apply(clarsimp)
   apply(rename_tac p d w A \<alpha> v e1 r l')(*strict*)
   apply (simp add: liftB_commutes_over_concat)
   apply (simp add: liftA_commutes_over_concat)
   apply(case_tac p)
   apply(rename_tac p d w A \<alpha> v e1 r l' prod_lhsa prod_rhsa)(*strict*)
   apply(rename_tac X r)
   apply(rename_tac p d w A \<alpha> v e1 ra l' X r)(*strict*)
   apply(clarsimp)
   apply(rename_tac d w A \<alpha> v e1 ra l' X r)(*strict*)
   apply(case_tac w)
    apply(rename_tac d w A \<alpha> v e1 ra l' X r)(*strict*)
    apply(clarsimp)
    apply(rename_tac d \<alpha> v e1 l' X)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(clarsimp)
    apply(rule_tac
      x="[]"
      in exI)
    apply(clarsimp)
    apply(rule conjI)
     apply(rename_tac d \<alpha> v e1 l' X)(*strict*)
     apply(rule_tac
      x="der1 \<lparr>cfg_conf = []\<rparr>"
      in exI)
     apply(rule cfgLM_trans_der_der1)
      apply(rename_tac d \<alpha> v e1 l' X)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac d \<alpha> v e1 l' X)(*strict*)
     apply(simp add: cfg_configurations_def)
    apply(rename_tac d \<alpha> v e1 l' X)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac d \<alpha> v e1 l' X)(*strict*)
     prefer 2
     apply(rule_tac
      \<beta>="\<alpha> @ [b]"
      and ?w1.0="[teA X]"
      and d="d"
      and v="v"
      and \<alpha>="l'"
      in cfgLMMIP_drop_leading_liftB)
      apply(rename_tac d \<alpha> v e1 l' X)(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(force)
     apply(rename_tac d \<alpha> v e1 l' X)(*strict*)
     apply (simp add: liftB_commutes_over_concat)
    apply(rename_tac d \<alpha> v e1 l' X)(*strict*)
    apply(clarsimp)
    apply(rename_tac d \<alpha> v e1 l' X aa)(*strict*)
    apply(rename_tac dd)
    apply(rename_tac d \<alpha> v e1 l' X dd)(*strict*)
    apply(rule_tac
      x="dd"
      in exI)
    apply (simp add: liftB_commutes_over_concat)
   apply(rename_tac d w A \<alpha> v e1 ra l' X r a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d A \<alpha> v e1 l' X r list)(*strict*)
   apply(rename_tac w)
   apply(rename_tac d A \<alpha> v e1 l' X r w)(*strict*)
   apply(subgoal_tac "LR1ProdFormSimp G")
    apply(rename_tac d A \<alpha> v e1 l' X r w)(*strict*)
    prefer 2
    apply(simp add: split_TSstructure_def)
   apply(rename_tac d A \<alpha> v e1 l' X r w)(*strict*)
   apply(simp add: LR1ProdFormSimp_def)
   apply(erule_tac
      x="\<lparr>prod_lhs = X, prod_rhs = r\<rparr>"
      in ballE)
    apply(rename_tac d A \<alpha> v e1 l' X r w)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac d A \<alpha> v e1 l' X r w)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(erule disjE)
    apply(rename_tac d A \<alpha> v e1 l' X r w)(*strict*)
    apply(clarsimp)
    apply(rename_tac d A \<alpha> v e1 l' X w)(*strict*)
    apply(case_tac "\<alpha>")
     apply(rename_tac d A \<alpha> v e1 l' X w)(*strict*)
     prefer 2
     apply(rename_tac d A \<alpha> v e1 l' X w a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac d A v e1 l' X w a list)(*strict*)
     apply(case_tac w)
      apply(rename_tac d A v e1 l' X w a list)(*strict*)
      apply(clarsimp)
     apply(rename_tac d A v e1 l' X w a list aa lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac d A \<alpha> v e1 l' X w)(*strict*)
    apply(clarsimp)
    apply(rename_tac d A v e1 l' X w)(*strict*)
    apply(case_tac w)
     apply(rename_tac d A v e1 l' X w)(*strict*)
     apply(clarsimp)
    apply(rename_tac d A v e1 l' X w a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d A \<alpha> v e1 l' X r w)(*strict*)
   apply(clarsimp)
   apply(rename_tac d A \<alpha> v e1 l' X r w ba Aa B)(*strict*)
   apply(erule disjE)
    apply(rename_tac d A \<alpha> v e1 l' X r w ba Aa B)(*strict*)
    apply(clarsimp)
    apply(rename_tac d A \<alpha> v e1 l' w ba Aa B)(*strict*)
    apply(case_tac "\<alpha>")
     apply(rename_tac d A \<alpha> v e1 l' w ba Aa B)(*strict*)
     prefer 2
     apply(rename_tac d A \<alpha> v e1 l' w ba Aa B a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac d A v e1 l' w ba Aa B list)(*strict*)
     apply(case_tac list)
      apply(rename_tac d A v e1 l' w ba Aa B list)(*strict*)
      apply(clarsimp)
     apply(rename_tac d A v e1 l' w ba Aa B list a lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac d A \<alpha> v e1 l' w ba Aa B)(*strict*)
    apply(clarsimp)
    apply(rename_tac d A v e1 l' w Aa B)(*strict*)
    apply(case_tac v)
     apply(rename_tac d A v e1 l' w Aa B)(*strict*)
     apply(clarsimp)
    apply(rename_tac d A v e1 l' w Aa B a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac d A e1 l' w Aa B list)(*strict*)
    apply(subgoal_tac "list=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
     apply(rename_tac d A e1 l' w Aa B list)(*strict*)
     prefer 2
     apply(rule case_list)
    apply(rename_tac d A e1 l' w Aa B list)(*strict*)
    apply(erule disjE)
     apply(rename_tac d A e1 l' w Aa B list)(*strict*)
     apply(clarsimp)
    apply(rename_tac d A e1 l' w Aa B list)(*strict*)
    apply(clarsimp)
    apply(rename_tac d A e1 l' w Aa B w' a')(*strict*)
    apply (simp only: liftA_commutes_over_concat)
    apply(clarsimp)
    apply(rename_tac d A e1 l' w Aa B w')(*strict*)
    apply(subgoal_tac "w'=w")
     apply(rename_tac d A e1 l' w Aa B w')(*strict*)
     apply(clarsimp)
     apply(rename_tac d A e1 l' w Aa B)(*strict*)
     apply(simp add: cfgLMMIP_def)
     apply(clarsimp)
     apply(simp add: cfgLMMIyX_def)
     apply(subgoal_tac "butlast (liftB l' @ teA Aa # liftA w @ [teA A]) = SSX" for SSX)
      apply(rename_tac d A e1 l' w Aa B)(*strict*)
      prefer 2
      apply(rule butlast_direct)
      apply(force)
     apply(rename_tac d A e1 l' w Aa B)(*strict*)
     apply(clarsimp)
     apply(simp add: applicable_def)
     apply(erule_tac
      x="der2 \<lparr>cfg_conf = liftB l' @ teA Aa # liftA w\<rparr> \<lparr>prod_lhs = Aa, prod_rhs = [teB b, teA B]\<rparr> \<lparr>cfg_conf = liftB l' @ [teB b, teA B] @ liftA w\<rparr> "
      in allE)
     apply(rename_tac d A e1 l' w Aa B)(*strict*)
     apply(erule_tac
      x="\<lparr>cfg_conf = liftB l' @ [teB b, teA B] @ liftA w\<rparr>"
      in allE)
     apply(clarsimp)
     apply(subgoal_tac "cfgLM.trans_der G (der2 \<lparr>cfg_conf = liftB l' @ teA Aa # liftA w\<rparr> \<lparr>prod_lhs = Aa, prod_rhs = [teB b, teA B]\<rparr> \<lparr>cfg_conf = liftB l' @ teB b # teA B # liftA w\<rparr>) \<lparr>cfg_conf = liftB l' @ teA Aa # liftA w\<rparr> [\<lparr>prod_lhs = Aa, prod_rhs = [teB b, teA B]\<rparr>] \<lparr>cfg_conf = liftB l' @ teB b # teA B # liftA w\<rparr>")
      apply(rename_tac d A e1 l' w Aa B)(*strict*)
      apply(force)
     apply(rename_tac d A e1 l' w Aa B)(*strict*)
     apply(rule cfgLM.trans_der_der2)
       apply(rename_tac d A e1 l' w Aa B)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac d A e1 l' w Aa B)(*strict*)
      apply(subgoal_tac "\<lparr>cfg_conf = liftB l' @ teA Aa # liftA w @ [teA A]\<rparr> \<in> cfg_configurations G")
       apply(rename_tac d A e1 l' w Aa B)(*strict*)
       prefer 2
       apply(unfold cfgLM.trans_der_def)
       apply(erule exE)+
       apply(rename_tac d A e1 l' w Aa B e)(*strict*)
       apply(fold cfgLM.trans_der_def)
       apply(rule_tac
      d="d"
      in cfgLM.belongs_configurations)
        apply(rename_tac d A e1 l' w Aa B e)(*strict*)
        apply(simp add: cfgLM.trans_der_def)
       apply(rename_tac d A e1 l' w Aa B e)(*strict*)
       apply(force)
      apply(rename_tac d A e1 l' w Aa B)(*strict*)
      apply(simp add: cfg_configurations_def)
      apply(simp add: setBConcat)
      apply(simp add: setB_liftA)
      apply(simp add: setAConcat)
     apply(rename_tac d A e1 l' w Aa B)(*strict*)
     apply(simp add: cfgLM_step_relation_def)
     apply(rule_tac
      x="liftB l'"
      in exI)
     apply(clarsimp)
     apply(simp add: setA_liftB)
    apply(rename_tac d A e1 l' w Aa B w')(*strict*)
    apply(rule liftA_inj)
    apply(force)
   apply(rename_tac d A \<alpha> v e1 l' X r w ba Aa B)(*strict*)
   apply(erule disjE)
    apply(rename_tac d A \<alpha> v e1 l' X r w ba Aa B)(*strict*)
    apply(clarsimp)
    apply(rename_tac d A \<alpha> v e1 l' w Aa B)(*strict*)
    apply(case_tac "\<alpha>")
     apply(rename_tac d A \<alpha> v e1 l' w Aa B)(*strict*)
     prefer 2
     apply(rename_tac d A \<alpha> v e1 l' w Aa B a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac d A \<alpha> v e1 l' w Aa B)(*strict*)
    apply(clarsimp)
   apply(rename_tac d A \<alpha> v e1 l' X r w ba Aa B)(*strict*)
   apply(clarsimp)
   apply(rename_tac d A \<alpha> v e1 l' w Aa B C)(*strict*)
   apply(case_tac "\<alpha>")
    apply(rename_tac d A \<alpha> v e1 l' w Aa B C)(*strict*)
    prefer 2
    apply(rename_tac d A \<alpha> v e1 l' w Aa B C a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d A \<alpha> v e1 l' w Aa B C)(*strict*)
   apply(clarsimp)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
  apply(case_tac "setA (cfg_conf c2) = {}")
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def cfgLMMIP_def)
    apply(erule conjE)+
    apply(erule exE)+
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2 e)(*strict*)
    apply(erule conjE)+
    apply(fold cfgLM.trans_der_def cfgLMMIP_def)
    apply(rule_tac
      n="Suc 0"
      and m="length (p#\<pi>)"
      and d="d"
      in cfgLM.step_detail_before_some_position)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2 e)(*strict*)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2 e)(*strict*)
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2 e)(*strict*)
    apply(case_tac "\<pi>")
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2 e)(*strict*)
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2 e a list)(*strict*)
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2 e2 c2a)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2 e2 c2a l r la ra)(*strict*)
   apply(simp add: setAConcat)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
  apply(subgoal_tac "\<exists>\<alpha>'' w' x'. c2=\<lparr>cfg_conf=liftB (\<alpha>'@\<alpha>'')@liftA (w' @ [x'])\<rparr>")
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
   prefer 2
   apply(subgoal_tac "LR1ProdFormSimp G")
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
    prefer 2
    apply(simp add: split_TSstructure_def)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
   apply(simp add: LR1ProdFormSimp_def)
   apply(erule_tac
      x="p"
      in ballE)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
    prefer 2
    apply(simp add: cfgLM_step_relation_def)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2 l r)(*strict*)
   apply(case_tac c2)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2 l r cfg_confa)(*strict*)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 l r)(*strict*)
   apply(subgoal_tac "\<exists>l'. liftB l' = l")
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 l r)(*strict*)
    prefer 2
    apply(rule_tac
      x="filterB l"
      in exI)
    apply (rule liftBDeConv2)
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 l r)(*strict*)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 r l')(*strict*)
   apply(thin_tac "setA (liftB l') = {}")
   apply(subgoal_tac "\<alpha>'=l'")
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 r l')(*strict*)
    prefer 2
    apply(rule liftB_prefixes_coincide)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 r l')(*strict*)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 r l')(*strict*)
     apply(rule disjI1)
     apply(simp add: setB_liftA)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 r l')(*strict*)
    apply(rule disjI2)
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 r l')(*strict*)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha> v e1 r l')(*strict*)
   apply(case_tac p)
   apply(rename_tac p \<pi> d w A \<alpha> v e1 r l' prod_lhsa prod_rhsa)(*strict*)
   apply(rename_tac X r)
   apply(rename_tac p \<pi> d w A \<alpha> v e1 ra l' X r)(*strict*)
   apply(erule disjE)
    apply(rename_tac p \<pi> d w A \<alpha> v e1 ra l' X r)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' X)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(clarsimp)
    apply(case_tac w)
     apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' X)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<pi> d \<alpha> v e1 l' X)(*strict*)
     apply(simp add: setA_liftB)
    apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' X a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi> d A \<alpha> v e1 l' X list)(*strict*)
    apply(rename_tac w)
    apply(rename_tac \<pi> d A \<alpha> v e1 l' X w)(*strict*)
    apply(thin_tac "setA (liftB l' @ liftA (w @ [A])) \<noteq> {}")
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha> v e1 ra l' X r)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' X r ba Aa B)(*strict*)
   apply(thin_tac "setA (liftB l' @ r @ ra) \<noteq> {}")
   apply (simp add: liftA_commutes_over_concat)
   apply(erule disjE)
    apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' X r ba Aa B)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' ba Aa B)(*strict*)
    apply(case_tac w)
     apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' ba Aa B)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<pi> d \<alpha> v e1 l' ba Aa B)(*strict*)
     apply(rule_tac
      x="[ba]"
      in exI)
     apply (simp add: liftB_commutes_over_concat)
     apply(rule_tac
      x="[]"
      in exI)
     apply(force)
    apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' ba Aa B a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi> d A \<alpha> v e1 l' ba Aa B list)(*strict*)
    apply(rule_tac
      x="[ba]"
      in exI)
    apply (simp add: liftB_commutes_over_concat)
    apply(rule_tac
      x="B#list"
      in exI)
    apply(force)
   apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' X r ba Aa B)(*strict*)
   apply(erule disjE)
    apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' X r ba Aa B)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' Aa B)(*strict*)
    apply(case_tac w)
     apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' Aa B)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<pi> d \<alpha> v e1 l' Aa B)(*strict*)
     apply(rule_tac
      x="[]"
      in exI)
     apply (simp add: liftB_commutes_over_concat)
     apply(rule_tac
      x="[]"
      in exI)
     apply(force)
    apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' Aa B a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi> d A \<alpha> v e1 l' Aa B list)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply (simp add: liftB_commutes_over_concat)
    apply(rule_tac
      x="B#list"
      in exI)
    apply(force)
   apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' X r ba Aa B)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' Aa B C)(*strict*)
   apply(case_tac w)
    apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' Aa B C)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi> d \<alpha> v e1 l' Aa B C)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply (simp add: liftB_commutes_over_concat)
    apply(rule_tac
      x="[B]"
      in exI)
    apply(force)
   apply(rename_tac \<pi> d w A \<alpha> v e1 ra l' Aa B C a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi> d A \<alpha> v e1 l' Aa B C list)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply (simp add: liftB_commutes_over_concat)
   apply(rule_tac
      x="B#C#list"
      in exI)
   apply(force)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 c2)(*strict*)
  apply(clarsimp)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x')(*strict*)
  apply(thin_tac "setA (liftB (\<alpha>' @ \<alpha>'') @ liftA (w' @ [x'])) \<noteq> {}")
  apply(subgoal_tac "prefix \<alpha>'' \<alpha>")
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x')(*strict*)
   prefer 2
   apply(subgoal_tac "\<exists>w. cfg_get_history SSci @ w = cfg_get_history SScij" for SSci SScij)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x')(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def cfgLMMIP_def)
    apply(erule conjE)+
    apply(erule exE)+
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' e)(*strict*)
    apply(erule conjE)+
    apply(fold cfgLM.trans_der_def cfgLMMIP_def)
    apply(rule_tac
      d="d"
      and i="Suc 0"
      and j="length \<pi>"
      in cfgLM.derivation_monotonically_inc)
         apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' e)(*strict*)
         apply(simp add: split_TSstructure_def)
         apply(force)
        apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' e)(*strict*)
        apply(force)
       apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' e)(*strict*)
       apply(force)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' e)(*strict*)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' e)(*strict*)
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' e)(*strict*)
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x')(*strict*)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
   apply(simp add: cfg_get_history_def)
   apply(subgoal_tac "maxTermPrefix (liftB (\<alpha>' @ \<alpha>'') @ liftA (w' @ [x'])) = \<alpha>' @ \<alpha>''")
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
    apply(subgoal_tac "maxTermPrefix (liftB (\<alpha>' @ \<alpha> @ [b]) @ liftA v) = \<alpha>' @ \<alpha> @ [b]")
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
     apply(clarsimp)
     apply(subgoal_tac "strict_prefix \<alpha> \<alpha>'' \<or> SSX" for SSX)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
      prefer 2
      apply(rule mutual_strict_prefix_prefix)
      apply(rule sym)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
     apply(erule disjE)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
      prefer 2
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
     apply(subgoal_tac "False")
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
     apply(simp add: strict_prefix_def)
     apply(clarsimp)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x' wa c)(*strict*)
     apply(case_tac wa)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x' wa c)(*strict*)
      prefer 2
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x' wa c a list)(*strict*)
      apply(clarsimp)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x' c a list)(*strict*)
      apply(case_tac c)
       apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x' c a list)(*strict*)
       apply(clarsimp)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x' c a list aa lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x' wa c)(*strict*)
     apply(clarsimp)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x')(*strict*)
     apply(thin_tac "\<And>d w A \<alpha>' \<alpha> v. cfgLMMIP G d (liftB \<alpha>' @ liftA (w @ [A])) \<pi> (liftB (\<alpha>' @ \<alpha> @ [b])) (liftA v) \<Longrightarrow> \<exists>\<pi>1 \<pi>2. \<pi>1 @ \<pi>2 = \<pi> \<and> (\<exists>\<alpha>1 \<alpha>2. \<alpha>1 @ \<alpha>2 = \<alpha> \<and> (\<exists>d1. cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w\<rparr> \<pi>1 \<lparr>cfg_conf = liftB \<alpha>1\<rparr>) \<and> (\<exists>d2. cfgLMMIP G d2 [teA A] \<pi>2 (liftB (\<alpha>2 @ [b])) (liftA v)))")
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x')(*strict*)
     apply(simp add: cfgLMMIP_def cfgLMMPX_def)
     apply(clarsimp)
     apply(erule_tac
      x="[p]"
      in allE)
     apply(erule impE)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x')(*strict*)
      apply(simp add: strict_prefix_def)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x')(*strict*)
     apply(erule_tac
      x="d"
      in allE)
     apply(erule_tac
      x="liftA (w' @ [x'])"
      in allE)
     apply(subgoal_tac "cfgLM.trans_der G d \<lparr>cfg_conf = liftB \<alpha>' @ liftA (w @ [A])\<rparr> [p] \<lparr>cfg_conf = liftB (\<alpha>' @ \<alpha> @ [b]) @ liftA (w' @ [x'])\<rparr>")
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x')(*strict*)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 w' x')(*strict*)
     apply(simp add: cfgLM.trans_der_def)
     apply(clarsimp)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v w' x' e)(*strict*)
     apply(subgoal_tac "get_labels d (Suc 0) = [Some p]")
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v w' x' e)(*strict*)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v w' x' e)(*strict*)
     apply(rule_tac
      m="length \<pi>"
      and v="map Some \<pi>"
      in get_labels_drop_tail)
      apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v w' x' e)(*strict*)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v w' x' e)(*strict*)
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
    apply(thin_tac "maxTermPrefix (liftB (\<alpha>' @ \<alpha>'') @ liftA (w' @ [x'])) @ wa = maxTermPrefix (liftB (\<alpha>' @ \<alpha> @ [b]) @ liftA v)")
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
    apply(thin_tac "maxTermPrefix (liftB (\<alpha>' @ \<alpha>'') @ liftA (w' @ [x'])) = \<alpha>' @ \<alpha>''")
    apply(rule_tac
      t="maxTermPrefix (liftB (\<alpha>' @ \<alpha> @ [b]) @ liftA v)"
      in ssubst)
     apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
     apply(rule maxTermPrefix_shift)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
    apply(clarsimp)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x')(*strict*)
    apply(rule maxTermPrefix_liftA)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
   apply(rule_tac
      t="maxTermPrefix (liftB (\<alpha>' @ \<alpha>'') @ liftA (w' @ [x']))"
      in ssubst)
    apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
    apply(rule maxTermPrefix_shift)
   apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x' wa)(*strict*)
   apply(clarsimp)
   apply(rule maxTermPrefix_liftA)
  apply(rename_tac p \<pi> d w A \<alpha>' \<alpha> v e1 \<alpha>'' w' x')(*strict*)
  apply(simp add: prefix_def)
  apply(clarsimp)
  apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
   prefer 2
   apply(thin_tac "\<And>d w A \<alpha>' \<alpha> v. cfgLMMIP G d (liftB \<alpha>' @ liftA (w @ [A])) \<pi> (liftB (\<alpha>' @ \<alpha> @ [b])) (liftA v) \<Longrightarrow> \<exists>\<pi>1 \<pi>2. \<pi>1 @ \<pi>2 = \<pi> \<and> (\<exists>\<alpha>1 \<alpha>2. \<alpha>1 @ \<alpha>2 = \<alpha> \<and> (\<exists>d1. cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w\<rparr> \<pi>1 \<lparr>cfg_conf = liftB \<alpha>1\<rparr>) \<and> (\<exists>d2. cfgLMMIP G d2 [teA A] \<pi>2 (liftB (\<alpha>2 @ [b])) (liftA v)))")
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
   apply(rule_tac
      \<beta>="\<alpha>' @ \<alpha>''"
      and w="w' @ [x']"
      and \<pi>="\<pi>"
      and \<alpha>="\<alpha>' @ \<alpha>'' @ c @ [b]"
      and c="v"
      and G="G"
      and d="derivation_drop d (Suc 0)"
      in crop_cfgLMMP_to_cfgLMMIP)
     apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
   apply(simp add: cfgLMMP_def)
   apply(rule context_conjI)
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
    apply(simp add: cfgLMMIP_def)
    apply(subgoal_tac "X" for X)
     apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
     prefer 2
     apply(rule_tac
      d="d"
      and n="Suc 0"
      in cfgLM.trans_der_skip)
        apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
        apply(simp add: split_TSstructure_def)
        apply(force)
       apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
       apply(force)
      apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
   apply(simp add: cfgLMMIP_def)
   apply(simp add: cfgLMMPX_def)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
   apply(erule_tac
      x="p#\<pi>'"
      in allE)
   apply(erule impE)
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
    apply(simp add: strict_prefix_def)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
    prefer 2
    apply(rule_tac
      ?v1.0="[]"
      and ?v4.0="[]"
      and ?d1.0="der2 \<lparr>cfg_conf = liftB \<alpha>' @ liftA (w @ [A])\<rparr> p \<lparr>cfg_conf = liftB (\<alpha>' @ \<alpha>'') @ liftA (w' @ [x'])\<rparr> "
      and ?d2.0="da"
      in cfgLM_trans_der_concat_extend_prime)
      apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
    apply(clarsimp)
    apply(rule cfgLM.trans_der_der2)
      apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
     apply(rule_tac
      d="d"
      in cfgLM.belongs_configurations)
      apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
      apply(simp add: cfgLM.trans_der_def)
     apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c \<pi>' da ca)(*strict*)
   apply(clarsimp)
  apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c)(*strict*)
  apply(clarsimp)
  apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c w'a c' da)(*strict*)
  apply(subgoal_tac "w'a=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c w'a c' da)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c w'a c' da)(*strict*)
  apply(erule disjE)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c w'a c' da)(*strict*)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da)(*strict*)
   apply(simp add: cfgLMMIP_def)
   apply(clarsimp)
   apply(subgoal_tac "X" for X)
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def cfgLMMIP_def)
    apply(erule exE)+
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da e ea)(*strict*)
    apply(fold cfgLM.trans_der_def cfgLMMIP_def)
    apply(rule_tac
      n="0"
      and m="length (\<pi>)"
      and d="da"
      in cfgLM.step_detail_before_some_position)
      apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da e ea)(*strict*)
      apply(force)
     apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da e ea)(*strict*)
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da e ea)(*strict*)
    apply(case_tac \<pi>)
     apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da e ea)(*strict*)
     apply(force)
    apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da e ea a list)(*strict*)
    apply(force)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da)(*strict*)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da e1a e2 c1 c2)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac p \<pi> d w A \<alpha>' v \<alpha>'' w' x' c c' da e2 c2 l r la ra e ea)(*strict*)
   apply (rule_tac
      x="\<alpha>' @ \<alpha>''"
      in liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c w'a c' da)(*strict*)
  apply(clarsimp)
  apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da w'b a')(*strict*)
  apply(erule_tac
      x="da"
      in meta_allE)
  apply(erule_tac
      x="w'b"
      in meta_allE)
  apply(erule_tac
      x="a'"
      in meta_allE)
  apply(erule_tac
      x="\<alpha>'@\<alpha>''"
      in meta_allE)
  apply(erule_tac
      x="c"
      in meta_allE)
  apply(erule_tac
      x="c'"
      in meta_allE)
  apply(erule meta_impE)
   apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da w'b a')(*strict*)
   apply (simp add: liftB_commutes_over_concat)
  apply(rename_tac p \<pi> d w A \<alpha>' v e1 \<alpha>'' w' x' c c' da w'b a')(*strict*)
  apply(clarsimp)
  apply(rename_tac p d w A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2)(*strict*)
  apply(subgoal_tac "False")
   apply(rename_tac p d w A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2)(*strict*)
   apply(force)
  apply(rename_tac p d w A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2)(*strict*)
  apply(case_tac w)
   apply(rename_tac p d w A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2)(*strict*)
   apply(clarsimp)
   apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l r)(*strict*)
   apply(subgoal_tac "\<exists>l'. liftB l' = l")
    apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l r)(*strict*)
    prefer 2
    apply(rule_tac
      x="filterB l"
      in exI)
    apply (rule liftBDeConv2)
    apply (metis setA_liftB_substring liftB_commutes_over_concat)
   apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l r)(*strict*)
   apply(clarsimp)
   apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 r l')(*strict*)
   apply(thin_tac "setA (liftB l') = {}")
   apply(subgoal_tac "\<alpha>'=l'")
    apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 r l')(*strict*)
    prefer 2
    apply(rule liftB_prefixes_coincide)
      apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 r l')(*strict*)
      apply(force)
     apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 r l')(*strict*)
     apply(rule disjI1)
     apply(force)
    apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 r l')(*strict*)
    apply(rule disjI2)
    apply(force)
   apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 r l')(*strict*)
   apply(clarsimp)
   apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
   apply (simp add: liftB_commutes_over_concat)
   apply (simp add: liftA_commutes_over_concat)
   apply(erule_tac
      x="[]"
      in allE)
   apply(clarsimp)
   apply(erule_tac
      x="[]"
      in allE)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
    apply(erule_tac
      x="der1 \<lparr>cfg_conf = []\<rparr>"
      in allE)
    apply(subgoal_tac "cfgLM.trans_der G (der1 \<lparr>cfg_conf = []\<rparr>) \<lparr>cfg_conf = []\<rparr> [] \<lparr>cfg_conf = []\<rparr>")
     apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
     apply(force)
    apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
    apply(rule cfgLM_trans_der_der1)
     apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
    apply(simp add: cfg_configurations_def)
   apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
    prefer 2
    apply(rule_tac
      v="v"
      and \<beta>="\<alpha>''@\<alpha>1@\<alpha>2@[b]"
      and \<pi>="(p # \<pi>1 @ \<pi>2)"
      and ?w1.0="[teA (prod_lhs p)]"
      and \<alpha>="l'"
      and G="G"
      and d="d"
      in cfgLMMIP_drop_leading_liftB)
     apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
    apply (simp add: liftB_commutes_over_concat)
   apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l')(*strict*)
   apply(clarsimp)
   apply(rename_tac p d v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' aa)(*strict*)
   apply(erule_tac
      x="aa"
      in allE)
   apply (simp add: liftB_commutes_over_concat)
  apply(rename_tac p d w A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a list)(*strict*)
  apply(rename_tac w)
  apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a w)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a w l r)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a w l r)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a w l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a w r l')(*strict*)
  apply(thin_tac "setA (liftB l') = {}")
  apply(subgoal_tac "\<alpha>'=l'")
   apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a w r l')(*strict*)
   prefer 2
   apply(rule liftB_prefixes_coincide)
     apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a w r l')(*strict*)
     apply(force)
    apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a w r l')(*strict*)
    apply(rule disjI1)
    apply(simp add: setBConcat setB_liftA)
   apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a w r l')(*strict*)
   apply(rule disjI2)
   apply(force)
  apply(rename_tac p d A \<alpha>' v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 a w r l')(*strict*)
  apply(clarsimp)
  apply(rename_tac p d A v e1 \<alpha>'' w' x' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l')(*strict*)
  apply (simp add: liftB_commutes_over_concat)
  apply (simp add: liftA_commutes_over_concat)
  apply(clarsimp)
  apply(rename_tac p d A v e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l')(*strict*)
  apply(case_tac p)
  apply(rename_tac p d A v e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A v e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' prod_lhs prod_rhs)(*strict*)
  apply(rename_tac X v)
  apply(rename_tac d A va e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X v)(*strict*)
  apply(simp add: prefix_def)
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X v c ca)(*strict*)
  apply(subgoal_tac "strict_prefix v (liftB \<alpha>'') \<or> SSX" for SSX)
   apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X v c ca)(*strict*)
   prefer 2
   apply(rule mutual_strict_prefix_prefix)
   apply(rule sym)
   apply(force)
  apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X v c ca)(*strict*)
  apply(erule disjE)
   apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X v c ca)(*strict*)
   apply(simp add: strict_prefix_def)
   apply(clarsimp)
   apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X v c ca cb)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X v c ca cb)(*strict*)
    prefer 2
    apply(rule liftB_append)
    apply(force)
   apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X v c ca cb)(*strict*)
   apply(clarsimp)
   apply(rename_tac d A e1 w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca l1 l2)(*strict*)
   apply(thin_tac "liftB l1 @ liftB l2 = liftB (l1 @ l2)")
   apply(case_tac l2)
    apply(rename_tac d A e1 w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca l1 l2)(*strict*)
    apply(clarsimp)
   apply(rename_tac d A e1 w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca l1 l2 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A e1 w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca l1 a list)(*strict*)
  apply (simp only: liftB_commutes_over_concat)
  apply(clarsimp)
  apply(case_tac w)
  apply(rename_tac d A e1 w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca l1 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A e1 w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca l1 a list aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X v c ca)(*strict*)
  apply(simp add: prefix_def)
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca cb)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca cb)(*strict*)
  prefer 2
  apply(rule liftA_append)
  apply(rule sym)
  apply(force)
  apply(rename_tac d A e1 \<alpha>'' w' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca cb)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca l1 l2)(*strict*)
  apply(thin_tac "liftA (l1 @ l2) = liftA l1 @ liftA l2")
  apply(subgoal_tac "w=l2")
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca l1 l2)(*strict*)
  prefer 2
  apply(rule liftA_inj)
  apply(force)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 w l' X c ca l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X c ca l1 l2)(*strict*)
  apply(subgoal_tac "c=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X c ca l1 l2)(*strict*)
  prefer 2
  apply(rule case_list)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X c ca l1 l2)(*strict*)
  apply(erule disjE)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X c ca l1 l2)(*strict*)
  prefer 2
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w')(*strict*)
  apply(thin_tac "\<forall>\<pi>1a \<pi>2a. \<pi>1a @ \<pi>2a = \<lparr>prod_lhs = X, prod_rhs = liftB \<alpha>'' @ liftA l1\<rparr> # \<pi>1 @ \<pi>2 \<longrightarrow> (\<forall>\<alpha>1a \<alpha>2a. \<alpha>1a @ \<alpha>2a = \<alpha>'' @ \<alpha>1 @ \<alpha>2 \<longrightarrow> (\<forall>d1. \<not> cfgLM.trans_der G d1 \<lparr>cfg_conf = teA X # liftA l2\<rparr> \<pi>1a \<lparr>cfg_conf = liftB \<alpha>1a\<rparr>) \<or> (\<forall>d2. \<not> cfgLMMIP G d2 [teA A] \<pi>2a (liftB \<alpha>2a @ [teB b]) (liftA (c' @ ca))))")
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w')(*strict*)
  apply(subgoal_tac "\<not> applicable G (\<lparr>prod_lhs = X, prod_rhs = liftB \<alpha>'' @ liftA l1\<rparr> # \<pi>1 @ \<pi>2) (butlast (liftB l' @ teA X # liftA l2 @ [teA A]))")
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w')(*strict*)
  prefer 2
  apply(simp add: cfgLMMIP_def cfgLMMIyX_def)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w')(*strict*)
  apply(subgoal_tac "applicable G (\<pi>1@\<pi>2) (liftB l' @ liftB \<alpha>'' @ liftA w'b @ [teA a'])")
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w')(*strict*)
  prefer 2
  apply(simp add: cfgLMMIP_def cfgLMMIyX_def)
  apply(clarsimp)
  apply(simp add: applicable_def)
  apply(force)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w')(*strict*)
  apply(simp add: applicable_def)
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db c)(*strict*)
  apply(subgoal_tac "butlast (liftB l' @ teA X # liftA l2 @ [teA A]) = SSX" for SSX)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db c)(*strict*)
  prefer 2
  apply(rule butlast_direct)
  apply(force)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db c)(*strict*)
  apply(clarsimp)
  apply(case_tac c)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db c cfg_conf)(*strict*)
  apply(rename_tac zo)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db c zo)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db c zo)(*strict*)
  prefer 2
  apply(rule_tac
    ?v1.0="[]"
    and ?v4.0="liftA w'"
    and ?d1.0="der2 \<lparr>cfg_conf = liftB l' @ teA X # liftA l2\<rparr> \<lparr>prod_lhs = X, prod_rhs = liftB \<alpha>'' @ liftA l1\<rparr> \<lparr>cfg_conf = liftB l' @ liftB \<alpha>'' @ liftA l1 @ liftA l2\<rparr> "
    and ?d2.0="db"
    and G="G"
    and ?v2.0="liftB l' @ liftB \<alpha>'' @ liftA (w'b @ [a'])"
    in cfgLM_trans_der_concat_extend_prime)
    apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db c zo)(*strict*)
    apply(simp add: split_TSstructure_def)
   apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db c zo)(*strict*)
   apply(clarsimp)
   apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
   apply (simp only: liftA_commutes_over_concat)
   apply(rule_tac
    t="liftB l' @ liftB \<alpha>'' @ (liftA w'b @ liftA [a']) @ liftA w'"
    and s="liftB l' @ liftB \<alpha>'' @ liftA l1 @ liftA l2"
    in ssubst)
    apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
    prefer 2
    apply(rule cfgLM.trans_der_der2)
      apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
     apply(subgoal_tac "\<lparr>cfg_conf = (liftB l' @ teA X # liftA l2 @ [teA A])\<rparr> \<in> cfg_configurations G")
      apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
      prefer 2
      apply(unfold cfgLM.trans_der_def)
      apply(erule exE)+
      apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo e ea)(*strict*)
      apply(fold cfgLM.trans_der_def)
      apply(rule_tac
    d="d"
    in cfgLM.belongs_configurations)
       apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo e ea)(*strict*)
       apply(simp add: cfgLM.trans_der_def cfgLMMIP_def)
      apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo e ea)(*strict*)
      apply(force)
     apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
     apply(simp add: cfg_configurations_def)
     apply(simp add: setBConcat)
     apply(simp add: setB_liftA)
     apply(simp add: setAConcat)
    apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(rule_tac
    x="liftB l'"
    in exI)
    apply(clarsimp)
    apply(simp add: setA_liftB)
   apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
   apply(clarsimp)
   apply(rule_tac
    c="w'b @ a' # w'"
    and d="l1@l2 "
    in liftA_arg_cong_indirect)
     apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
     apply(force)
    apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
    apply (simp (no_asm) add: liftA_commutes_over_concat)
   apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db zo)(*strict*)
   apply (simp (no_asm) add: liftA_commutes_over_concat)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db c zo)(*strict*)
  apply (simp (no_asm) add: liftA_commutes_over_concat)
  apply(force)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 w' db c zo)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' c' da w'b a' \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X c ca l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(erule_tac
    x="\<lparr>prod_lhs = X, prod_rhs = liftB \<alpha>'' @ liftA l1\<rparr> # \<pi>1"
    in allE)
  apply(clarsimp)
  apply(erule_tac
    x="\<alpha>''@\<alpha>1"
    in allE)
  apply(clarsimp)
  apply(erule disjE)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  prefer 2
  apply(rule_tac
    ?v1.0="\<alpha>''"
    and ?v4.0="[]"
    and ?d1.0="der2 \<lparr>cfg_conf = teA X # liftA l2\<rparr> \<lparr>prod_lhs = X, prod_rhs = liftB \<alpha>'' @ liftA l1\<rparr> \<lparr>cfg_conf = liftB \<alpha>'' @ liftA l1 @ liftA l2\<rparr> "
    and ?d2.0="d1"
    and G="G"
    in cfgLM_trans_der_concat_extend_prime)
    apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
    apply(simp add: split_TSstructure_def)
   apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
   apply(clarsimp)
   apply (simp only: liftA_commutes_over_concat)
   apply(rule cfgLM.trans_der_der2)
     apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
    apply(subgoal_tac "\<lparr>cfg_conf = (liftB l' @ teA X # liftA l2 @ [teA A])\<rparr> \<in> cfg_configurations G")
     apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
     prefer 2
     apply(unfold cfgLM.trans_der_def)
     apply(erule exE)+
     apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 e)(*strict*)
     apply(fold cfgLM.trans_der_def)
     apply(rule_tac
    d="d"
    in cfgLM.belongs_configurations)
      apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 e)(*strict*)
      apply(simp add: cfgLM.trans_der_def cfgLMMIP_def)
     apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 e)(*strict*)
     apply(force)
    apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
    apply(simp add: cfg_configurations_def)
    apply(simp add: setBConcat)
    apply(simp add: setB_liftA)
    apply(simp add: setAConcat)
   apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(rule_tac
    x="[]"
    in exI)
   apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply (simp only: liftA_commutes_over_concat liftB_commutes_over_concat)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 db)(*strict*)
  apply (simp only: liftA_commutes_over_concat liftB_commutes_over_concat)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(subgoal_tac "ca=[]")
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(simp add: cfgLMMIP_def)
  apply(clarsimp)
  apply(thin_tac "\<forall>d2. cfgLMMIyX G d2 [teA A] \<pi>2 \<longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA A]\<rparr> \<pi>2 \<lparr>cfg_conf = liftB \<alpha>2 @ teB b # liftA (c' @ ca)\<rparr> \<longrightarrow> \<not> cfgLMMPX G d2 [teA A] \<pi>2 (liftB \<alpha>2 @ [teB b]) (liftA (c' @ ca))")
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(thin_tac "d 0 = Some (pair e1 \<lparr>cfg_conf = liftB l' @ teA X # liftA l2 @ [teA A]\<rparr>)")
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(thin_tac "cfgLMMIyX G d (liftB l' @ teA X # liftA l2 @ [teA A]) (\<lparr>prod_lhs = X, prod_rhs = liftB \<alpha>'' @ liftA l1\<rparr> # \<pi>1 @ \<pi>2)")
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(thin_tac "cfgLMMIyX G d2 [teA A] \<pi>2")
  apply(thin_tac "cfgLMMPX G d2 [teA A] \<pi>2 (liftB \<alpha>2 @ [teB b]) (liftA c')")
  apply(thin_tac "cfgLMMPX G da (liftB l' @ liftB \<alpha>'' @ liftA (l1 @ l2) @ [teA A]) (\<pi>1 @ \<pi>2) (liftB l' @ liftB \<alpha>'' @ liftB \<alpha>1 @ liftB \<alpha>2 @ [teB b]) (liftA c')")
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(thin_tac "cfgLMMPX G d (liftB l' @ teA X # liftA l2 @ [teA A]) (\<lparr>prod_lhs = X, prod_rhs = liftB \<alpha>'' @ liftA l1\<rparr> # \<pi>1 @ \<pi>2) (liftB l' @ liftB \<alpha>'' @ liftB \<alpha>1 @ liftB \<alpha>2 @ [teB b]) (liftA (c' @ ca))")
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(thin_tac "cfgLMMIyX G da (liftB l' @ liftB \<alpha>'' @ liftA (l1 @ l2) @ [teA A]) (\<pi>1 @ \<pi>2)")
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  prefer 2
  apply(rule_tac
    d="d"
    and n="Suc 0"
    and G="G"
    in cfgLM.trans_der_skip)
    apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
    apply(simp add: split_TSstructure_def)
   apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
   apply(force)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(force)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(force)
  apply(rename_tac d A e1 \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(subgoal_tac "SSv2@SSw2=SSv1" for SSv2 SSw2 SSv1)
  apply(rename_tac d A \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  prefer 2
  apply(rule_tac
    G="G"
    and ?w1.0="X"
    and ?w2.0="Y"
    and ?d1.0="derivation_drop d (Suc 0)"
    and ?d2.0="da" for X Y 
    in equal_labels_from_same_configuration_up_to_context_implies_same_modification)
   apply(rename_tac d A \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
   apply(simp add: split_TSstructure_def)
  apply(rename_tac d A \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  prefer 2
  apply(force)
  apply(rename_tac d A \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply (simp only: liftA_commutes_over_concat liftB_commutes_over_concat)
  apply(force)
  apply(rename_tac d A \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(clarsimp)
  apply(case_tac ca)
  apply(rename_tac d A \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  prefer 2
  apply(rename_tac d A \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d A \<alpha>'' c' da \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2 l' X ca l1 l2)(*strict*)
  apply(clarsimp)
  done

lemma cfgLMMIP_nonterminal_tail_not_empty: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLMMIP G d [teA T] \<pi> (liftB (\<alpha> @ [b])) (liftA t)
  \<Longrightarrow> t=[]
  \<Longrightarrow> Q"
  apply(clarsimp)
  apply(simp add: cfgLMMIP_def)
  apply(clarsimp)
  apply(simp add: cfgLMMPX_def)
  apply(subgoal_tac "\<pi>=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   prefer 2
   apply(rule case_list)
  apply(erule disjE)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(case_tac \<alpha>)
    apply(clarsimp)
   apply(rename_tac a list)(*strict*)
   apply(clarsimp)
  apply(clarsimp)
  apply(rename_tac w' a')(*strict*)
  apply(erule_tac
      x="w'"
      in allE)
  apply(simp add: strict_prefix_def)
  apply(subgoal_tac "X" for X)
   apply(rename_tac w' a')(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d"
      and i="length w'"
      and kleene_starT="False"
      and END="True"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac w' a')(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac w' a')(*strict*)
    apply(force)
   apply(rename_tac w' a')(*strict*)
   apply(force)
  apply(rename_tac w' a')(*strict*)
  apply(clarsimp)
  apply(rename_tac w' a' e ci)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac w' a' e ci l r)(*strict*)
  apply(case_tac ci)
  apply(rename_tac w' a' e ci l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac w' a' e l r)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac w' a' e l r)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac w' a' e l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac w' a' e r l')(*strict*)
  apply(thin_tac "setA (liftB l') = {}")
  apply(subgoal_tac "X" for X)
   apply(rename_tac w' a' e r l')(*strict*)
   prefer 2
   apply(rule liftB_append)
   apply(rule sym)
   apply(force)
  apply(rename_tac w' a' e r l')(*strict*)
  apply(clarsimp)
  apply(rename_tac w' a' e r l' l1 l2)(*strict*)
  apply(thin_tac "liftB (l1 @ l2) = liftB l1 @ liftB l2")
  apply(subgoal_tac "l'=l1")
   apply(rename_tac w' a' e r l' l1 l2)(*strict*)
   prefer 2
   apply(rule liftB_inj)
   apply(force)
  apply(rename_tac w' a' e r l' l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac w' a' e r l1 l2)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac w' a' e r l1 l2)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac w' a' e r l1 l2)(*strict*)
  apply(erule_tac
      x="d"
      and P="\<lambda>d. \<forall>c \<pi> c'. cfgLMTD G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2)"
      in allE)
  apply(rename_tac w' a' e r l1 l2)(*strict*)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA T]\<rparr>"
      in allE)
  apply(erule_tac
      x="w'"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = liftB l1 @ teA (prod_lhs a') # r\<rparr>"
      in allE)
  apply(clarsimp)
  apply(erule impE)
   apply(rename_tac w' a' e r l1 l2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc 0"
      and v="[Some a']"
      in get_labels_drop_tail)
    apply(rename_tac w' a' e r l1 l2)(*strict*)
    apply(force)
   apply(rename_tac w' a' e r l1 l2)(*strict*)
   apply(force)
  apply(rename_tac w' a' e r l1 l2)(*strict*)
  apply(erule impE)
   apply(rename_tac w' a' e r l1 l2)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[T]"
      in exI)
   apply(clarsimp)
  apply(rename_tac w' a' e r l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac w' a' e r l1 l2 w1 w2)(*strict*)
  apply(subgoal_tac "l1=w1")
   apply(rename_tac w' a' e r l1 l2 w1 w2)(*strict*)
   prefer 2
   apply (metis append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac w' a' e r l1 l2 w1 w2)(*strict*)
  apply(case_tac w2)
   apply(rename_tac w' a' e r l1 l2 w1 w2)(*strict*)
   apply(clarsimp)
  apply(rename_tac w' a' e r l1 l2 w1 w2 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac w' a' e l2 w1 list)(*strict*)
  apply(subgoal_tac "list=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac w' a' e l2 w1 list)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac w' a' e l2 w1 list)(*strict*)
  apply(erule disjE)
   apply(rename_tac w' a' e l2 w1 list)(*strict*)
   prefer 2
   apply(clarsimp)
   apply(rename_tac w' a' e l2 w1 w'a a'a)(*strict*)
   apply(subgoal_tac "l2=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
    apply(rename_tac w' a' e l2 w1 w'a a'a)(*strict*)
    prefer 2
    apply(rule case_list)
   apply(rename_tac w' a' e l2 w1 w'a a'a)(*strict*)
   apply(erule disjE)
    apply(rename_tac w' a' e l2 w1 w'a a'a)(*strict*)
    apply(clarsimp)
    apply(rename_tac w' a' e w'a a'a)(*strict*)
    apply (simp add: liftA_commutes_over_concat)
   apply(rename_tac w' a' e l2 w1 w'a a'a)(*strict*)
   apply(clarsimp)
   apply(rename_tac w' a' e w1 w'a a'a w'b)(*strict*)
   apply (simp add: liftB_commutes_over_concat liftA_commutes_over_concat)
  apply(rename_tac w' a' e l2 w1 list)(*strict*)
  apply(clarsimp)
  apply(rename_tac w' a' e l2 w1)(*strict*)
  apply(subgoal_tac "LR1ProdFormSimp G")
   apply(rename_tac w' a' e l2 w1)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def)
  apply(rename_tac w' a' e l2 w1)(*strict*)
  apply(simp add: LR1ProdFormSimp_def)
  apply(erule_tac
      x="a'"
      in ballE)
   apply(rename_tac w' a' e l2 w1)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac w' a' e l2 w1)(*strict*)
  apply(case_tac a')
  apply(rename_tac w' a' e l2 w1 prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac w' e l2 w1 prod_lhs)(*strict*)
  apply(rename_tac X r)
  apply(rename_tac w' e l2 X r)(*strict*)
  apply(erule disjE)
   apply(rename_tac w' e l2 X r)(*strict*)
   apply(clarsimp)
   apply(case_tac l2)
    apply(rename_tac w' e l2 X r)(*strict*)
    prefer 2
    apply(rename_tac w' e l2 X r a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac w' e l2 X r)(*strict*)
   apply(clarsimp)
   apply(rename_tac w' e r)(*strict*)
   apply(erule_tac
      x="d"
      in allE)
   apply(erule_tac
      x="[teA r]"
      in allE)
   apply(subgoal_tac "cfgLM.trans_der G d \<lparr>cfg_conf = [teA T]\<rparr> w' \<lparr>cfg_conf = liftB (\<alpha> @ [b]) @ [teA r]\<rparr>")
    apply(rename_tac w' e r)(*strict*)
    apply(force)
   apply(rename_tac w' e r)(*strict*)
   apply(rule_tac
      n="length(w')"
      in cfgLM.trans_der_crop)
       apply(rename_tac w' e r)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac w' e r)(*strict*)
      apply(force)
     apply(rename_tac w' e r)(*strict*)
     apply(force)
    apply(rename_tac w' e r)(*strict*)
    apply(force)
   apply(rename_tac w' e r)(*strict*)
   apply(force)
  apply(rename_tac w' e l2 X r)(*strict*)
  apply(clarsimp)
  apply(rename_tac w' e l2 X r ba A B)(*strict*)
  apply(erule disjE)
   apply(rename_tac w' e l2 X r ba A B)(*strict*)
   apply(clarsimp)
   apply(rename_tac w' e l2 X ba A B)(*strict*)
   apply(case_tac l2)
    apply(rename_tac w' e l2 X ba A B)(*strict*)
    apply(clarsimp)
   apply(rename_tac w' e l2 X ba A B a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac w' e X ba A B list)(*strict*)
   apply(case_tac list)
    apply(rename_tac w' e X ba A B list)(*strict*)
    apply(clarsimp)
   apply(rename_tac w' e X ba A B list a lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac w' e l2 X r ba A B)(*strict*)
  apply(erule disjE)
   apply(rename_tac w' e l2 X r ba A B)(*strict*)
   apply(clarsimp)
   apply(rename_tac w' e l2 X A B)(*strict*)
   apply(case_tac l2)
    apply(rename_tac w' e l2 X A B)(*strict*)
    apply(clarsimp)
   apply(rename_tac w' e l2 X A B a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac w' e l2 X r ba A B)(*strict*)
  apply(clarsimp)
  apply(rename_tac w' e l2 X A B C)(*strict*)
  apply(case_tac l2)
   apply(rename_tac w' e l2 X A B C)(*strict*)
   apply(clarsimp)
  apply(rename_tac w' e l2 X A B C a list)(*strict*)
  apply(clarsimp)
  done

lemma same_edge_productions_preserve_nonterminal_tail_length_l3l3: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA (cons_l3   q11 A1 q12)]\<rparr> \<pi>11 c1
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA (cons_l3   q21 A2 q22)]\<rparr> \<pi>21 c2
  \<Longrightarrow> map (prod_to_edge G') \<pi>11 @ x1 =
        map (prod_to_edge G') \<pi>21 @ x2
  \<Longrightarrow> i \<le> length \<pi>11
  \<Longrightarrow> i \<le> length \<pi>21
  \<Longrightarrow> \<exists>\<alpha> v1 v2. length v1=length v2
  \<and> cfg_conf(the(get_configuration(d1 i))) = liftB \<alpha> @ liftA v1
  \<and> cfg_conf(the(get_configuration(d2 i))) = liftB \<alpha> @ liftA v2
  \<and> only_l3_nonterminals v1
  \<and> only_l3_nonterminals v2"
  apply(induct i)
   apply(clarsimp)
   apply(simp add: get_configuration_def cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac e ea)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(rule_tac
      x="[cons_l3 q11 A1 q12]"
      in exI)
   apply(rule_tac
      x="[cons_l3 q21 A2 q22]"
      in exI)
   apply(clarsimp)
   apply(rule conjI)
    apply(rename_tac e ea)(*strict*)
    apply(rule only_l3_nonterminals_single)
   apply(rename_tac e ea)(*strict*)
   apply(rule only_l3_nonterminals_single)
  apply(rename_tac i)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d1"
      and i="i"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac i \<alpha> v1 v2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac i \<alpha> v1 v2)(*strict*)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2)(*strict*)
   apply(force)
  apply(rename_tac i \<alpha> v1 v2)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d2"
      and i="i"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
   apply(force)
  apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci ci' ea cia ci'a)(*strict*)
  apply(simp add: get_configuration_def)
  apply(case_tac ci)
  apply(rename_tac i \<alpha> v1 v2 e ci ci' ea cia ci'a cfg_confa)(*strict*)
  apply(case_tac cia)
  apply(rename_tac i \<alpha> v1 v2 e ci ci' ea cia ci'a cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a l r la ra)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a l r la ra)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r la ra l')(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = la")
   apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r la ra l')(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB la"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r la ra l')(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r ra l' l'a)(*strict*)
  apply(thin_tac "setA (liftB l'a) = {}")
  apply(thin_tac "setA (liftB l') = {}")
  apply(case_tac ci')
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r ra l' l'a cfg_confa)(*strict*)
  apply(case_tac ci'a)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r ra l' l'a cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ea r ra l' l'a)(*strict*)
  apply(subgoal_tac "\<alpha>=l'")
   apply(rename_tac i \<alpha> v1 v2 e ea r ra l' l'a)(*strict*)
   prefer 2
   apply (metis liftAMap append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac i \<alpha> v1 v2 e ea r ra l' l'a)(*strict*)
  apply(subgoal_tac "\<alpha>=l'a")
   apply(rename_tac i \<alpha> v1 v2 e ea r ra l' l'a)(*strict*)
   prefer 2
   apply (metis liftAMap append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac i \<alpha> v1 v2 e ea r ra l' l'a)(*strict*)
  apply(clarsimp)
  apply(rename_tac i v1 v2 e ea r ra l')(*strict*)
  apply(case_tac v1)
   apply(rename_tac i v1 v2 e ea r ra l')(*strict*)
   apply(clarsimp)
  apply(rename_tac i v1 v2 e ea r ra l' a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac i v2 e ea ra l' list)(*strict*)
  apply(case_tac v2)
   apply(rename_tac i v2 e ea ra l' list)(*strict*)
   apply(clarsimp)
  apply(rename_tac i v2 e ea ra l' list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac i e ea l' list lista)(*strict*)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d1 \<lparr>cfg_conf = [teA (cons_l3   q11 A1 q12)]\<rparr> \<pi>11 c1")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA (cons_l3   q21 A2 q22)]\<rparr> \<pi>21 c2")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(subgoal_tac "prod_to_edge G' (\<pi>11!i) = prod_to_edge G' (\<pi>21!i)")
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(rule_tac
      t="prod_to_edge G' (\<pi>11 ! i)"
      and s="(map (prod_to_edge G') \<pi>11 @ x1)!i"
      in ssubst)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(rule_tac
      t="(map (prod_to_edge G') \<pi>11 @ x1) ! i"
      and s="(map (prod_to_edge G') \<pi>11) ! i"
      in ssubst)
     apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
     apply(rule nth_append_1)
     apply(force)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(rule sym)
    apply(rule nth_map)
    apply(force)
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   apply(rule_tac
      t="prod_to_edge G' (\<pi>21 ! i)"
      and s="(map (prod_to_edge G') \<pi>21 @ x2)!i"
      in ssubst)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(rule_tac
      t="(map (prod_to_edge G') \<pi>21 @ x2) ! i"
      and s="(map (prod_to_edge G') \<pi>21) ! i"
      in ssubst)
     apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
     apply(rule nth_append_1)
     apply(force)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(rule sym)
    apply(rule nth_map)
    apply(force)
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   apply(force)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "map (prod_to_edge G') \<pi>11 @ x1 = map (prod_to_edge G') \<pi>21 @ x2")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(rule_tac
      ?p1.0="\<pi>11!i"
      and ?p2.0="\<pi>21!i"
      in nonfinal_prod_to_edge_to_special_production_set)
         apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
         apply(force)
        apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
        apply(force)
       apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
       apply(force)
      apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
      apply(force)
     apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
     apply(force)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(clarsimp)
    apply(simp add: only_l3_nonterminals_def)
    apply(erule_tac
      x="[]"
      and P="\<lambda>w1. \<forall>w2 xA. prod_lhs (\<pi>11 ! i) # v1 = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
    apply(erule_tac
      x="[]"
      and P="\<lambda>w1. \<forall>w2 xA. prod_lhs (\<pi>21 ! i) # v2 = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
    apply(clarsimp)
    apply(rename_tac i e1 e2 \<alpha> v1 v2 q1 q1a A Aa q2 q2a)(*strict*)
    apply(simp add: isl3_def)
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   apply(clarsimp)
   apply(simp add: only_l3_nonterminals_def)
   apply(erule_tac
      x="[]"
      and P="\<lambda>w1. \<forall>w2 xA. prod_lhs (\<pi>11 ! i) # v1 = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
   apply(erule_tac
      x="[]"
      and P="\<lambda>w1. \<forall>w2 xA. prod_lhs (\<pi>21 ! i) # v2 = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
   apply(clarsimp)
   apply(rename_tac i e1 e2 \<alpha> v1 v2 q1 q1a A Aa q2 q2a)(*strict*)
   apply(simp add: isl3_def)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "prod_to_edge G' (\<pi>11 ! i) = prod_to_edge G' (\<pi>21 ! i)")
  apply(thin_tac "d1 i = Some (pair e1 \<lparr>cfg_conf = liftB \<alpha> @ teA (prod_lhs (\<pi>11 ! i)) # liftA v1\<rparr>)")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "d1 (Suc i) = Some (pair (Some (\<pi>11 ! i)) \<lparr>cfg_conf = liftB \<alpha> @ prod_rhs (\<pi>11 ! i) @ liftA v1\<rparr>)")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "d2 i = Some (pair e2 \<lparr>cfg_conf = liftB \<alpha> @ teA (prod_lhs (\<pi>21 ! i)) # liftA v2\<rparr>)")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "d2 (Suc i) = Some (pair (Some (\<pi>21 ! i)) \<lparr>cfg_conf = liftB \<alpha> @ prod_rhs (\<pi>21 ! i) @ liftA v2\<rparr>)")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(erule disjE)+
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   apply(clarsimp)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(clarsimp)
    apply(rename_tac i \<alpha> v1 v2 x y)(*strict*)
    apply(erule disjE)+
      apply(rename_tac i \<alpha> v1 v2 x y)(*strict*)
      apply(simp add: prod_sets)
      apply(clarsimp)
      apply(rename_tac i \<alpha> v1 v2 x y qt qta)(*strict*)
      apply(rule_tac
      x="\<alpha>@[y]"
      in exI)
      apply(simp add: simpY)
      apply(rename_tac i v1 v2 x y qt qta)(*strict*)
      apply(rule_tac
      x="cons_l3 (edge_trg x) (edge_pop x ! 0) qt#v1"
      in exI)
      apply(rule_tac
      x="cons_l3 (edge_trg x) (edge_pop x ! 0) qta#v2"
      in exI)
      apply(clarsimp)
      apply(rule conjI)
       apply(rename_tac i v1 v2 x y qt qta)(*strict*)
       apply(rule_tac
      ?w1.0="[cons_l3 (edge_trg x) (edge_pop x ! 0) qt]"
      and ?w2.0="v1"
      in only_l3_nonterminals_append)
         apply(rename_tac i v1 v2 x y qt qta)(*strict*)
         apply(rule only_l3_nonterminals_single)
        apply(rename_tac i v1 v2 x y qt qta)(*strict*)
        apply(rule_tac
      w="[cons_l3 (edge_src x) (edge_pop x ! 0) qt]"
      in only_l3_nonterminals_drop)
        apply(force)
       apply(rename_tac i v1 v2 x y qt qta)(*strict*)
       apply(force)
      apply(rename_tac i v1 v2 x y qt qta)(*strict*)
      apply(rule_tac
      ?w1.0="[cons_l3 (edge_trg x) (edge_pop x ! 0) qta]"
      and ?w2.0="v2"
      in only_l3_nonterminals_append)
        apply(rename_tac i v1 v2 x y qt qta)(*strict*)
        apply(rule only_l3_nonterminals_single)
       apply(rename_tac i v1 v2 x y qt qta)(*strict*)
       apply(rule_tac
      w="[cons_l3 (edge_src x) (edge_pop x ! 0) qta]"
      in only_l3_nonterminals_drop)
       apply(force)
      apply(rename_tac i v1 v2 x y qt qta)(*strict*)
      apply(force)
     apply(rename_tac i \<alpha> v1 v2 x y)(*strict*)
     apply(simp add: prod_sets)
     apply(clarsimp)
     apply(rename_tac i \<alpha> v1 v2 x y qt)(*strict*)
     apply(rule only_l3_nonterminals_l2_at_front)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x y)(*strict*)
    apply(simp add: prod_sets)
    apply(rule only_l3_nonterminals_l2_at_front)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(simp add: prod_sets)
    apply(clarsimp)
    apply(rule_tac
      x="\<alpha>"
      in exI)
    apply(simp add: simpY)
    apply(rename_tac i v1 v2 x)(*strict*)
    apply(rule_tac
      x="v1"
      in exI)
    apply(rule_tac
      x="v2"
      in exI)
    apply(clarsimp)
    apply(rule conjI)
     apply(rename_tac i v1 v2 x)(*strict*)
     apply(rule_tac
      w="[X]" for X
      in only_l3_nonterminals_drop)
     apply(force)
    apply(rename_tac i v1 v2 x)(*strict*)
    apply(rule_tac
      w="[X]" for X
      in only_l3_nonterminals_drop)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(clarsimp)
   apply(erule disjE)+
     apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
     apply(simp add: prod_sets)
     apply(clarsimp)
     apply(rename_tac i \<alpha> v1 v2 x qs qsa qt qta)(*strict*)
     apply(rule_tac
      x="\<alpha>"
      in exI)
     apply(simp add: simpY)
     apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
     apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l3 qs (edge_pop x ! 0) qt]@v1"
      in exI)
     apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qsa,cons_l3 qsa (edge_pop x ! 0) qta]@v2"
      in exI)
     apply(clarsimp)
     apply(rule conjI)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule_tac
      ?w1.0="[X]"
      and ?w2.0="[Y]@v1" for X Y
      in only_l3_nonterminals_append)
        apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
        prefer 3
        apply(force)
       apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
       apply(rule only_l3_nonterminals_single)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule_tac
      ?w1.0="[X]"
      and ?w2.0="v1" for X
      in only_l3_nonterminals_append)
        apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
        prefer 3
        apply(force)
       apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
       apply(rule only_l3_nonterminals_single)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule_tac
      w="[X]" for X
      in only_l3_nonterminals_drop)
      apply(force)
     apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
     apply(rule_tac
      ?w1.0="[X]"
      and ?w2.0="[Y]@v2" for X Y
      in only_l3_nonterminals_append)
       apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
       prefer 3
       apply(force)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule only_l3_nonterminals_single)
     apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
     apply(rule_tac
      ?w1.0="[X]"
      and ?w2.0="v2" for X
      in only_l3_nonterminals_append)
       apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
       prefer 3
       apply(force)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule only_l3_nonterminals_single)
     apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
     apply(rule_tac
      w="[X]" for X
      in only_l3_nonterminals_drop)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(simp add: prod_sets)
    apply(clarsimp)
    apply(rename_tac i \<alpha> v1 v2 x qs qt)(*strict*)
    apply(erule disjE)
     apply(rename_tac i \<alpha> v1 v2 x qs qt)(*strict*)
     apply(clarsimp)
     apply(rename_tac i \<alpha> v1 v2 x qs qt)(*strict*)
     apply(rule only_l3_nonterminals_l2_at_front)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x qs qt)(*strict*)
    apply(rule only_l3_nonterminals_l2_at_front)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(simp add: prod_sets)
   apply(erule disjE)+
     apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
     apply(clarsimp)
     apply(rename_tac i \<alpha> v1 v2 x qs qt)(*strict*)
     apply(rule only_l3_nonterminals_l2_at_front)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(clarsimp)
    apply(rename_tac i \<alpha> v1 v2 x qs qsa qt)(*strict*)
    apply(rule only_l3_nonterminals_l2_at_front)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(erule disjE)+
     apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
     apply(simp add: prod_sets)
     apply(rule only_l3_nonterminals_l2_at_front)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(clarsimp)
    apply(rename_tac i \<alpha> v1 v2 x qs)(*strict*)
    apply(rule only_l3_nonterminals_l2_at_front)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(simp add: prod_sets)
    apply(rule only_l3_nonterminals_l2_at_front)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(clarsimp)
   apply(rename_tac i \<alpha> v1 v2 x qs qsa)(*strict*)
   apply(rule only_l3_nonterminals_l2_at_front)
   apply(force)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(simp add: prod_sets)
  apply(rename_tac i \<alpha> v1 v2)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 ia ib A Aa)(*strict*)
  apply(rule only_l3_nonterminals_l2_at_front)
  apply(force)
  done

lemma compatible_derivations_coincide_heavily_not_shorter: "
       F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = [teA (cons_l3   q1 A1 q1')]\<rparr> \<pi>1 \<lparr>cfg_conf = liftB \<alpha>1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA (cons_l3   q2 A2 q2')]\<rparr> \<pi>2 \<lparr>cfg_conf = liftB \<alpha>2\<rparr>
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 @ \<pi>1' = map (prod_to_edge G') \<pi>2 @ \<pi>2'
  \<Longrightarrow> length v1 = length v2
  \<Longrightarrow> cfg_conf (the (get_configuration (d1 (min (length \<pi>1) (length \<pi>2))))) = liftB \<alpha> @ liftA v1
  \<Longrightarrow> cfg_conf (the (get_configuration (d2 (min (length \<pi>1) (length \<pi>2))))) = liftB \<alpha> @ liftA v2
  \<Longrightarrow> only_l3_nonterminals v1
  \<Longrightarrow> only_l3_nonterminals v2
  \<Longrightarrow> length \<pi>1 < length \<pi>2
  \<Longrightarrow> Q" 
  apply(subgoal_tac "min (length \<pi>1) (length \<pi>2) = length \<pi>1")
   prefer 2
   apply(force)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d2"
      and i="length \<pi>1"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(simp add: split_TSstructure_def)
    apply(force)
   apply(force)
  apply(clarsimp)
  apply(rename_tac e ci ci')(*strict*)
  apply(simp add: get_configuration_def cfgLM.trans_der_def cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac e ci ci' l r ea eb)(*strict*)
  apply(case_tac ci)
  apply(rename_tac e ci ci' l r ea eb cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac e ci' l r ea eb)(*strict*)
  apply(case_tac ci')
  apply(rename_tac e ci' l r ea eb cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac e l r ea eb)(*strict*)
  apply(case_tac v1)
   apply(rename_tac e l r ea eb)(*strict*)
   prefer 2
   apply(rename_tac e l r ea eb a list)(*strict*)
   apply(clarsimp)
   apply(rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac e l r ea eb)(*strict*)
  apply(clarsimp)
  apply(rule liftB_with_nonterminal_inside)
  apply(force)
  done

lemma same_source_edge_productions_have_similar_lhs: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> p1 \<in> cfg_productions G
  \<Longrightarrow> p2 \<in> cfg_productions G
  \<Longrightarrow> prod_rhs p1 = [] \<longrightarrow> isl3 (prod_lhs p1)
  \<Longrightarrow> prod_rhs p2 = [] \<longrightarrow> isl3 (prod_lhs p2)
  \<Longrightarrow> prod_to_edge G' p1 = prod_to_edge G' p2
  \<Longrightarrow> cropTol3l2_single (prod_lhs p1) = cropTol3l2_single (prod_lhs p2)"
  apply(simp add: prod_to_edge_def)
  apply(subgoal_tac "p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
   prefer 2
   apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
   apply(force)
  apply(subgoal_tac "p2 \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
   prefer 2
   apply(simp add: F2LR1inputx_def cfg_sub_def F_SDPDA_TO_CFG_STD_def cfgLM_step_relation_def )
   apply(force)
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      p="p1"
      in unique_edge_exists_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_enhanced)
     apply(force)
    apply(force)
   apply(force)
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      p="p2"
      in unique_edge_exists_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_enhanced)
     apply(force)
    apply(force)
   apply(force)
  apply(clarsimp)
  apply(rename_tac x xa)(*strict*)
  apply(subgoal_tac "x=xa \<and> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 = F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2")
   apply(rename_tac x xa)(*strict*)
   prefer 2
   apply(subgoal_tac "F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 = {x}")
    apply(rename_tac x xa)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac x xa)(*strict*)
   apply(subgoal_tac "F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2 = {xa}")
    apply(rename_tac x xa)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac x xa)(*strict*)
   apply(subgoal_tac "(THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1) = x")
    apply(rename_tac x xa)(*strict*)
    prefer 2
    apply(rule theI2_prime_prime)
      apply(rename_tac x xa)(*strict*)
      prefer 3
      apply(rename_tac x xa xb)(*strict*)
      apply(erule_tac
      x="xb"
      and P="\<lambda>y. \<forall>y'. y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> y' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> y = y'"
      in allE)
      apply(erule_tac
      x="x"
      and P="\<lambda>x. xb \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> x \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> xb = x"
      in allE)
      apply(force)
     apply(rename_tac x xa)(*strict*)
     apply(rule_tac
      x="x"
      in exI)
     apply(force)
    apply(rename_tac x xa xb y)(*strict*)
    apply(erule_tac
      x="xb"
      and P="\<lambda>y. \<forall>y'. y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> y' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> y = y'"
      in allE)
    apply(erule_tac
      x="x"
      and P="\<lambda>x. xb \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> x \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> xb = x"
      in allE)
    apply(force)
   apply(rename_tac x xa)(*strict*)
   apply(subgoal_tac "(THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1) = xa")
    apply(rename_tac x xa)(*strict*)
    prefer 2
    apply(rule theI2_prime_prime)
      apply(rename_tac x xa)(*strict*)
      prefer 3
      apply(rename_tac x xa xb)(*strict*)
      apply(erule_tac
      x="xb"
      and P="\<lambda>y. \<forall>y'. y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> y' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> y = y'"
      in allE)
      apply(erule_tac
      x="xa"
      and P="\<lambda>xa. xb \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> xa \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> xb = xa"
      in allE)
      apply(force)
     apply(rename_tac x xa)(*strict*)
     apply(rule_tac
      x="xa"
      in exI)
     apply(force)
    apply(rename_tac x xa xb y)(*strict*)
    apply(erule_tac
      x="xb"
      and P="\<lambda>y. \<forall>y'. y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> y' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> y = y'"
      in allE)
    apply(erule_tac
      x="xa"
      and P="\<lambda>xa. xb \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> xa \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> xb = xa"
      in allE)
    apply(force)
   apply(rename_tac x xa)(*strict*)
   apply(force)
  apply(rename_tac x xa)(*strict*)
  apply(thin_tac "(THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1) = (THE e. e \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2)")
  apply(thin_tac "\<forall>y y'. y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<and> y' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 \<longrightarrow> y = y'")
  apply(thin_tac "\<forall>y y'. y \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2 \<and> y' \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2 \<longrightarrow> y = y'")
  apply(clarsimp)
  apply(rename_tac xa)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac xa)(*strict*)
   prefer 2
   apply(rule_tac
      ?e1.0="p1"
      and ?e2.0="p2"
      in F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_equal_then_from_special_sets)
         apply(rename_tac xa)(*strict*)
         apply(simp add: F2LR1inputx_def)
         apply(force)
        apply(rename_tac xa)(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac xa)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac xa)(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac xa)(*strict*)
     apply(force)
    apply(rename_tac xa)(*strict*)
    apply(force)
   apply(rename_tac xa)(*strict*)
   apply(force)
  apply(rename_tac xa)(*strict*)
  apply(thin_tac "p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<or> p1 \<in> F_SDPDA_TO_CFG_STD__edges_l2 G'")
  apply(thin_tac "p2 \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<or> p2 \<in> F_SDPDA_TO_CFG_STD__edges_l2 G'")
  apply(thin_tac "F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p1 = F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2")
  apply(thin_tac "xa \<in> F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1 G' p2")
  apply(clarsimp)
  apply(erule disjE)+
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
    apply(rename_tac x y)(*strict*)
    apply(erule disjE)+
      apply(rename_tac x y)(*strict*)
      apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def cropTol3l2_single_def)
      apply(clarsimp)
     apply(rename_tac x y)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def cropTol3l2_single_def)
     apply(clarsimp)
    apply(rename_tac x y)(*strict*)
    apply(erule disjE)+
     apply(rename_tac x y)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def F_SDPDA_TO_CFG_STD__edges_l2_read_def cropTol3l2_single_def)
     apply(clarsimp)
    apply(rename_tac x y)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def cropTol3l2_single_def)
   apply(rename_tac x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac x)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def cropTol3l2_single_def)
   apply(rename_tac x)(*strict*)
   apply(clarsimp)
   apply(erule disjE)+
     apply(rename_tac x)(*strict*)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def cropTol3l2_single_def)
     apply(clarsimp)
    apply(rename_tac x)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def cropTol3l2_single_def)
    apply(clarsimp)
    apply(rename_tac x qs qt)(*strict*)
    apply(erule disjE)+
     apply(rename_tac x qs qt)(*strict*)
     apply(clarsimp)+
   apply(rename_tac x)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def F_SDPDA_TO_CFG_STD__edges_l2_push_def cropTol3l2_single_def)
   apply(erule disjE)+
     apply(rename_tac x)(*strict*)
     apply(clarsimp)+
   apply(rename_tac x)(*strict*)
   apply(erule disjE)+
     apply(rename_tac x)(*strict*)
     apply(clarsimp)+
   apply(rename_tac x qs)(*strict*)
   apply(erule disjE)+
    apply(rename_tac x qs)(*strict*)
    apply(clarsimp)+
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
  apply(clarsimp)
  apply(rename_tac i ia A Aa)(*strict*)
  apply(simp add: isl3_def)
  done

lemma last_back_state_is_preserved: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf = [teA (cons_l3   q1 A1 q1')]\<rparr> \<pi> \<lparr>cfg_conf = liftB \<alpha>@liftA v@[teA (cons_l3   q2 A2 q2')]\<rparr>
  \<Longrightarrow> q1'=q2'"
  apply(induct \<pi> arbitrary: \<alpha> v q2 A2 q2' rule: rev_induct)
   apply(rename_tac \<alpha> v q2 A2 q2')(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
  apply(rename_tac x xs \<alpha> v q2 A2 q2')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac x xs \<alpha> v q2 A2 q2')(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d"
      and i="length xs"
      and kleene_starT="False"
      and END="True"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac x xs \<alpha> v q2 A2 q2')(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac x xs \<alpha> v q2 A2 q2')(*strict*)
    apply(force)
   apply(rename_tac x xs \<alpha> v q2 A2 q2')(*strict*)
   apply(clarsimp)
  apply(rename_tac x xs \<alpha> v q2 A2 q2')(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci)(*strict*)
  apply(case_tac ci)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci cfg_conf)(*strict*)
  apply(rename_tac w)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci w)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci w)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci w)(*strict*)
  apply(erule_tac
      x="d"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cons_l3   q1 A1 q1')]\<rparr>"
      in allE)
  apply(erule_tac
      x="xs"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = w\<rparr>"
      in allE)
  apply(erule impE)
   apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci w)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc 0"
      and v="[Some x]"
      in get_labels_drop_tail)
    apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci w)(*strict*)
    apply(force)
   apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci w)(*strict*)
   apply(force)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci w)(*strict*)
  apply(erule impE)
   apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci w)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rename_tac x xs \<alpha> v q2 A2 q2' e w)(*strict*)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(force)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e ci w)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e w1 w2)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e w1 w2 l r)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac x xs \<alpha> v q2 A2 q2' e w1 w2 l r)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e w1 w2 l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e w1 w2 r l')(*strict*)
  apply(thin_tac "setA (liftB l') = {}")
  apply(subgoal_tac "w1=l'")
   apply(rename_tac x xs \<alpha> v q2 A2 q2' e w1 w2 r l')(*strict*)
   prefer 2
   apply (metis append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e w1 w2 r l')(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e w2 r l')(*strict*)
  apply(case_tac w2)
   apply(rename_tac x xs \<alpha> v q2 A2 q2' e w2 r l')(*strict*)
   apply(clarsimp)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e w2 r l' a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e l' list)(*strict*)
  apply(rename_tac r)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e l' r)(*strict*)
  apply(case_tac x)
  apply(rename_tac x xs \<alpha> v q2 A2 q2' e l' r prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs \<alpha> v q2 A2 q2' e l' r prod_lhs prod_rhs)(*strict*)
  apply(rename_tac X v)
  apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r X v)(*strict*)
  apply(case_tac X)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r X v q b)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
    prefer 2
    apply(rule_tac
      \<pi>="xs"
      and c'="\<lparr>cfg_conf = liftB l' @ teA (cons_l2   q b) # liftA r\<rparr>"
      and d="d"
      in only_l3_nonterminals_reachable)
         apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
         apply(simp add: F2LR1inputx_def)
         apply(force)
        apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
    apply(rule_tac
      n="length xs"
      in cfgLM.trans_der_crop)
        apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
        apply(simp add: split_TSstructure_def)
       apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
       apply(force)
      apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
      apply(force)
     apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
     apply(force)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
    apply(force)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q b)(*strict*)
   apply(simp add: setAConcat)
   apply(force)
  apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r X v q1a b q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q1a b q2a)(*strict*)
  apply(subgoal_tac "r=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q1a b q2a)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q1a b q2a)(*strict*)
  apply(erule disjE)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q1a b q2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a)(*strict*)
   apply(subgoal_tac "v=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a)(*strict*)
    prefer 2
    apply(rule case_list)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a)(*strict*)
   apply(erule disjE)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a)(*strict*)
    apply(subgoal_tac "l'=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
     apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a)(*strict*)
     prefer 2
     apply(rule case_list)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a)(*strict*)
    apply(erule disjE)
     apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a)(*strict*)
     apply(clarsimp)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a)(*strict*)
    apply(clarsimp)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e q1a b q2a w' a')(*strict*)
    apply (simp only: liftB_commutes_over_concat)
    apply(clarsimp)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a w')(*strict*)
   apply(subgoal_tac "q2a=q2'")
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a w')(*strict*)
    apply(clarsimp)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b w')(*strict*)
    apply(erule_tac
      x="l'"
      in meta_allE)
    apply(erule_tac
      x="[]"
      in meta_allE)
    apply(erule_tac
      x="q1a"
      in meta_allE)
    apply(erule_tac
      x="b"
      in meta_allE)
    apply(erule_tac
      x="q2'"
      in meta_allE)
    apply(erule meta_impE)
     apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b w')(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b w')(*strict*)
    apply(rule_tac
      n="length xs"
      in cfgLM.trans_der_crop)
        apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b w')(*strict*)
        apply(simp add: split_TSstructure_def)
       apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b w')(*strict*)
       apply(force)
      apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b w')(*strict*)
      apply(force)
     apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b w')(*strict*)
     apply(force)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b w')(*strict*)
    apply(force)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a w')(*strict*)
   apply(subgoal_tac "LR1ProdForm G")
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a w')(*strict*)
    prefer 2
    apply(rule sub_of_F_SDPDA_TO_CFG_STD__implies_LR1ProdForm)
    apply(simp add: F2LR1inputx_def)
    apply(force)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a w')(*strict*)
   apply(simp add: LR1ProdForm_def)
   apply(erule_tac
      x="\<lparr>prod_lhs = cons_l3 q1a b q2a, prod_rhs = w' @ [teA (cons_l3   q2 A2 q2')]\<rparr>"
      in ballE)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a w')(*strict*)
    prefer 2
    apply(simp add: cfgLM_step_relation_def)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a w')(*strict*)
   apply(clarsimp)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a w' ba q1aa q2b q3 q4 A1a)(*strict*)
   apply(erule disjE)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a w' ba q1aa q2b q3 q4 A1a)(*strict*)
    apply(clarsimp)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' q1a b q2a w' ba q1aa q2b q3 q4 A1a)(*strict*)
   apply(clarsimp)
  apply(rename_tac xs \<alpha> va q2 A2 q2' e l' r v q1a b q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a w' a')(*strict*)
  apply (simp only: liftA_commutes_over_concat)
  apply(clarsimp)
  apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a w')(*strict*)
  apply(erule_tac
      x="l'"
      in meta_allE)
  apply(erule_tac
      x="cons_l3 q1a b q2a#w'"
      in meta_allE)
  apply(erule_tac
      x="q2"
      in meta_allE)
  apply(erule_tac
      x="A2"
      in meta_allE)
  apply(erule_tac
      x="q2'"
      in meta_allE)
  apply(erule meta_impE)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a w')(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a w')(*strict*)
  apply(rule_tac
      n="length xs"
      in cfgLM.trans_der_crop)
      apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a w')(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a w')(*strict*)
     apply(force)
    apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a w')(*strict*)
    apply(force)
   apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a w')(*strict*)
   apply(force)
  apply(rename_tac xs \<alpha> va q2 A2 q2' e l' v q1a b q2a w')(*strict*)
  apply(force)
  done

lemma compatible_pop_productions_have_equal_last_state: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> \<lparr>prod_lhs = cons_l3 qx b q1', prod_rhs = []\<rparr> \<in> cfg_productions G
  \<Longrightarrow> \<lparr>prod_lhs = cons_l3 qx b q2', prod_rhs = []\<rparr> \<in> cfg_productions G
  \<Longrightarrow> prod_to_edge G' \<lparr>prod_lhs = cons_l3 qx b q1', prod_rhs = []\<rparr> = prod_to_edge G' \<lparr>prod_lhs = cons_l3 qx b q2', prod_rhs = []\<rparr>
  \<Longrightarrow> q1' = q2'"
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      ?p1.0="\<lparr>prod_lhs = cons_l3 qx b q1', prod_rhs = []\<rparr>"
      and ?p2.0="\<lparr>prod_lhs = cons_l3 qx b q2', prod_rhs = []\<rparr>"
      in nonfinal_prod_to_edge_to_special_production_set)
         apply(force)
        apply(force)
       apply(force)
      apply(force)
     apply(force)
    apply(clarsimp)
    apply(simp add: isl3_def)
   apply(clarsimp)
   apply(simp add: isl3_def)
  apply(clarsimp)
  apply(simp add: prod_sets)
  apply(clarsimp)
  done

lemma compatible_derivations_coincide_heavily: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA (cons_l3   q1 A1 q1')]\<rparr> \<pi>1 \<lparr>cfg_conf=liftB \<alpha>1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA (cons_l3   q2 A2 q2')]\<rparr> \<pi>2 \<lparr>cfg_conf=liftB \<alpha>2\<rparr>
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 @ \<pi>1' = map (prod_to_edge G') \<pi>2 @ \<pi>2'
  \<Longrightarrow> [cons_l3 q1 A1 q1'] = [cons_l3 q2 A2 q2'] \<and> length \<pi>1 = length \<pi>2 \<and> \<alpha>1 = \<alpha>2"
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      ?d1.0="d1"
      and ?d2.0="d2"
      and i="min(length \<pi>1)(length \<pi>2)"
      in same_edge_productions_preserve_nonterminal_tail_length_l3l3)
         apply(force)
        apply(force)
       apply(force)
      apply(force)
     apply(force)
    apply(force)
   apply(force)
  apply(clarsimp)
  apply(rename_tac \<alpha> v1 v2)(*strict*)
  apply(subgoal_tac "length \<pi>1=length \<pi>2")
   apply(rename_tac \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(case_tac "length \<pi>1 < length \<pi>2")
    apply(rename_tac \<alpha> v1 v2)(*strict*)
    apply(rule_tac
      ?d1.0="d1"
      and ?d2.0="d2"
      in compatible_derivations_coincide_heavily_not_shorter)
              apply(rename_tac \<alpha> v1 v2)(*strict*)
              apply(force)
             apply(rename_tac \<alpha> v1 v2)(*strict*)
             apply(force)
            apply(rename_tac \<alpha> v1 v2)(*strict*)
            apply(force)
           apply(rename_tac \<alpha> v1 v2)(*strict*)
           apply(force)
          apply(rename_tac \<alpha> v1 v2)(*strict*)
          apply(force)
         apply(rename_tac \<alpha> v1 v2)(*strict*)
         prefer 2
         apply(force)
        apply(rename_tac \<alpha> v1 v2)(*strict*)
        prefer 2
        apply(force)
       apply(rename_tac \<alpha> v1 v2)(*strict*)
       apply(force)
      apply(rename_tac \<alpha> v1 v2)(*strict*)
      apply(force)
     apply(rename_tac \<alpha> v1 v2)(*strict*)
     apply(force)
    apply(rename_tac \<alpha> v1 v2)(*strict*)
    apply(force)
   apply(rename_tac \<alpha> v1 v2)(*strict*)
   apply(case_tac "length \<pi>2 < length \<pi>1")
    apply(rename_tac \<alpha> v1 v2)(*strict*)
    apply(rule_tac
      ?d1.0="d2"
      and ?d2.0="d1"
      in compatible_derivations_coincide_heavily_not_shorter)
              apply(rename_tac \<alpha> v1 v2)(*strict*)
              apply(force)
             apply(rename_tac \<alpha> v1 v2)(*strict*)
             apply(force)
            apply(rename_tac \<alpha> v1 v2)(*strict*)
            apply(force)
           apply(rename_tac \<alpha> v1 v2)(*strict*)
           apply(force)
          apply(rename_tac \<alpha> v1 v2)(*strict*)
          apply(rule sym)
          apply(force)
         apply(rename_tac \<alpha> v1 v2)(*strict*)
         prefer 2
         apply(rule_tac
      t="min (length \<pi>2) (length \<pi>1)"
      and s="min (length \<pi>1) (length \<pi>2)"
      in ssubst)
          apply(rename_tac \<alpha> v1 v2)(*strict*)
          apply(force)
         apply(rename_tac \<alpha> v1 v2)(*strict*)
         apply(force)
        apply(rename_tac \<alpha> v1 v2)(*strict*)
        prefer 2
        apply(rule_tac
      t="min (length \<pi>2) (length \<pi>1)"
      and s="min (length \<pi>1) (length \<pi>2)"
      in ssubst)
         apply(rename_tac \<alpha> v1 v2)(*strict*)
         apply(force)
        apply(rename_tac \<alpha> v1 v2)(*strict*)
        apply(force)
       apply(rename_tac \<alpha> v1 v2)(*strict*)
       apply(force)
      apply(rename_tac \<alpha> v1 v2)(*strict*)
      apply(force)
     apply(rename_tac \<alpha> v1 v2)(*strict*)
     apply(force)
    apply(rename_tac \<alpha> v1 v2)(*strict*)
    apply(force)
   apply(rename_tac \<alpha> v1 v2)(*strict*)
   apply(force)
  apply(rename_tac \<alpha> v1 v2)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<alpha>1=\<alpha>2")
   apply(rename_tac \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(simp add: cfgLM.trans_der_def get_configuration_def)
   apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
   apply(case_tac v1)
    apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
    prefer 2
    apply(rename_tac \<alpha> v1 v2 e ea a list)(*strict*)
    apply(rule liftB_with_nonterminal_inside)
    apply(force)
   apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
   apply(case_tac v2)
    apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
    prefer 2
    apply(rename_tac \<alpha> v1 v2 e ea a list)(*strict*)
    apply(rule liftB_with_nonterminal_inside)
    apply(force)
   apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<alpha> e ea)(*strict*)
   apply(subgoal_tac "\<alpha>1=\<alpha>")
    apply(rename_tac \<alpha> e ea)(*strict*)
    apply(subgoal_tac "\<alpha>2=\<alpha>")
     apply(rename_tac \<alpha> e ea)(*strict*)
     apply(force)
    apply(rename_tac \<alpha> e ea)(*strict*)
    apply(rule liftB_inj)
    apply(force)
   apply(rename_tac \<alpha> e ea)(*strict*)
   apply(rule liftB_inj)
   apply(force)
  apply(rename_tac \<alpha> v1 v2)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "q1 = q2 \<and> A1 = A2")
   apply(rename_tac \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(subgoal_tac "X" for X)
    apply(rename_tac \<alpha> v1 v2)(*strict*)
    prefer 2
    apply(rule_tac
      G="G"
      and d="d1"
      and i="0"
      and kleene_starT="True"
      and END="False"
      in cfgLM.trans_der_step_detail)
      apply(rename_tac \<alpha> v1 v2)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac \<alpha> v1 v2)(*strict*)
     apply(force)
    apply(rename_tac \<alpha> v1 v2)(*strict*)
    apply(case_tac \<pi>1)
     apply(rename_tac \<alpha> v1 v2)(*strict*)
     apply(clarsimp)
     apply(simp add: cfgLM.trans_der_def)
     apply(clarsimp)
     apply(case_tac \<alpha>2)
      apply(rename_tac \<alpha> v1 v2)(*strict*)
      apply(clarsimp)
     apply(rename_tac \<alpha> v1 v2 a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<alpha> v1 v2 a list)(*strict*)
    apply(force)
   apply(rename_tac \<alpha> v1 v2)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ci')(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac \<alpha> v1 v2 e ci')(*strict*)
    prefer 2
    apply(rule_tac
      G="G"
      and d="d2"
      and i="0"
      and kleene_starT="True"
      and END="False"
      in cfgLM.trans_der_step_detail)
      apply(rename_tac \<alpha> v1 v2 e ci')(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac \<alpha> v1 v2 e ci')(*strict*)
     apply(force)
    apply(rename_tac \<alpha> v1 v2 e ci')(*strict*)
    apply(case_tac \<pi>2)
     apply(rename_tac \<alpha> v1 v2 e ci')(*strict*)
     apply(clarsimp)
     apply(simp add: cfgLM.trans_der_def)
     apply(clarsimp)
     apply(rename_tac \<alpha> v1 v2 ci')(*strict*)
     apply(case_tac \<alpha>2)
      apply(rename_tac \<alpha> v1 v2 ci')(*strict*)
      apply(clarsimp)
     apply(rename_tac \<alpha> v1 v2 ci' a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<alpha> v1 v2 e ci' a list)(*strict*)
    apply(force)
   apply(rename_tac \<alpha> v1 v2 e ci')(*strict*)
   apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
    prefer 2
    apply(rule_tac
      ?p1.0="\<pi>1!0"
      and ?p2.0="\<pi>2!0"
      in same_source_edge_productions_have_similar_lhs)
          apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
          apply(force)
         apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
         apply(force)
        apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
        apply(simp add: cfgLM_step_relation_def)
       apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
       apply(simp add: cfgLM_step_relation_def)
      apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
      apply(simp add: cfgLM_step_relation_def)
      apply(clarsimp)
      apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a l r la ra)(*strict*)
      apply(case_tac ci'a)
      apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a l r la ra cfg_confa)(*strict*)
      apply(case_tac ci')
      apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a l r la ra cfg_confa cfg_confaa)(*strict*)
      apply(clarsimp)
      apply(rename_tac \<alpha> v1 v2 e ea l r la ra)(*strict*)
      apply(case_tac l)
       apply(rename_tac \<alpha> v1 v2 e ea l r la ra)(*strict*)
       prefer 2
       apply(rename_tac \<alpha> v1 v2 e ea l r la ra a list)(*strict*)
       apply(clarsimp)
      apply(rename_tac \<alpha> v1 v2 e ea l r la ra)(*strict*)
      apply(clarsimp)
      apply(rename_tac \<alpha> v1 v2 e ea la ra)(*strict*)
      apply(case_tac la)
       apply(rename_tac \<alpha> v1 v2 e ea la ra)(*strict*)
       prefer 2
       apply(rename_tac \<alpha> v1 v2 e ea la ra a list)(*strict*)
       apply(clarsimp)
      apply(rename_tac \<alpha> v1 v2 e ea la ra)(*strict*)
      apply(clarsimp)
      apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
      apply(rule_tac
      t="prod_lhs (\<pi>1 ! 0)"
      and s="cons_l3 q1 A1 q1'"
      in ssubst)
       apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
       apply(force)
      apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
      apply(simp (no_asm) add: isl3_def)
     apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
     apply(simp add: cfgLM_step_relation_def)
     apply(clarsimp)
     apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a l r la ra)(*strict*)
     apply(case_tac ci'a)
     apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a l r la ra cfg_confa)(*strict*)
     apply(case_tac ci')
     apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a l r la ra cfg_confa cfg_confaa)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<alpha> v1 v2 e ea l r la ra)(*strict*)
     apply(case_tac l)
      apply(rename_tac \<alpha> v1 v2 e ea l r la ra)(*strict*)
      prefer 2
      apply(rename_tac \<alpha> v1 v2 e ea l r la ra a list)(*strict*)
      apply(clarsimp)
     apply(rename_tac \<alpha> v1 v2 e ea l r la ra)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<alpha> v1 v2 e ea la ra)(*strict*)
     apply(case_tac la)
      apply(rename_tac \<alpha> v1 v2 e ea la ra)(*strict*)
      prefer 2
      apply(rename_tac \<alpha> v1 v2 e ea la ra a list)(*strict*)
      apply(clarsimp)
     apply(rename_tac \<alpha> v1 v2 e ea la ra)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
     apply(rule_tac
      t="prod_lhs (\<pi>2 ! 0)"
      and s="cons_l3 q2 A2 q2'"
      in ssubst)
      apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
      apply(force)
     apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
     apply(simp (no_asm) add: isl3_def)
    apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
    apply(case_tac \<pi>1)
     apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a l r la ra)(*strict*)
   apply(case_tac ci'a)
   apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a l r la ra cfg_confa)(*strict*)
   apply(case_tac ci')
   apply(rename_tac \<alpha> v1 v2 e ci' ea ci'a l r la ra cfg_confa cfg_confaa)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ea l r la ra)(*strict*)
   apply(case_tac l)
    apply(rename_tac \<alpha> v1 v2 e ea l r la ra)(*strict*)
    prefer 2
    apply(rename_tac \<alpha> v1 v2 e ea l r la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ea l r la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ea la ra)(*strict*)
   apply(case_tac la)
    apply(rename_tac \<alpha> v1 v2 e ea la ra)(*strict*)
    prefer 2
    apply(rename_tac \<alpha> v1 v2 e ea la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ea la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
   apply(simp add: cropTol3l2_single_def)
   apply(subgoal_tac "(case cons_l3 q1 A1 q1' of cons_l2 q A \<Rightarrow> cons_l2 q A | cons_l3 q1 A q2 \<Rightarrow> cons_l2 q1 A) = (case cons_l3 q2 A2 q2' of cons_l2 q A \<Rightarrow> cons_l2 q A | cons_l3 q1 A q2 \<Rightarrow> cons_l2 q1 A)")
    apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
    apply(thin_tac "(case prod_lhs (\<pi>1 ! 0) of cons_l2 q A \<Rightarrow> cons_l2 q A | cons_l3 q1 A q2 \<Rightarrow> cons_l2 q1 A) = (case prod_lhs (\<pi>2 ! 0) of cons_l2 q A \<Rightarrow> cons_l2 q A | cons_l3 q1 A q2 \<Rightarrow> cons_l2 q1 A)")
    apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
    apply(thin_tac "cons_l3 q2 A2 q2' = prod_lhs (\<pi>2 ! 0)")
    apply(thin_tac "cons_l3 q1 A1 q1' = prod_lhs (\<pi>1 ! 0)")
    apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 e ea)(*strict*)
   apply(force)
  apply(rename_tac \<alpha> v1 v2)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<pi>1=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac \<alpha> v1 v2)(*strict*)
  apply(erule disjE)
   apply(rename_tac \<alpha> v1 v2)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def get_configuration_def)
   apply(clarsimp)
   apply(case_tac "\<alpha>2")
    apply(rename_tac \<alpha> v1 v2)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 a list)(*strict*)
   apply(clarsimp)
   apply(case_tac \<alpha>)
    apply(rename_tac \<alpha> v1 v2 a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac v1 v2 a list)(*strict*)
    apply(case_tac v2)
     apply(rename_tac v1 v2 a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac v1 v2 a list aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<alpha> v1 v2 a list aa lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<alpha> v1 v2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<alpha> v1 v2 w' a')(*strict*)
  apply(rename_tac \<pi>1 p1)
  apply(rename_tac \<alpha> v1 v2 \<pi>1 p1)(*strict*)
  apply(subgoal_tac "\<pi>2=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac \<alpha> v1 v2 \<pi>1 p1)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac \<alpha> v1 v2 \<pi>1 p1)(*strict*)
  apply(erule disjE)
   apply(rename_tac \<alpha> v1 v2 \<pi>1 p1)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<alpha> v1 v2 \<pi>1 p1)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 w' a')(*strict*)
  apply(rename_tac \<pi>2 p2)
  apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d1"
      and i="length \<pi>1"
      and kleene_starT="False"
      and END="True"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
    apply(force)
   apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d2"
      and i="length \<pi>2"
      and kleene_starT="False"
      and END="True"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
    apply(force)
   apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
  apply(simp add: get_configuration_def)
  apply(case_tac v2)
   apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
   prefer 2
   apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2 e ea ci cia a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<alpha> v1 \<pi>1 p1 \<pi>2 p2 e ea ci cia a list)(*strict*)
   apply(rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac \<alpha> v1 v2 \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<alpha> \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
  apply(thin_tac "only_l3_nonterminals []")
  apply(subgoal_tac "\<alpha>2=\<alpha>")
   apply(rename_tac \<alpha> \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
   prefer 2
   apply(rule liftB_inj)
   apply(force)
  apply(rename_tac \<alpha> \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
  apply(subgoal_tac "(\<pi>1 @ [p1]) ! length \<pi>2 = p1")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
   prefer 2
   apply(rule_tac
      t="length \<pi>2"
      and s="length \<pi>1"
      in ssubst)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
   apply (metis nth_append_length)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea ci cia)(*strict*)
  apply(clarsimp)
  apply(thin_tac "(\<pi>1 @ [p1]) ! length \<pi>2 = p1")
  apply(case_tac ci)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea ci cia cfg_conf)(*strict*)
  apply(case_tac cia)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea ci cia cfg_conf cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea cfg_conf cfg_confa)(*strict*)
  apply(rename_tac w1 w2)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
  apply(erule_tac
      x="d1"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cons_l3   q2 A2 q1')]\<rparr>"
      in allE)
  apply(erule_tac
      x="\<pi>1"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = w1\<rparr>"
      in allE)
  apply(erule impE)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc 0"
      and v="[Some p1]"
      in get_labels_drop_tail)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
  apply(erule impE)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
  apply(erule_tac
      x="d2"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA (cons_l3   q2 A2 q2')]\<rparr>"
      in allE)
  apply(erule_tac
      x="\<pi>2"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = w2\<rparr>"
      in allE)
  apply(erule impE)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc 0"
      and v="[Some p2]"
      in get_labels_drop_tail)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
  apply(erule impE)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w2 w1a w2a)(*strict*)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1 w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1a w1b w2a w2b)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1a w1b w2a w2b l r la ra)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1a w1b w2a w2b l r la ra)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1a w1b w2a w2b l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1a w1b w2a w2b r la ra l')(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = la")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1a w1b w2a w2b r la ra l')(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB la"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1a w1b w2a w2b r la ra l')(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1a w1b w2a w2b r ra l' l'a)(*strict*)
  apply(thin_tac "setA (liftB l'a) = {}")
  apply(thin_tac "setA (liftB l') = {}")
  apply(subgoal_tac "w1a=l'")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1a w1b w2a w2b r ra l' l'a)(*strict*)
   prefer 2
   apply (metis append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1a w1b w2a w2b r ra l' l'a)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1b w2a w2b r ra l' l'a)(*strict*)
  apply(subgoal_tac "w1b=l'a")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1b w2a w2b r ra l' l'a)(*strict*)
   prefer 2
   apply (metis append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w1b w2a w2b r ra l' l'a)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w2a w2b r ra l' l'a)(*strict*)
  apply(case_tac w2b)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w2a w2b r ra l' l'a)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w2a w2b r ra l' l'a a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w2a r l' l'a list)(*strict*)
  apply(case_tac w2a)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w2a r l' l'a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea w2a r l' l'a list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a list lista)(*strict*)
  apply(rename_tac r1 r2)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1 r2)(*strict*)
  apply(case_tac r2)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1 r2)(*strict*)
   prefer 2
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1 r2 a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1 a list)(*strict*)
   apply(rule_tac
      x="\<alpha>2"
      and ?w1.0="liftB l' @ prod_rhs p1"
      in liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1 r2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1)(*strict*)
   prefer 2
   apply(rule liftB_append)
   apply(rule sym)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1 l1 l2)(*strict*)
  apply(subgoal_tac "l'=l1")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1 l1 l2)(*strict*)
   prefer 2
   apply(rule liftB_inj)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l' l'a r1 l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a r1 l1 l2)(*strict*)
  apply(thin_tac "liftB (l1 @ l2) = liftB l1 @ liftB l2")
  apply(case_tac r1)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a r1 l1 l2)(*strict*)
   prefer 2
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a r1 l1 l2 a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2 a list)(*strict*)
   apply(rule_tac
      x="l1@l2 "
      and ?w1.0="liftB l'a @ prod_rhs p2"
      in liftB_with_nonterminal_inside)
   apply(rule sym)
   apply (simp only: liftB_commutes_over_concat)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a r1 l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2)(*strict*)
  apply(subgoal_tac "l2=[]")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2)(*strict*)
   prefer 2
   apply(subgoal_tac "LR1ProdFormSimp G")
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2)(*strict*)
    prefer 2
    apply(simp add: split_TSstructure_def)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2)(*strict*)
   apply(simp add: LR1ProdFormSimp_def)
   apply(erule_tac
      x="p1"
      in ballE)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2)(*strict*)
    apply(clarsimp)
    apply(case_tac l2)
     apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2 a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2 b A B)(*strict*)
   apply(erule disjE)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2 b A B)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 l2 b A B)(*strict*)
    apply(case_tac l2)
     apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 l2 b A B)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 l2 b A B a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 A B a list)(*strict*)
    apply(case_tac list)
     apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 A B a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 A B a list aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2 b A B)(*strict*)
   apply(erule disjE)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2 b A B)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 l2 A B)(*strict*)
    apply(case_tac l2)
     apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 l2 A B)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 l2 A B a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2 b A B)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 l2 A B C)(*strict*)
   apply(case_tac l2)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 l2 A B C)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 p2 e ea l'a l1 l2 A B C a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1)(*strict*)
   prefer 2
   apply(rule liftB_append)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1a l2)(*strict*)
  apply(thin_tac "liftB l1a @ liftB l2 = liftB (l1a @ l2)")
  apply(subgoal_tac "l'a=l1a")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1a l2)(*strict*)
   prefer 2
   apply(rule liftB_inj)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l'a l1a l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2)(*strict*)
  apply(subgoal_tac "l2=[]")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2)(*strict*)
   prefer 2
   apply(subgoal_tac "LR1ProdFormSimp G")
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2)(*strict*)
    prefer 2
    apply(simp add: split_TSstructure_def)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2)(*strict*)
   apply(simp add: LR1ProdFormSimp_def)
   apply(erule_tac
      x="p2"
      in ballE)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2)(*strict*)
    apply(clarsimp)
    apply(case_tac l2)
     apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2 a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2 b A B)(*strict*)
   apply(erule disjE)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2 b A B)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a l2 b A B)(*strict*)
    apply(case_tac l2)
     apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a l2 b A B)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a l2 b A B a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a A B a list)(*strict*)
    apply(case_tac list)
     apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a A B a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a A B a list aa lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2 b A B)(*strict*)
   apply(erule disjE)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2 b A B)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a l2 A B)(*strict*)
    apply(case_tac l2)
     apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a l2 A B)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a l2 A B a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2 b A B)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a l2 A B C)(*strict*)
   apply(case_tac l2)
    apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a l2 A B C)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 e ea l1a l2 A B C a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a)(*strict*)
  apply(case_tac p1)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a prod_lhsa prod_rhsa)(*strict*)
  apply(case_tac p2)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ea l1a prod_lhsa prod_rhsa prod_lhsaa prod_rhsaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e ea l1a prod_lhs prod_lhsa)(*strict*)
  apply(rename_tac e1 e2 \<alpha> X1 X2)
  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2)(*strict*)
  apply(case_tac X1)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
    prefer 2
    apply(rule_tac
      \<pi>="\<pi>1"
      and c'="\<lparr>cfg_conf = liftB \<alpha> @ [teA X1]\<rparr>"
      and d="d1"
      in only_l3_nonterminals_reachable)
         apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
         apply(simp add: F2LR1inputx_def)
         apply(force)
        apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
    apply(rule_tac
      n="length(\<pi>1)"
      in cfgLM.trans_der_crop)
        apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
        apply(simp add: split_TSstructure_def)
       apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
       apply(force)
      apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
      apply(force)
     apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q b)(*strict*)
   apply(simp add: setAConcat)
   apply(force)
  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a)(*strict*)
  apply(case_tac X2)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
    prefer 2
    apply(rule_tac
      \<pi>="\<pi>2"
      and c'="\<lparr>cfg_conf = liftB \<alpha> @ [teA X2]\<rparr>"
      and d="d2"
      in only_l3_nonterminals_reachable)
         apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
         apply(simp add: F2LR1inputx_def)
         apply(force)
        apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
       apply(simp add: F2LR1inputx_def)
      apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
    apply(rule_tac
      n="length(\<pi>2)"
      in cfgLM.trans_der_crop)
        apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
        apply(simp add: split_TSstructure_def)
       apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
       apply(force)
      apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
      apply(force)
     apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q ba)(*strict*)
   apply(simp add: setAConcat)
   apply(force)
  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> X1 X2 q1 b q2a q1a ba q2aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa)(*strict*)
  apply(subgoal_tac "q1=q1a \<and> b=ba")
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa)(*strict*)
   prefer 2
   apply(subgoal_tac "X" for X)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      ?x1.0="[]"
      and ?x2.0="[]"
      and ?v2.0="\<alpha>"
      and ?w1.0="[(cons_l3 q1 b q2a)]"
      and ?v1.0="\<alpha>"
      and ?w2.0="[cons_l3 q1a ba q2aa]"
      and n="(length \<pi>1)"
      and ?d1.0="d1"
      and ?d2.0="d2"
      in cfgLM_positions_remain_compatible_prime_prime)
                  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
                  apply(simp add: F2LR1inputx_def)
                  apply(force)
                 apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
                 apply(simp add: F2LR1inputx_def)
                 apply(force)
                apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
                apply(simp add: F2LR1inputx_def)
               apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
             apply(simp add: split_TSstructure_def)
            apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
            apply(force)
           apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
           apply(force)
          apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
          apply(force)
         apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
         apply(force)
        apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
        apply(force)
       apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
       apply(force)
      apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
      apply(force)
     apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa e ea)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa)(*strict*)
   apply(simp add: equal_stacks_def equal_front_states_def equal_front_state_def equal_stack_def)
  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q1 b q2a q1a ba q2aa)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> q2a q1a ba q2aa)(*strict*)
  apply(rename_tac qx1 qx b qx2)
  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
   prefer 2
   apply(rule_tac
      \<alpha>="\<alpha>"
      and v="[]"
      and d="d1"
      and \<pi>="\<pi>1"
      in last_back_state_is_preserved)
     apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
   apply(rule_tac
      n="length(\<pi>1)"
      in cfgLM.trans_der_crop)
       apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
      apply(force)
     apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
    apply(rule_tac
      t="length \<pi>1"
      and s="length \<pi>2"
      in ssubst)
     apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
   apply(force)
  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
   prefer 2
   apply(rule_tac
      \<alpha>="\<alpha>"
      and v="[]"
      and d="d2"
      and \<pi>="\<pi>2"
      in last_back_state_is_preserved)
     apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
   apply(rule_tac
      n="length(\<pi>2)"
      in cfgLM.trans_der_crop)
       apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
      apply(force)
     apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
  apply(force)
  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx1 qx b qx2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx b)(*strict*)
  apply(rule compatible_pop_productions_have_equal_last_state)
    apply(rename_tac \<pi>1 \<pi>2 e1 e2 \<alpha> qx b)(*strict*)
    apply(force)+
  done

lemma pointwise_equality: "
       F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w1\<rparr> (foldl (@) [] f\<pi>1) \<lparr>cfg_conf = liftB (foldl (@) [] fw1)\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = liftA w2\<rparr> (foldl (@) [] f\<pi>2) \<lparr>cfg_conf = liftB (foldl (@) [] fw2)\<rparr>
  \<Longrightarrow> map (prod_to_edge G') (foldl (@) [] f\<pi>1) @ map (prod_to_edge G') \<pi>12 = map (prod_to_edge G') (foldl (@) [] f\<pi>2) @ map (prod_to_edge G') \<pi>22
  \<Longrightarrow> notfinishingL (foldl (@) [] f\<pi>1)
  \<Longrightarrow> notfinishingL \<pi>12
  \<Longrightarrow> notfinishingL (foldl (@) [] f\<pi>2)
  \<Longrightarrow> notfinishingL \<pi>22
  \<Longrightarrow> only_l3_nonterminals w2
  \<Longrightarrow> only_l3_nonterminals w1
  \<Longrightarrow> cfgLM.trans_der_list G ds1 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w1) f\<pi>1 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1)
  \<Longrightarrow> cfgLM.trans_der_list G ds2 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w2) f\<pi>2 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw2)
  \<Longrightarrow> i < length w1
  \<Longrightarrow> i < length w2
  \<Longrightarrow> w1 ! i = w2 ! i \<and> length (f\<pi>1 ! i) = length (f\<pi>2 ! i) \<and> fw1 ! i = fw2 ! i"
  apply(induct i rule: less_induct)
  apply(rename_tac x)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
   apply(rename_tac x)(*strict*)
   prefer 2
   apply(rule_tac
      k="x"
      and ?n1.0="x"
      and ?n2.0="x"
      and ?f\<pi>1.0="f\<pi>1"
      and ?f\<pi>2.0="f\<pi>2"
      in map_foldl_prefix_equal_hlp)
        apply(rename_tac x)(*strict*)
        apply(clarsimp)
       apply(rename_tac x)(*strict*)
       apply(force)
      apply(rename_tac x)(*strict*)
      apply(simp add: cfgLM.trans_der_list_def)
     apply(rename_tac x)(*strict*)
     apply(simp add: cfgLM.trans_der_list_def)
    apply(rename_tac x)(*strict*)
    apply(force)
   apply(rename_tac x)(*strict*)
   apply(force)
  apply(rename_tac x)(*strict*)
  apply(subgoal_tac "\<exists>\<pi>1 \<pi>2. map (prod_to_edge G') (f\<pi>1 ! x) @ \<pi>1 = map (prod_to_edge G') (f\<pi>2 ! x) @ \<pi>2")
   apply(rename_tac x)(*strict*)
   prefer 2
   apply(rule_tac
      w="map (prod_to_edge G') (foldl (@) [] (take x f\<pi>1))"
      and x="map (prod_to_edge G') (foldl (@) [] f\<pi>1) @ map (prod_to_edge G') \<pi>12"
      and v="map (prod_to_edge G') (foldl (@) [] (take x f\<pi>2))"
      and y="map (prod_to_edge G') (foldl (@) [] f\<pi>2) @ map (prod_to_edge G') \<pi>22"
      in compatible_by_embedding)
      apply(rename_tac x)(*strict*)
      apply(rule_tac
      t="map (prod_to_edge G') (foldl (@) [] (take x f\<pi>1)) @ map (prod_to_edge G') (f\<pi>1 ! x)"
      and s="map (prod_to_edge G') (foldl (@) [] (take x f\<pi>1) @ (f\<pi>1 ! x))"
      in ssubst)
       apply(rename_tac x)(*strict*)
       apply(force)
      apply(rename_tac x)(*strict*)
      apply(rule_tac
      t="foldl (@) [] (take x f\<pi>1) @ f\<pi>1 ! x"
      and s="foldl (@) [] (take (Suc x) f\<pi>1)"
      in ssubst)
       apply(rename_tac x)(*strict*)
       apply(rule foldl_tail)
       apply(simp add: cfgLM.trans_der_list_def)
      apply(rename_tac x)(*strict*)
      apply(rule prefix_append_bigger)
      apply(rule map_prefix)
      apply(rule foldl_preserves_prefix)
      apply(rule take_prefix)
     apply(rename_tac x)(*strict*)
     apply(rule_tac
      t="map (prod_to_edge G') (foldl (@) [] (take x f\<pi>2)) @ map (prod_to_edge G') (f\<pi>2 ! x)"
      and s="map (prod_to_edge G') (foldl (@) [] (take x f\<pi>2) @ (f\<pi>2 ! x))"
      in ssubst)
      apply(rename_tac x)(*strict*)
      apply(force)
     apply(rename_tac x)(*strict*)
     apply(rule_tac
      t="foldl (@) [] (take x f\<pi>2) @ f\<pi>2 ! x"
      and s="foldl (@) [] (take (Suc x) f\<pi>2)"
      in ssubst)
      apply(rename_tac x)(*strict*)
      apply(rule foldl_tail)
      apply(simp add: cfgLM.trans_der_list_def)
     apply(rename_tac x)(*strict*)
     apply(rule prefix_append_bigger)
     apply(rule map_prefix)
     apply(rule foldl_preserves_prefix)
     apply(rule take_prefix)
    apply(rename_tac x)(*strict*)
    apply(force)
   apply(rename_tac x)(*strict*)
   apply(force)
  apply(rename_tac x)(*strict*)
  apply(clarsimp)
  apply(rename_tac x \<pi>1 \<pi>2)(*strict*)
  apply(simp add: cfgLM.trans_der_list_def)
  apply(clarsimp)
  apply(erule_tac
      x="x"
      in allE)+
  apply(clarsimp)
  apply(case_tac "w1!x")
   apply(rename_tac x \<pi>1 \<pi>2 q b)(*strict*)
   apply(rule only_l3_nonterminals_nth_l2)
     apply(rename_tac x \<pi>1 \<pi>2 q b)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac x \<pi>1 \<pi>2 q b)(*strict*)
    apply(force)
   apply(rename_tac x \<pi>1 \<pi>2 q b)(*strict*)
   apply(force)
  apply(rename_tac x \<pi>1 \<pi>2 q1 b q2)(*strict*)
  apply(case_tac "w2!x")
   apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q ba)(*strict*)
   apply(rule only_l3_nonterminals_nth_l2)
     apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q ba)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q ba)(*strict*)
    apply(force)
   apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q ba)(*strict*)
   apply(force)
  apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q1a ba q2a)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
   apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q1a ba q2a)(*strict*)
   prefer 2
   apply(rule_tac
      ?d1.0="ds1!x"
      and ?d2.0="ds2!x"
      in compatible_derivations_coincide_heavily)
       apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q1a ba q2a)(*strict*)
       apply(force)
      apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q1a ba q2a)(*strict*)
      apply(force)
     apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q1a ba q2a)(*strict*)
     apply(force)
    apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q1a ba q2a)(*strict*)
    apply(force)
   apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q1a ba q2a)(*strict*)
   apply(force)
  apply(rename_tac x \<pi>1 \<pi>2 q1 b q2 q1a ba q2a)(*strict*)
  apply(clarsimp)
  done

lemma same_edge_productions_preserve_nonterminal_tail_length_l2l3: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA (cons_l2   q1 A1)]\<rparr> \<pi>11 c1
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA (cons_l3   q2 A2 q2')]\<rparr> \<pi>21 c2
  \<Longrightarrow> map (prod_to_edge G') \<pi>11 @ map (prod_to_edge G') \<pi>12 =
        map (prod_to_edge G') \<pi>21 @ map (prod_to_edge G') \<pi>22
  \<Longrightarrow> notfinishingL (\<pi>11)
  \<Longrightarrow> notfinishingL (\<pi>12)
  \<Longrightarrow> notfinishingL (\<pi>21)
  \<Longrightarrow> notfinishingL (\<pi>22)
  \<Longrightarrow> i\<le>length \<pi>11
  \<Longrightarrow> i\<le>length \<pi>21
  \<Longrightarrow> \<exists>\<alpha> v1 v2. (v1\<noteq>[] \<and> length v1\<le>length v2)
  \<and> cfg_conf(the(get_configuration(d1 i))) = liftB \<alpha> @ liftA v1
  \<and> cfg_conf(the(get_configuration(d2 i))) = liftB \<alpha> @ liftA v2
  \<and> l3_l2_separation v1
  \<and> only_l3_nonterminals v2"
  apply(induct i)
   apply(clarsimp)
   apply(simp add: get_configuration_def cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac e ea)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(rule conjI)
    apply(rename_tac e ea)(*strict*)
    apply(force)
   apply(rename_tac e ea)(*strict*)
   apply(rule conjI)
    apply(rename_tac e ea)(*strict*)
    apply(force)
   apply(rename_tac e ea)(*strict*)
   apply(simp add: l3_l2_separation_def only_l3_nonterminals_def only_l3_nonterminals_and_l3_adjacency_def proper_l3_seq_def)
   apply(clarsimp)
   apply(rename_tac e ea w1 w2 xA)(*strict*)
   apply(case_tac w1)
    apply(rename_tac e ea w1 w2 xA)(*strict*)
    apply(clarsimp)
   apply(rename_tac e ea w1 w2 xA a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac i)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d1"
      and i="i"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac i \<alpha> v1 v2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac i \<alpha> v1 v2)(*strict*)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2)(*strict*)
   apply(force)
  apply(rename_tac i \<alpha> v1 v2)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d2"
      and i="i"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
   apply(force)
  apply(rename_tac i \<alpha> v1 v2 e ci ci')(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci ci' ea cia ci'a)(*strict*)
  apply(simp add: get_configuration_def)
  apply(case_tac ci)
  apply(rename_tac i \<alpha> v1 v2 e ci ci' ea cia ci'a cfg_confa)(*strict*)
  apply(case_tac cia)
  apply(rename_tac i \<alpha> v1 v2 e ci ci' ea cia ci'a cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a l r la ra)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a l r la ra)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r la ra l')(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = la")
   apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r la ra l')(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB la"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r la ra l')(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r ra l' l'a)(*strict*)
  apply(thin_tac "setA (liftB l'a) = {}")
  apply(thin_tac "setA (liftB l') = {}")
  apply(case_tac ci')
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r ra l' l'a cfg_confa)(*strict*)
  apply(case_tac ci'a)
  apply(rename_tac i \<alpha> v1 v2 e ci' ea ci'a r ra l' l'a cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 e ea r ra l' l'a)(*strict*)
  apply(subgoal_tac "\<alpha>=l'")
   apply(rename_tac i \<alpha> v1 v2 e ea r ra l' l'a)(*strict*)
   prefer 2
   apply (metis liftAMap append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac i \<alpha> v1 v2 e ea r ra l' l'a)(*strict*)
  apply(subgoal_tac "\<alpha>=l'a")
   apply(rename_tac i \<alpha> v1 v2 e ea r ra l' l'a)(*strict*)
   prefer 2
   apply (metis liftAMap append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac i \<alpha> v1 v2 e ea r ra l' l'a)(*strict*)
  apply(clarsimp)
  apply(rename_tac i v1 v2 e ea r ra l')(*strict*)
  apply(case_tac v1)
   apply(rename_tac i v1 v2 e ea r ra l')(*strict*)
   apply(clarsimp)
  apply(rename_tac i v1 v2 e ea r ra l' a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac i v2 e ea ra l' list)(*strict*)
  apply(case_tac v2)
   apply(rename_tac i v2 e ea ra l' list)(*strict*)
   apply(clarsimp)
  apply(rename_tac i v2 e ea ra l' list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac i e ea l' list lista)(*strict*)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d1 \<lparr>cfg_conf = [teA (SSX)]\<rparr> \<pi>11 c1" for SSX)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA (SSX)]\<rparr> \<pi>21 c2" for SSX)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(subgoal_tac "prod_to_edge G' (\<pi>11!i) = prod_to_edge G' (\<pi>21!i)")
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(rule_tac
      t="prod_to_edge G' (\<pi>11 ! i)"
      and s="(map (prod_to_edge G') \<pi>11 @ map (prod_to_edge G') \<pi>12)!i"
      in ssubst)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(rule_tac
      t="(map (prod_to_edge G') \<pi>11 @ map (prod_to_edge G') \<pi>12) ! i"
      and s="(map (prod_to_edge G') \<pi>11) ! i"
      in ssubst)
     apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
     apply(rule nth_append_1)
     apply(force)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(rule sym)
    apply(rule nth_map)
    apply(force)
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   apply(rule_tac
      t="prod_to_edge G' (\<pi>21 ! i)"
      and s="(map (prod_to_edge G') \<pi>21 @ map (prod_to_edge G') \<pi>22)!i"
      in ssubst)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(rule_tac
      t="(map (prod_to_edge G') \<pi>21 @ map (prod_to_edge G') \<pi>22) ! i"
      and s="(map (prod_to_edge G') \<pi>21) ! i"
      in ssubst)
     apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
     apply(rule nth_append_1)
     apply(force)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(rule sym)
    apply(rule nth_map)
    apply(force)
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   apply(force)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "map (prod_to_edge G') \<pi>11 @ map (prod_to_edge G') \<pi>12 = map (prod_to_edge G') \<pi>21 @ map (prod_to_edge G') \<pi>22")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(rule_tac
      ?p1.0="\<pi>11!i"
      and ?p2.0="\<pi>21!i"
      in nonfinal_prod_to_edge_to_special_production_set)
         apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
         apply(force)
        apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
        apply(force)
       apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
       apply(force)
      apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
      apply(force)
     apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
     apply(force)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(simp add: notfinishingL_def notfinishing_def)
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   apply(simp add: notfinishingL_def notfinishing_def)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "prod_to_edge G' (\<pi>11 ! i) = prod_to_edge G' (\<pi>21 ! i)")
  apply(thin_tac "d1 i = Some (pair e1 \<lparr>cfg_conf = liftB \<alpha> @ teA (prod_lhs (\<pi>11 ! i)) # liftA v1\<rparr>)")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "d1 (Suc i) = Some (pair (Some (\<pi>11 ! i)) \<lparr>cfg_conf = liftB \<alpha> @ prod_rhs (\<pi>11 ! i) @ liftA v1\<rparr>)")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "d2 i = Some (pair e2 \<lparr>cfg_conf = liftB \<alpha> @ teA (prod_lhs (\<pi>21 ! i)) # liftA v2\<rparr>)")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "d2 (Suc i) = Some (pair (Some (\<pi>21 ! i)) \<lparr>cfg_conf = liftB \<alpha> @ prod_rhs (\<pi>21 ! i) @ liftA v2\<rparr>)")
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(erule disjE)+
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   apply(clarsimp)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(clarsimp)
    apply(rename_tac i \<alpha> v1 v2 x y)(*strict*)
    apply(erule disjE)+
      apply(rename_tac i \<alpha> v1 v2 x y)(*strict*)
      apply(simp add: prod_sets)
      apply(clarsimp)
      apply(rename_tac i \<alpha> v1 v2 x y qt qta)(*strict*)
      apply(rule_tac
      x="\<alpha>@[y]"
      in exI)
      apply(simp add: simpY)
      apply(rename_tac i v1 v2 x y qt qta)(*strict*)
      apply(rule_tac
      x="cons_l3 (edge_trg x) (edge_pop x ! 0) qt#v1"
      in exI)
      apply(clarsimp)
      apply(rule_tac
      x="cons_l3 (edge_trg x) (edge_pop x ! 0) qta#v2"
      in exI)
      apply(clarsimp)
      apply(rule conjI)
       apply(rename_tac i v1 v2 x y qt qta)(*strict*)
       apply(rule l3_l2_separation_replace_front)
       apply(force)
      apply(rename_tac i v1 v2 x y qt qta)(*strict*)
      apply(rule only_l3_nonterminals_replace_front)
      apply(force)
     apply(rename_tac i \<alpha> v1 v2 x y)(*strict*)
     apply(simp add: prod_sets)
     apply(clarsimp)
     apply(rename_tac i \<alpha> v1 v2 x y qt)(*strict*)
     apply(rule only_l3_nonterminals_l2_at_front)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x y)(*strict*)
    apply(erule disjE)+
     apply(rename_tac i \<alpha> v1 v2 x y)(*strict*)
     apply(simp add: prod_sets)
     apply(clarsimp)
     apply(rename_tac i \<alpha> v1 v2 x y qt)(*strict*)
     apply(rule_tac
      x="\<alpha>@[y]"
      in exI)
     apply(simp add: simpY)
     apply(rename_tac i v1 v2 x y qt)(*strict*)
     apply(rule_tac
      x="cons_l2 (edge_trg x) (edge_pop x ! 0)#v1"
      in exI)
     apply(clarsimp)
     apply(rule_tac
      x="cons_l3 (edge_trg x) (edge_pop x ! 0) qt#v2"
      in exI)
     apply(clarsimp)
     apply(subgoal_tac "v1=[]")
      apply(rename_tac i v1 v2 x y qt)(*strict*)
      prefer 2
      apply(rule l3_l2_separation_l2_at_front)
      apply(force)
     apply(rename_tac i v1 v2 x y qt)(*strict*)
     apply(rule conjI)
      apply(rename_tac i v1 v2 x y qt)(*strict*)
      apply(clarsimp)
      apply(rename_tac i v2 x y qt)(*strict*)
      apply(rule l3_l2_separation_single)
     apply(rename_tac i v1 v2 x y qt)(*strict*)
     apply(rule only_l3_nonterminals_replace_front)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x y)(*strict*)
    apply(simp add: prod_sets)
    apply(rule only_l3_nonterminals_l2_at_front)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(clarsimp)
    apply(simp add: prod_sets)
    apply(rule_tac
      x="\<alpha>"
      in exI)
    apply(simp add: simpY)
    apply(rename_tac i v1 v2 x)(*strict*)
    apply(rule_tac
      x="v1"
      in exI)
    apply(clarsimp)
    apply(rule conjI)
     apply(rename_tac i v1 v2 x)(*strict*)
     apply(rule l3_l2_separation_l3_at_front)
     apply(force)
    apply(rename_tac i v1 v2 x)(*strict*)
    apply(rule_tac
      x="v2"
      in exI)
    apply(clarsimp)
    apply(rule conjI)
     apply(rename_tac i v1 v2 x)(*strict*)
     apply(rule_tac
      w="[X]" for X
      in l3_l2_separation_drop)
      apply(rename_tac i v1 v2 x)(*strict*)
      apply(force)
     apply(rename_tac i v1 v2 x)(*strict*)
     apply(rule l3_l2_separation_l3_at_front)
     apply(force)
    apply(rename_tac i v1 v2 x)(*strict*)
    apply(rule_tac
      w="[X]" for X
      in only_l3_nonterminals_drop)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(clarsimp)
   apply(erule disjE)+
     apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
     apply(simp add: prod_sets)
     apply(clarsimp)
     apply(rename_tac i \<alpha> v1 v2 x qs qsa qt qta)(*strict*)
     apply(rule_tac
      x="\<alpha>"
      in exI)
     apply(simp add: simpY)
     apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
     apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l3 qs (edge_pop x ! 0) qt]@v1"
      in exI)
     apply(clarsimp)
     apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qsa,cons_l3 qsa (edge_pop x ! 0) qta]@v2"
      in exI)
     apply(clarsimp)
     apply(rule conjI)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule_tac
      ?w1.0="[SSX]"
      and ?w2.0="[SSY]@v1" for SSX SSY
      in l3_l2_separation_append)
        apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
        prefer 3
        apply(force)
       apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
       apply(rule only_l3_nonterminals_single)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule_tac
      ?w1.0="[X]"
      and ?w2.0="v1" for X
      in l3_l2_separation_append)
        apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
        prefer 3
        apply(force)
       apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
       apply(rule only_l3_nonterminals_single)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule_tac
      w="[X]" for X
      in l3_l2_separation_drop)
       apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
       apply(force)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule l3_l2_separation_l3_at_front)
      apply(force)
     apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
     apply(rule_tac
      ?w1.0="[SSX]"
      and ?w2.0="[SSY]@v2" for SSX SSY
      in only_l3_nonterminals_append)
       apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
       prefer 3
       apply(force)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule only_l3_nonterminals_single)
     apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
     apply(rule_tac
      ?w1.0="[SSX]"
      and ?w2.0="v2" for SSX
      in only_l3_nonterminals_append)
       apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
       prefer 3
       apply(force)
      apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
      apply(rule only_l3_nonterminals_single)
     apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
     apply(rule_tac
      w="[X]" for X
      in only_l3_nonterminals_drop)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(simp add: prod_sets)
    apply(clarsimp)
    apply(rename_tac i \<alpha> v1 v2 x qs qt)(*strict*)
    apply(erule disjE)
     apply(rename_tac i \<alpha> v1 v2 x qs qt)(*strict*)
     apply(clarsimp)
     apply(rename_tac i \<alpha> v1 v2 x qs qt)(*strict*)
     apply(rule only_l3_nonterminals_l2_at_front)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x qs qt)(*strict*)
    apply(rule only_l3_nonterminals_l2_at_front)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(simp add: prod_sets)
   apply(erule disjE)+
     apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
     apply(clarsimp)
     apply(rename_tac i \<alpha> v1 v2 x qs qt)(*strict*)
     apply(rule_tac
      x="\<alpha>"
      in exI)
     apply(simp add: simpY)
     apply(rename_tac i v1 v2 x qs qt)(*strict*)
     apply(subgoal_tac "v1=[]")
      apply(rename_tac i v1 v2 x qs qt)(*strict*)
      prefer 2
      apply(rule l3_l2_separation_l2_at_front)
      apply(force)
     apply(rename_tac i v1 v2 x qs qt)(*strict*)
     apply(clarsimp)
     apply(rename_tac i v2 x qs qt)(*strict*)
     apply(rule_tac
      x="[ (cons_l2   (edge_trg x) (edge_push x ! 0))]"
      in exI)
     apply(clarsimp)
     apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l3 qs (edge_pop x ! 0) qt]@v2"
      in exI)
     apply(clarsimp)
     apply(rule conjI)
      apply(rename_tac i v2 x qs qt)(*strict*)
      apply(rule l3_l2_separation_single)
     apply(rename_tac i v2 x qs qt)(*strict*)
     apply(rule_tac
      ?w1.0="[SSX]" for SSX
      in only_l3_nonterminals_append)
       apply(rename_tac i v2 x qs qt)(*strict*)
       prefer 3
       apply(force)
      apply(rename_tac i v2 x qs qt)(*strict*)
      apply(rule only_l3_nonterminals_single)
     apply(rename_tac i v2 x qs qt)(*strict*)
     apply(rule only_l3_nonterminals_replace_front)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(clarsimp)
    apply(rename_tac i \<alpha> v1 v2 x qs qsa qt)(*strict*)
    apply(rule_tac
      x="\<alpha>"
      in exI)
    apply(simp add: simpY)
    apply(rename_tac i v1 v2 x qs qsa qt)(*strict*)
    apply(subgoal_tac "v1=[]")
     apply(rename_tac i v1 v2 x qs qsa qt)(*strict*)
     prefer 2
     apply(rule l3_l2_separation_l2_at_front)
     apply(force)
    apply(rename_tac i v1 v2 x qs qsa qt)(*strict*)
    apply(clarsimp)
    apply(rename_tac i v2 x qs qsa qt)(*strict*)
    apply(rule_tac
      x="[ (cons_l3   (edge_trg x) (edge_push x ! 0) qsa), (cons_l2 qsa (edge_pop x ! 0))]"
      in exI)
    apply(rename_tac i v2 x qs qsa qt)(*strict*)
    apply(clarsimp)
    apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l3 qs (edge_pop x ! 0) qt]@v2"
      in exI)
    apply(clarsimp)
    apply(rule conjI)
     apply(rename_tac i v2 x qs qsa qt)(*strict*)
     apply(rule_tac
      ?w1.0="[SSX]" 
      and ?w2.0="[SSY]" for SSX SSY
      in l3_l2_separation_append)
       apply(rename_tac i v2 x qs qsa qt)(*strict*)
       prefer 3
       apply(force)
      apply(rename_tac i v2 x qs qsa qt)(*strict*)
      apply(rule only_l3_nonterminals_single)
     apply(rename_tac i v2 x qs qsa qt)(*strict*)
     apply(rule l3_l2_separation_single)
    apply(rename_tac i v2 x qs qsa qt)(*strict*)
    apply(rule_tac
      ?w1.0="[SSX]" 
      and ?w2.0="[SSY]@v2" for SSX SSY
      in only_l3_nonterminals_append)
      apply(rename_tac i v2 x qs qsa qt)(*strict*)
      prefer 3
      apply(force)
     apply(rename_tac i v2 x qs qsa qt)(*strict*)
     apply(rule only_l3_nonterminals_single)
    apply(rename_tac i v2 x qs qsa qt)(*strict*)
    apply(rule_tac
      ?w1.0="[SSX]" 
      and ?w2.0="v2" for SSX
      in only_l3_nonterminals_append)
      apply(rename_tac i v2 x qs qsa qt)(*strict*)
      prefer 3
      apply(force)
     apply(rename_tac i v2 x qs qsa qt)(*strict*)
     apply(rule only_l3_nonterminals_single)
    apply(rename_tac i v2 x qs qsa qt)(*strict*)
    apply(rule_tac
      w="[X]" for X
      in only_l3_nonterminals_drop)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(erule disjE)+
     apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
     apply(rule only_l3_nonterminals_l2_at_front)
     apply(force)
    apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
    apply(clarsimp)
    apply(rename_tac i \<alpha> v1 v2 x qs)(*strict*)
    apply(rule only_l3_nonterminals_l2_at_front)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x)(*strict*)
   apply(clarsimp)
   apply(rename_tac i \<alpha> v1 v2 x qs)(*strict*)
   apply(erule disjE)
    apply(rename_tac i \<alpha> v1 v2 x qs)(*strict*)
    apply(clarsimp)
    apply(rule only_l3_nonterminals_l2_at_front)
    apply(force)
   apply(rename_tac i \<alpha> v1 v2 x qs)(*strict*)
   apply(clarsimp)
   apply(rename_tac i \<alpha> v1 v2 x qs qsa)(*strict*)
   apply(rule only_l3_nonterminals_l2_at_front)
   apply(force)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2)(*strict*)
  apply(simp add: prod_sets)
  apply(clarsimp)
  apply(rename_tac i \<alpha> v1 v2 ia ib A Aa)(*strict*)
  apply(rule only_l3_nonterminals_l2_at_front)
  apply(force)
  done

lemma compatible_elimination_must_have_same_length: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=liftA w1\<rparr> \<pi>11 \<lparr>cfg_conf=liftB \<alpha>1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=liftA w2\<rparr> \<pi>21 \<lparr>cfg_conf=liftB \<alpha>2\<rparr>
  \<Longrightarrow> map (prod_to_edge G') \<pi>11 @ map (prod_to_edge G') \<pi>12 =
        map (prod_to_edge G') \<pi>21 @ map (prod_to_edge G') \<pi>22
  \<Longrightarrow> cfgLM.trans_der G d1' \<lparr>cfg_conf=[teA A1]\<rparr> \<pi>12 \<lparr>cfg_conf=v1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2' \<lparr>cfg_conf=[teA A2]\<rparr> \<pi>22 \<lparr>cfg_conf=v2\<rparr>
  \<Longrightarrow> \<pi>12 \<noteq> []
  \<Longrightarrow> \<pi>22 \<noteq> []
  \<Longrightarrow> notfinishingL (\<pi>11)
  \<Longrightarrow> notfinishingL (\<pi>12)
  \<Longrightarrow> notfinishingL (\<pi>21)
  \<Longrightarrow> notfinishingL (\<pi>22)
  \<Longrightarrow> only_l3_nonterminals w2
  \<Longrightarrow> only_l3_nonterminals w1
  \<Longrightarrow> length \<pi>11 < length \<pi>21
  \<Longrightarrow> False"
  apply(subgoal_tac "\<exists>ds1 f\<pi>1 fw1. cfgLM.trans_der_list G ds1 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w1) f\<pi>1 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1) \<and> foldl (@) [] fw1 = \<alpha>1 \<and> foldl (@) [] f\<pi>1 = \<pi>11 ")
   prefer 2
   apply(rule cfgLM_trans_der_cfgLM_derivation_can_be_decomposed_into_trans_der_list)
    apply(simp add: split_TSstructure_def)
   apply(force)
  apply(subgoal_tac "\<exists>ds2 f\<pi>2 fw2. cfgLM.trans_der_list G ds2 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w2) f\<pi>2 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw2) \<and> foldl (@) [] fw2 = \<alpha>2 \<and> foldl (@) [] f\<pi>2 = \<pi>21 ")
   prefer 2
   apply(rule cfgLM_trans_der_cfgLM_derivation_can_be_decomposed_into_trans_der_list)
    apply(simp add: split_TSstructure_def)
   apply(force)
  apply(clarsimp)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac " \<forall>i. i<length w1 \<longrightarrow> i<length w2 \<longrightarrow> w1!i = w2!i \<and> length (f\<pi>1!i)=length (f\<pi>2!i) \<and> fw1!i=fw2!i")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(clarsimp)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(rule pointwise_equality)
                 apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
                 apply(force)
                apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
                apply(force)
               apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
               apply(force)
              apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
              apply(force)
             apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
             apply(force)
            apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
            apply(force)
           apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
           apply(force)
          apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
          apply(force)
         apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
         apply(force)
        apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
        apply(force)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
       apply(force)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(case_tac "length w1 = length w2")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "length (foldl (@) [] f\<pi>1) = length (foldl (@) [] f\<pi>2)")
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(rule foldl_length_eq)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
    apply(simp add: cfgLM.trans_der_list_def)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(erule_tac
      x="i"
      in allE)
   apply(erule impE)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
    apply(simp add: cfgLM.trans_der_list_def)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac "strict_prefix (map (prod_to_edge G') (foldl (@) [] f\<pi>1)) (map (prod_to_edge G') (foldl (@) [] f\<pi>2)) \<or> SSX" for SSX)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(rule mutual_strict_prefix_prefix)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(erule disjE)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(simp add: prefix_def)
   apply(clarsimp)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(subgoal_tac "length (foldl (@) [] f\<pi>2) \<le> length (foldl (@) [] f\<pi>1)")
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(rule_tac
      t="length (foldl (@) [] f\<pi>2)"
      and s="length(map (prod_to_edge G') (foldl (@) [] f\<pi>2))"
      in ssubst)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(rule_tac
      t="length (foldl (@) [] f\<pi>1)"
      and s="length(map (prod_to_edge G') (foldl (@) [] f\<pi>1))"
      in ssubst)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(rule_tac
      j="length(map (prod_to_edge G') (foldl (@) [] f\<pi>2) @ c)"
      in le_trans)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(simp (no_asm))
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(simp add: strict_prefix_def)
  apply(clarsimp)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
  apply(subgoal_tac "map (prod_to_edge G') \<pi>12 = c @ map (prod_to_edge G') \<pi>22")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   prefer 2
   apply(rule_tac
      w="map (prod_to_edge G') (foldl (@) [] f\<pi>1)"
      in append_linj)
   apply(simp (no_asm_simp))
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
  apply(clarsimp)
  apply(case_tac "length w1<length w2")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(simp add: cfgLM.trans_der_list_def)
   apply(clarsimp)
   apply(erule_tac
      x="length w1"
      and P="\<lambda>X. X < length fw2 \<longrightarrow> cfgLMTD G (ds2 ! X) \<lparr>cfg_conf = [teA (w2 ! X)]\<rparr> (f\<pi>2 ! X) \<lparr>cfg_conf = liftB (fw2 ! X)\<rparr>"
      in allE)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(erule impE)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "prefix (map (prod_to_edge G') (f\<pi>2!length fw1)) c")
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    prefer 2
    apply(rule_tac
      x="map (prod_to_edge G') (foldl (@) [] (take (length fw1) f\<pi>1))"
      in prefix_pre_append)
    apply(rule_tac
      t="take (length fw1) f\<pi>1"
      and s="f\<pi>1"
      in ssubst)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
     apply(rule take_all)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(rule_tac
      t="(map (prod_to_edge G') (foldl (@) [] f\<pi>1) @ c)"
      and s="map (prod_to_edge G') (foldl (@) [] f\<pi>2)"
      in ssubst)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(rule_tac
      t="map (prod_to_edge G') (foldl (@) [] f\<pi>1)"
      and s=" map (prod_to_edge G') (foldl (@) [] (take (length f\<pi>1) f\<pi>2)) "
      in ssubst)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
     prefer 2
     apply(rule_tac
      s="map (prod_to_edge G') (foldl (@) [] (take (length f\<pi>1) f\<pi>2) @ (f\<pi>2 ! length fw1))"
      and t="map (prod_to_edge G') (foldl (@) [] (take (length f\<pi>1) f\<pi>2)) @ map (prod_to_edge G') (f\<pi>2 ! length fw1)"
      in subst)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
      apply(rule map_append)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
     apply(rule_tac
      t="foldl (@) [] (take (length f\<pi>1) f\<pi>2) @ f\<pi>2 ! length fw1"
      and s="foldl (@) [] (take (Suc(length f\<pi>1)) f\<pi>2)"
      in ssubst)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
      apply (metis foldl_tail)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
     apply(rule map_prefix)
     apply(rule foldl_preserves_prefix)
     apply(rule take_prefix)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(subgoal_tac "map (prod_to_edge G') (foldl (@) [] (take (length f\<pi>2)f\<pi>1)) = map (prod_to_edge G') (foldl (@) [] (take (length f\<pi>1) f\<pi>2))")
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
     apply(subgoal_tac "take (length f\<pi>2) f\<pi>1=f\<pi>1")
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(rule_tac
      c="c"
      and d="[]"
      in map_foldl_prefix_equal)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(simp add: prefix_def)
   apply(clarsimp)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca)(*strict*)
   apply(case_tac "ca @ map (prod_to_edge G') \<pi>22 = []")
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca)(*strict*)
    apply(clarsimp)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca)(*strict*)
   apply(clarsimp)
   apply(case_tac "w2 ! length fw1")
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q b)(*strict*)
    apply(clarsimp)
    apply(rule only_l3_nonterminals_nth_l2)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q b)(*strict*)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q b)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q b)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2)(*strict*)
   apply(clarsimp)
   apply(case_tac A1)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
    apply(clarsimp)
    apply(subgoal_tac "X" for X)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
     prefer 2
     apply(rule_tac
      i="length((f\<pi>2 ! length fw1))"
      and ?\<pi>12.0="[]"
      and ?\<pi>22.0="drop(length(f\<pi>2!length fw1))(\<pi>12)"
      and ?d1.0="d1'"
      and ?d2.0="ds2!length fw1"
      and G="G"
      and G'="G'"
      in same_edge_productions_preserve_nonterminal_tail_length_l2l3)
               apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
               apply(force)
              apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
              apply(force)
             apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
             apply(force)
            apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
            apply(force)
           apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
           apply(simp (no_asm))
           apply(rule_tac
      t="map (prod_to_edge G') \<pi>12"
      in subst)
            apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
            apply(rule_tac
      n="(length (f\<pi>2 ! length fw1))"
      in append_take_drop_id)
           apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
           apply(rule_tac
      t="drop (length (f\<pi>2 ! length fw1)) (map (prod_to_edge G') \<pi>12)"
      and s="map (prod_to_edge G') (drop (length (f\<pi>2 ! length fw1)) \<pi>12)"
      in ssubst)
            apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
            apply (metis drop_map)
           apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
           apply(simp (no_asm))
           apply(rule_tac
      t="map (prod_to_edge G') \<pi>12"
      and s="map (prod_to_edge G') (f\<pi>2 ! length fw1) @ ca @ map (prod_to_edge G') \<pi>22"
      in ssubst)
            apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
            apply(force)
           apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
           apply(force)
          apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
          apply(force)
         apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
         apply(simp add: notfinishingL_def)
        apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
        apply(rule notfinishingL_foldl)
         apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
         apply(force)
        apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
        apply(force)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
       apply(rule notfinishingL_drop)
       apply(force)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
      apply(rule_tac
      t="length \<pi>12"
      and s="length(map (prod_to_edge G') \<pi>12)"
      in subst)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
       apply(rule length_map)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
      apply(rule_tac
      t="map (prod_to_edge G') \<pi>12"
      and s="map (prod_to_edge G') (f\<pi>2 ! length fw1) @ ca @ map (prod_to_edge G') \<pi>22"
      in ssubst)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
       apply(force)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
      apply(simp (no_asm))
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba)(*strict*)
    apply(clarsimp)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
     prefer 2
     apply(rule_tac
      d="d1'"
      and i="(length (f\<pi>2 ! length fw1))"
      in cfgLM.trans_der_position_detail)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
     apply(rule_tac
      t="length \<pi>12"
      and s="length(map (prod_to_edge G') \<pi>12)"
      in subst)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
      apply(rule length_map)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
     apply(rule_tac
      t="map (prod_to_edge G') \<pi>12"
      and s="map (prod_to_edge G') (f\<pi>2 ! length fw1) @ ca @ map (prod_to_edge G') \<pi>22"
      in ssubst)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
     apply(simp (no_asm))
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
    apply(clarsimp)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a e ci)(*strict*)
    apply(simp add: get_configuration_def cfgLM.trans_der_def)
    apply(clarsimp)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a e ci ea eb ec ed ee)(*strict*)
    apply(case_tac v2a)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a e ci ea eb ec ed ee)(*strict*)
     apply(clarsimp)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a v2a e ci ea eb ec ed ee a list)(*strict*)
    apply(clarsimp)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q ba \<alpha> v1a e ci ea eb ec ed ee a list)(*strict*)
    apply (metis liftA.simps(2) nonterminal_not_in_liftB)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "X" for X)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
    prefer 2
    apply(rule_tac
      i="length((f\<pi>2 ! length fw1))"
      and ?x1.0="[]"
      and ?x2.0="map (prod_to_edge G') (drop(length(f\<pi>2!length fw1))(\<pi>12))"
      and ?d1.0="d1'"
      and ?d2.0="ds2!length fw1"
      and G="G"
      and G'="G'"
      in same_edge_productions_preserve_nonterminal_tail_length_l3l3)
          apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
          apply(force)
         apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
         apply(force)
        apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
        apply(force)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
       apply(force)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
      apply(simp (no_asm))
      apply(rule_tac
      t="map (prod_to_edge G') \<pi>12"
      in subst)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
       apply(rule_tac
      n="(length (f\<pi>2 ! length fw1))"
      in append_take_drop_id)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
      apply(rule_tac
      t="drop (length (f\<pi>2 ! length fw1)) (map (prod_to_edge G') \<pi>12)"
      and s="map (prod_to_edge G') (drop (length (f\<pi>2 ! length fw1)) \<pi>12)"
      in ssubst)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
       apply (metis drop_map)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
      apply(simp (no_asm))
      apply(rule_tac
      t="map (prod_to_edge G') \<pi>12"
      and s="map (prod_to_edge G') (f\<pi>2 ! length fw1) @ ca @ map (prod_to_edge G') \<pi>22"
      in ssubst)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
       apply(force)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
     apply(rule_tac
      t="length \<pi>12"
      and s="length(map (prod_to_edge G') \<pi>12)"
      in subst)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
      apply(rule length_map)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
     apply(rule_tac
      t="map (prod_to_edge G') \<pi>12"
      and s="map (prod_to_edge G') (f\<pi>2 ! length fw1) @ ca @ map (prod_to_edge G') \<pi>22"
      in ssubst)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
     apply(simp (no_asm))
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
    prefer 2
    apply(rule_tac
      d="d1'"
      and i="(length (f\<pi>2 ! length fw1))"
      in cfgLM.trans_der_step_detail)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
    apply(rule_tac
      t="length \<pi>12"
      and s="length(map (prod_to_edge G') \<pi>12)"
      in subst)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
     apply(rule length_map)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
    apply(rule_tac
      t="map (prod_to_edge G') \<pi>12"
      and s="map (prod_to_edge G') (f\<pi>2 ! length fw1) @ ca @ map (prod_to_edge G') \<pi>22"
      in ssubst)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
    apply(simp (no_asm))
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a e ci ci')(*strict*)
   apply(simp add: get_configuration_def cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a e ci ci' ea eb ec ed ee)(*strict*)
   apply(case_tac v2a)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a e ci ci' ea eb ec ed ee)(*strict*)
    apply(clarsimp)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> e ci ci' ea eb ec ed ee)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> e ci ci' ea eb ec ed ee l r)(*strict*)
    apply (rule liftB_with_nonterminal_inside)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a v2a e ci ci' ea eb ec ed ee a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 ca q1 b q2 q1a ba q2a \<alpha> v1a e ci ci' ea eb ec ed ee a list)(*strict*)
   apply (rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
  apply(subgoal_tac "length w2 < length w1")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
  apply(clarsimp)
  apply(simp add: cfgLM.trans_der_list_def)
  apply(clarsimp)
  apply(subgoal_tac "map (prod_to_edge G') (foldl (@) [] (take (length f\<pi>2)f\<pi>1)) = map (prod_to_edge G') (foldl (@) [] (take (length f\<pi>1) f\<pi>2))")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   prefer 2
   apply(rule_tac
      c="c"
      and d="[]"
      in map_foldl_prefix_equal)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
  apply(subgoal_tac "take (length f\<pi>1) f\<pi>2=f\<pi>2")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   prefer 2
   apply(rule take_all)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "length(map (prod_to_edge G') (foldl (@) [] (take (length fw2) f\<pi>1))) \<le> length (map (prod_to_edge G') (foldl (@) [] (f\<pi>1)))")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(case_tac c)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
    prefer 2
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c a list)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
   apply(clarsimp)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 c)(*strict*)
  apply(simp (no_asm))
  apply(rule foldl_take_length)
  done

lemma compatible_elimination_must_have_same_components_not_shorter: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w1\<rparr> (foldl (@) [] f\<pi>1) \<lparr>cfg_conf = liftB (foldl (@) [] fw1)\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = liftA w2\<rparr> (foldl (@) [] f\<pi>2) \<lparr>cfg_conf = liftB (foldl (@) [] fw2)\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d1' \<lparr>cfg_conf = [teA A1]\<rparr> \<pi>12 \<lparr>cfg_conf = v1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2' \<lparr>cfg_conf = [teA A2]\<rparr> \<pi>22 \<lparr>cfg_conf = v2\<rparr>
  \<Longrightarrow> \<pi>12 \<noteq> []
  \<Longrightarrow> \<pi>22 \<noteq> []
  \<Longrightarrow> notfinishingL (foldl (@) [] f\<pi>1)
  \<Longrightarrow> notfinishingL \<pi>12
  \<Longrightarrow> notfinishingL (foldl (@) [] f\<pi>2)
  \<Longrightarrow> notfinishingL \<pi>22
  \<Longrightarrow> only_l3_nonterminals w2
  \<Longrightarrow> only_l3_nonterminals w1
  \<Longrightarrow> length (foldl (@) [] f\<pi>1) = length (foldl (@) [] f\<pi>2)
  \<Longrightarrow> map (prod_to_edge G') (foldl (@) [] f\<pi>1) = map (prod_to_edge G') (foldl (@) [] f\<pi>2)
  \<Longrightarrow> map (prod_to_edge G') \<pi>12 = map (prod_to_edge G') \<pi>22
  \<Longrightarrow> cfgLM.trans_der_list G ds1 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w1) f\<pi>1 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1)
  \<Longrightarrow> cfgLM.trans_der_list G ds2 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w2) f\<pi>2 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw2)
  \<Longrightarrow> \<forall>i<length w1. i < length w2 \<longrightarrow> w1 ! i = w2 ! i \<and> length (f\<pi>1 ! i) = length (f\<pi>2 ! i) \<and> fw1 ! i = fw2 ! i
  \<Longrightarrow> length w1 \<noteq> length w2
  \<Longrightarrow> length w1 < length w2
  \<Longrightarrow> False"
  apply(clarsimp)
  apply(subgoal_tac "w1=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   prefer 2
   apply(rule case_list)
  apply(erule disjE)
   apply(clarsimp)
   apply(subgoal_tac "SSrenPI=[] \<and> SSc2=\<lparr>cfg_conf=[]\<rparr>" for SSrenPI SSc2)
    prefer 2
    apply(rule_tac cfgLM_trans_der_from_empty)
    apply(force)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac eb ec)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac eb ec)(*strict*)
    prefer 2
    apply(rule liftB_eq_liftA_empty)
    apply(force)
   apply(rename_tac eb ec)(*strict*)
   apply(clarsimp)
  apply(clarsimp)
  apply(rename_tac w' a')(*strict*)
  apply(rename_tac w1 X1)
  apply(rename_tac w1 X1)(*strict*)
  apply(subgoal_tac "f\<pi>1=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac w1 X1)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac w1 X1)(*strict*)
  apply(erule disjE)
   apply(rename_tac w1 X1)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_list_def)
  apply(rename_tac w1 X1)(*strict*)
  apply(clarsimp)
  apply(rename_tac w1 X1 w' a')(*strict*)
  apply(rename_tac f\<pi>1 \<pi>1)
  apply(rename_tac w1 X1 f\<pi>1 \<pi>1)(*strict*)
  apply(subgoal_tac "fw1=[] \<or> (\<exists>w' a'. SSc=w'@[a'])" for SSc)
   apply(rename_tac w1 X1 f\<pi>1 \<pi>1)(*strict*)
   prefer 2
   apply(rule case_list)
  apply(rename_tac w1 X1 f\<pi>1 \<pi>1)(*strict*)
  apply(erule disjE)
   apply(rename_tac w1 X1 f\<pi>1 \<pi>1)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_list_def)
  apply(rename_tac w1 X1 f\<pi>1 \<pi>1)(*strict*)
  apply(clarsimp)
  apply(rename_tac w1 X1 f\<pi>1 \<pi>1 w' a')(*strict*)
  apply(rename_tac fw1 \<alpha>1)
  apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
  apply(subgoal_tac "w1=take (length w1)w2 \<and> length (foldl (@) [] f\<pi>1) = length (foldl (@) [] (take (length w1) f\<pi>2)) \<and> (foldl (@) [] fw1 = foldl (@) [] (take (length w1) fw2))")
   apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
   prefer 2
   apply(rule context_conjI)
    apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
    apply(rule listEqI)
     apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
     apply(force)
    apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 i)(*strict*)
    apply(clarsimp)
    apply(erule_tac
      x="i"
      in allE)
    apply(clarsimp)
    apply(rule_tac
      t="w1!i"
      and s="(w1 @ [X1]) ! i"
      in subst)
     apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 i)(*strict*)
     apply(rule nth_append_1)
     apply(force)
    apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 i)(*strict*)
    apply(force)
   apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
   apply(rule context_conjI)
    apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
    apply(rule foldl_length_eq)
     apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
     apply(clarsimp)
     apply(simp add: cfgLM.trans_der_list_def)
    apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 i)(*strict*)
    apply(clarsimp)
    apply(erule_tac
      x="i"
      in allE)
    apply(clarsimp)
    apply(rule_tac
      t="length (f\<pi>2 ! i)"
      and s="length ((f\<pi>1 @ [\<pi>1]) ! i)"
      in ssubst)
     apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 i)(*strict*)
     apply(force)
    apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 i)(*strict*)
    apply(rule_tac
      t="(f\<pi>1 @ [\<pi>1]) ! i"
      and s="f\<pi>1!i"
      in ssubst)
     apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 i)(*strict*)
     apply(rule nth_append_1)
     apply(force)
    apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 i)(*strict*)
    apply(force)
   apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
   apply(rule foldl_equal)
    apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
    apply(simp add: cfgLM.trans_der_list_def)
   apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 y)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_list_def)
   apply(erule_tac
      x="y"
      in allE)
   apply(erule impE)
    apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 y)(*strict*)
    apply(force)
   apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 y)(*strict*)
   apply(clarsimp)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 y)(*strict*)
   apply(rule_tac
      t="fw1!y"
      and s="(fw1 @ [\<alpha>1]) !y "
      in subst)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 y)(*strict*)
    apply(rule nth_append_1)
    apply(force)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 y)(*strict*)
   apply(force)
  apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
  apply(clarsimp)
  apply(thin_tac "\<forall>i<Suc (length w1). (w1 @ [X1]) ! i = w2 ! i \<and> length ((f\<pi>1 @ [\<pi>1]) ! i) = length (f\<pi>2 ! i) \<and> (fw1 @ [\<alpha>1]) ! i = fw2 ! i")
  apply(rename_tac w1 X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
  apply(simp add: cfgLM.trans_der_list_def)
  apply(clarsimp)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
  apply(erule_tac
      x="length fw1"
      and P="\<lambda>y. y < Suc (length fw1) \<longrightarrow> cfgLMTD G (ds1 ! y) ((map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) (take (length fw1) w2) @ [\<lparr>cfg_conf = [teA X1]\<rparr>]) ! y) ((f\<pi>1 @ [\<pi>1]) ! y) ((map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1 @ [\<lparr>cfg_conf = liftB \<alpha>1\<rparr>]) ! y)"
      in allE)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
  apply(clarsimp)
  apply(thin_tac "min (length fw2) (length fw1) = length fw1")
  apply(subgoal_tac "length \<pi>1 = length (foldl (@) [] (drop (length fw1) f\<pi>2))")
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
   prefer 2
   apply(rule_tac
      t="length \<pi>1"
      and s="length(map (prod_to_edge G') \<pi>1)"
      in ssubst)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
    apply(force)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
   apply(rule_tac
      a="length (foldl (@) [] (take (length fw1) f\<pi>2))"
      in add_left_imp_eq)
   apply(rule_tac
      t="length (foldl (@) [] (take (length fw1) f\<pi>2)) + length (foldl (@) [] (drop (length fw1) f\<pi>2))"
      and s="length(map (prod_to_edge G') (foldl (@) [] f\<pi>2))"
      in ssubst)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
    apply(rule_tac
      P="\<lambda>X. length (foldl (@) [] (take (length fw1) f\<pi>2)) + length (foldl (@) [] (drop (length fw1) f\<pi>2)) = length (map (prod_to_edge G') (foldl (@) [] X))"
      and s="take (length fw1) f\<pi>2 @ drop (length fw1) f\<pi>2"
      in subst)
     apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
     apply(rule append_take_drop_id)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
    apply (metis append_take_drop_id foldl_append foldl_first length_append length_map)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
   apply(force)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
  apply(clarsimp)
  apply(case_tac "drop (length fw1) f\<pi>2")
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1)(*strict*)
   apply(clarsimp)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "list")
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 a)(*strict*)
   apply(subgoal_tac "length f\<pi>2 = Suc(length fw1)")
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 a)(*strict*)
    prefer 2
    apply (metis Suc_lessD append_take_drop_id less_eq_Suc_le_raw nat_less_le nth_via_drop take_all_length take_nth_split)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 a)(*strict*)
   apply(clarsimp)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 a list aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 a aa lista)(*strict*)
  apply(rename_tac f\<pi>21 f\<pi>22 f\<pi>2s)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s)(*strict*)
  apply(erule_tac x="length fw1" in allE')
  apply(erule_tac
      x="Suc(length fw1)"
      in allE)
  apply(clarsimp)
  apply(case_tac "(f\<pi>2 ! Suc (length fw1)) = []")
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s e ea eb ec ed ee)(*strict*)
   apply(case_tac "fw2 ! Suc (length fw1)")
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s e ea eb ec ed ee)(*strict*)
    apply(clarsimp)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s e ea eb ec ed ee a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s)(*strict*)
  apply(thin_tac "cfgLM.trans_der G (ds2 ! Suc (length fw1)) \<lparr>cfg_conf = [teA (w2 ! Suc (length fw1))]\<rparr> (f\<pi>2 ! Suc (length fw1)) \<lparr>cfg_conf = liftB (fw2 ! Suc (length fw1))\<rparr>")
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s)(*strict*)
  apply(subgoal_tac "f\<pi>2 ! Suc (length fw1) = f\<pi>22")
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s)(*strict*)
   prefer 2
   apply(rule drop_nth_hlp1)
   apply(force)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s)(*strict*)
  apply(subgoal_tac "f\<pi>2 ! (length fw1) = f\<pi>21")
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s)(*strict*)
   prefer 2
   apply(rule drop_nth_hlp2)
   apply(force)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>21 f\<pi>22 f\<pi>2s)(*strict*)
  apply(clarsimp)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
  apply(subgoal_tac "cfgLM.trans_der G (ds1 ! length fw1) \<lparr>cfg_conf = [teA X1]\<rparr> \<pi>1 \<lparr>cfg_conf = liftB \<alpha>1\<rparr>")
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
   prefer 2
   apply(rule_tac
      t="\<lparr>cfg_conf = [teA X1]\<rparr>"
      and s="((map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) (take (length fw1) w2) @ [\<lparr>cfg_conf = [teA X1]\<rparr>]) ! length fw1)"
      in subst)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
    apply(rule nth_append_beyond)
    apply(force)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
   apply(rule_tac
      t="\<pi>1"
      and s="((f\<pi>1 @ [\<pi>1]) ! length fw1)"
      in subst)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
    apply(rule_tac
      t="length fw1"
      and s="length f\<pi>1"
      in ssubst)
     apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
     apply(force)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
    apply(rule nth_append_beyond)
    apply(force)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
   apply(rule_tac
      t="\<lparr>cfg_conf = liftB \<alpha>1\<rparr>"
      and s="((map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1 @ [\<lparr>cfg_conf = liftB \<alpha>1\<rparr>]) ! length fw1)"
      in subst)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
    apply(rule nth_append_beyond)
    apply(force)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
   apply(force)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
  apply(thin_tac "cfgLM.trans_der G (ds1 ! length fw1) ((map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) (take (length fw1) w2) @ [\<lparr>cfg_conf = [teA X1]\<rparr>]) ! length fw1) ((f\<pi>1 @ [\<pi>1]) ! length fw1) ((map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1 @ [\<lparr>cfg_conf = liftB \<alpha>1\<rparr>]) ! length fw1)")
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
  apply(subgoal_tac "length (f\<pi>2 ! length fw1) < length \<pi>1")
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
   prefer 2
   apply(rule_tac
      y="length (foldl (@) (f\<pi>2 ! length fw1 @ f\<pi>2 ! Suc (length fw1)) f\<pi>2s)"
      in less_le_trans)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
   apply(rule_tac
      t="foldl (@) (f\<pi>2 ! length fw1 @ f\<pi>2 ! Suc (length fw1)) f\<pi>2s"
      in ssubst)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
    apply(rule foldl_first)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
   apply(force)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
  apply(subgoal_tac "map (prod_to_edge G') (f\<pi>2 ! length fw1) = map (prod_to_edge G') (take (length(f\<pi>2 ! length fw1)) \<pi>1)")
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
   prefer 2
   apply(rule sym)
   apply(rule_tac
      x="map (prod_to_edge G') (foldl (@) [] f\<pi>1) @ map (prod_to_edge G') \<pi>1"
      and y="map (prod_to_edge G') (foldl (@) [] f\<pi>2)"
      and w="map (prod_to_edge G') (foldl (@) [] f\<pi>1)"
      and v="map (prod_to_edge G') (foldl (@) [] (take (length f\<pi>1) f\<pi>2))"
      in equal_by_embedding_and_AX_equal_length)
       apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
       apply(simp (no_asm) add: prefix_def)
       apply(rule_tac
      x="map (prod_to_edge G') (drop (length (f\<pi>2 ! length fw1)) \<pi>1)"
      in exI)
       apply (metis append_take_drop_id_hlp drop_map take_map)
      apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
      apply(simp (no_asm) add: prefix_def)
      apply(rule_tac
      x="map (prod_to_edge G') (foldl (@) [] (f\<pi>2 ! Suc (length fw1) # f\<pi>2s))"
      in exI)
      apply(rule_tac
      t="map (prod_to_edge G') (f\<pi>2 ! length fw1) @ map (prod_to_edge G') (foldl (@) [] (f\<pi>2 ! Suc (length fw1) # f\<pi>2s))"
      and s="map (prod_to_edge G') (foldl (@) [] (drop (length f\<pi>1) f\<pi>2))"
      in ssubst)
       apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
       prefer 2
       apply (metis List.map_append append_take_drop_id_hlp foldl_append foldl_first)
      apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
      apply(rule_tac
      t="drop (length f\<pi>1) f\<pi>2"
      and s="f\<pi>2 ! length fw1 # f\<pi>2 ! Suc (length fw1) # f\<pi>2s"
      in ssubst)
       apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
       apply(force)
      apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
      apply(simp (no_asm))
      apply(rule_tac
      t="foldl (@) (f\<pi>2 ! length fw1 @ f\<pi>2 ! Suc (length fw1)) f\<pi>2s"
      in ssubst)
       apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
       apply(rule foldl_first)
      apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
      apply(simp (no_asm))
      apply(rule_tac
      t="foldl (@) (f\<pi>2 ! Suc (length fw1)) f\<pi>2s"
      in ssubst)
       apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
       apply(rule foldl_first)
      apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
      apply(simp (no_asm))
     apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
     apply(force)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
   apply(rule_tac
      x="map (prod_to_edge G') (foldl (@) [] f\<pi>1) @ map (prod_to_edge G') \<pi>1"
      and y="map (prod_to_edge G') (foldl (@) [] f\<pi>2)"
      and w="[]"
      and v="[]"
      in equal_by_embedding_and_AX_equal_length)
       apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
       apply(simp (no_asm) add: prefix_def)
      apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
      apply(simp (no_asm) add: prefix_def)
      apply(rule_tac
      x="map (prod_to_edge G') (foldl (@) [] (drop (length f\<pi>1) f\<pi>2))"
      in exI)
      apply (metis List.map_append append_take_drop_id_hlp foldl_append foldl_first)
     apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
     apply(force)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
    apply(force)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
   apply(force)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s)(*strict*)
  apply(case_tac "w2!length fw1")
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q b)(*strict*)
   apply(clarsimp)
   apply(rule only_l3_nonterminals_nth_l2)
     apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q b)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q b)(*strict*)
    apply(force)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q b)(*strict*)
   apply(force)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2)(*strict*)
  apply(clarsimp)
  apply(case_tac X1)
   apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
   apply(clarsimp)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
    prefer 2
    apply(rule_tac
      i="length((f\<pi>2 ! length fw1))"
      and ?\<pi>12.0="[]"
      and ?\<pi>22.0="drop(length(f\<pi>2!length fw1))(\<pi>1)"
      and ?d1.0="ds1!length fw1"
      and ?d2.0="ds2!length fw1"
      and G="G"
      and G'="G'"
      in same_edge_productions_preserve_nonterminal_tail_length_l2l3)
              apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
              apply(force)
             apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
             apply(force)
            apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
            apply(force)
           apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
           apply(force)
          apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
          apply(simp (no_asm))
          apply(rule_tac
      t="map (prod_to_edge G') (f\<pi>2 ! length fw1)"
      and s="map (prod_to_edge G') (take (length (f\<pi>2 ! length fw1)) \<pi>1)"
      in ssubst)
           apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
           apply(force)
          apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
          apply (metis only_l3_nonterminals_drop only_l3_nonterminals_l2_at_front)
         apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
         apply(rule notfinishingL_drop2)
         apply(force)
        apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
        apply(simp add: notfinishingL_def)
       apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
       apply(rule notfinishingL_foldl)
        apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
        apply(force)
       apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
       apply(force)
      apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
      apply(rule notfinishingL_drop)
      apply(rule notfinishingL_drop2)
      apply(force)
     apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
     apply(force)
    apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
    apply(force)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba)(*strict*)
   apply(clarsimp)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
    prefer 2
    apply(rule_tac
      d="ds1 ! length fw1"
      and i="(length (f\<pi>2 ! length fw1))"
      in cfgLM.trans_der_position_detail)
      apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(force)
     apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
     apply(force)
    apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
    apply(force)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a v2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a v2a e ci)(*strict*)
   apply(simp add: get_configuration_def cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a v2a e ci ea eb ec ed ee ef)(*strict*)
   apply(case_tac v2a)
    apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a v2a e ci ea eb ec ed ee ef)(*strict*)
    apply(clarsimp)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a v2a e ci ea eb ec ed ee ef a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q ba \<alpha> v1a e ci ea eb ec ed ee ef a list)(*strict*)
   apply (metis liftA.simps(2) nonterminal_not_in_liftB)
  apply(rename_tac X1 f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
   prefer 2
   apply(rule_tac
      i="length((f\<pi>2 ! length fw1))"
      and ?x1.0="[]"
      and ?x2.0="map (prod_to_edge G') (drop(length(f\<pi>2!length fw1))(\<pi>1))"
      and ?d1.0="ds1 ! length fw1"
      and ?d2.0="ds2!length fw1"
      and G="G"
      and G'="G'"
      in same_edge_productions_preserve_nonterminal_tail_length_l3l3)
         apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
         apply(force)
        apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
        apply(force)
       apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
       apply(force)
      apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
      apply(force)
     apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
     apply(simp (no_asm))
     apply(rule_tac
      t="map (prod_to_edge G') (f\<pi>2 ! length fw1)"
      and s="map (prod_to_edge G') (take (length (f\<pi>2 ! length fw1)) \<pi>1)"
      in ssubst)
      apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
      apply(force)
     apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
     apply(rule_tac
      P="\<lambda>X. map (prod_to_edge G') X = map (prod_to_edge G') (take (length (f\<pi>2 ! length fw1)) \<pi>1) @ map (prod_to_edge G') (drop (length (f\<pi>2 ! length fw1)) \<pi>1)"
      and s="take (length (f\<pi>2 ! length fw1)) \<pi>1 @ drop (length (f\<pi>2 ! length fw1)) \<pi>1"
      in subst)
      apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
      apply(rule append_take_drop_id)
     apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
     apply(rule map_append)
     apply(force)
    apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
    apply(force)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
   apply(force)
  apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
   prefer 2
   apply(rule_tac
      d="ds1 ! length fw1"
      and i="(length (f\<pi>2 ! length fw1))"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
     apply(simp add: split_TSstructure_def)
     apply(force)
    apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
    apply(force)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
   apply(force)
  apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a v2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a v2a e ci ci')(*strict*)
  apply(simp add: get_configuration_def cfgLM.trans_der_def)
  apply(clarsimp)
  apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a v2a e ci ci' ea eb ec ed ee ef)(*strict*)
  apply(case_tac v2a)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a v2a e ci ci' ea eb ec ed ee ef)(*strict*)
   apply(clarsimp)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> e ci ci' ea eb ec ed ee ef)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> e ci ci' ea eb ec ed ee ef l r)(*strict*)
   apply (rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a v2a e ci ci' ea eb ec ed ee ef a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac f\<pi>1 \<pi>1 fw1 \<alpha>1 f\<pi>2s q1 b q2 q1a ba q2a \<alpha> v1a e ci ci' ea eb ec ed ee ef a list)(*strict*)
  apply (rule liftB_with_nonterminal_inside)
  apply(force)
  done

lemma compatible_elimination_must_have_same_components: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=liftA w1\<rparr> \<pi>11 \<lparr>cfg_conf=liftB \<alpha>1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=liftA w2\<rparr> \<pi>21 \<lparr>cfg_conf=liftB \<alpha>2\<rparr>
  \<Longrightarrow> map (prod_to_edge G') \<pi>11 @ map (prod_to_edge G') \<pi>12 =
        map (prod_to_edge G') \<pi>21 @ map (prod_to_edge G') \<pi>22
  \<Longrightarrow> cfgLM.trans_der G d1' \<lparr>cfg_conf=[teA A1]\<rparr> \<pi>12 \<lparr>cfg_conf=v1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2' \<lparr>cfg_conf=[teA A2]\<rparr> \<pi>22 \<lparr>cfg_conf=v2\<rparr>
  \<Longrightarrow> \<pi>12 \<noteq> []
  \<Longrightarrow> \<pi>22 \<noteq> []
  \<Longrightarrow> notfinishingL (\<pi>11)
  \<Longrightarrow> notfinishingL (\<pi>12)
  \<Longrightarrow> notfinishingL (\<pi>21)
  \<Longrightarrow> notfinishingL (\<pi>22)
  \<Longrightarrow> only_l3_nonterminals w2
  \<Longrightarrow> only_l3_nonterminals w1
  \<Longrightarrow> length \<pi>11 = length \<pi>21
  \<Longrightarrow> w1=w2 \<and> \<alpha>1=\<alpha>2"
  apply(subgoal_tac "\<exists>ds1 f\<pi>1 fw1. cfgLM.trans_der_list G ds1 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w1) f\<pi>1 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1) \<and> foldl (@) [] fw1 = \<alpha>1 \<and> foldl (@) [] f\<pi>1 = \<pi>11 ")
   prefer 2
   apply(rule cfgLM_trans_der_cfgLM_derivation_can_be_decomposed_into_trans_der_list)
    apply(simp add: split_TSstructure_def)
   apply(force)
  apply(subgoal_tac "\<exists>ds2 f\<pi>2 fw2. cfgLM.trans_der_list G ds2 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w2) f\<pi>2 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw2) \<and> foldl (@) [] fw2 = \<alpha>2 \<and> foldl (@) [] f\<pi>2 = \<pi>21 ")
   prefer 2
   apply(rule cfgLM_trans_der_cfgLM_derivation_can_be_decomposed_into_trans_der_list)
    apply(simp add: split_TSstructure_def)
   apply(force)
  apply(clarsimp)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac " \<forall>i. i<length w1 \<longrightarrow> i<length w2 \<longrightarrow> w1!i = w2!i \<and> length (f\<pi>1!i)=length (f\<pi>2!i) \<and> fw1!i=fw2!i")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(clarsimp)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(rule pointwise_equality)
                 apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
                 apply(force)
                apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
                apply(force)
               apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
               apply(force)
              apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
              apply(force)
             apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
             apply(force)
            apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
            apply(force)
           apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
           apply(force)
          apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
          apply(force)
         apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
         apply(force)
        apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
        apply(force)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
       apply(force)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(case_tac "length w1 = length w2")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(clarsimp)
   apply(rule context_conjI)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
    apply(rule listEqI)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(clarsimp)
   apply(rule foldl_equal)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
    apply(simp add: cfgLM.trans_der_list_def)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y)(*strict*)
   apply(simp add: cfgLM.trans_der_list_def)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac "False")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(case_tac "length w1<length w2")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(rule_tac
      ?w1.0="w1"
      and ?w2.0="w2"
      in compatible_elimination_must_have_same_components_not_shorter)
                      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
                      apply(force)+
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(case_tac "length w2<length w1")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(rule_tac
      ?w1.0="w2"
      and ?w2.0="w1"
      in compatible_elimination_must_have_same_components_not_shorter)
                      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
                      apply(force)+
  done

lemma same_l3_source_and_same_target_liftB_and_same_prod_to_edge_implies_equal_prods: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA (cons_l3   q A q')]\<rparr> \<pi>1 \<lparr>cfg_conf=liftB \<alpha>\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA (cons_l3   q A q')]\<rparr> \<pi>2 \<lparr>cfg_conf=liftB \<alpha>\<rparr>
  \<Longrightarrow> notfinishingL \<pi>1
  \<Longrightarrow> notfinishingL \<pi>2
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> \<pi>1=\<pi>2"
  apply(induct "length \<pi>1" arbitrary: d1 d2 q A q' \<pi>1 \<pi>2 \<alpha> rule: less_induct)
  apply(rename_tac \<pi>1 d1 d2 q A q' \<pi>2 \<alpha>)(*strict*)
  apply(case_tac "\<pi>1")
   apply(rename_tac \<pi>1 d1 d2 q A q' \<pi>2 \<alpha>)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>1 d1 d2 q A q' \<pi>2 \<alpha> a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 q A q' \<alpha> a list z zs)(*strict*)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d1"
      and i="0"
      and kleene_starT="True"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d2"
      and i="0"
      and kleene_starT="True"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
    apply(force)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
   apply(force)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
   prefer 2
   apply(rule_tac
      ?p1.0="p1"
      and ?p2.0="p2"
      in nonfinal_prod_to_edge_to_special_production_set)
         apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
         apply(force)
        apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
        apply(force)
       apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
       apply(simp add: cfgLM_step_relation_def)
      apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
      apply(simp add: cfgLM_step_relation_def)
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra)(*strict*)
     prefer 2
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra)(*strict*)
    apply(rule_tac
      t="prod_lhs p1"
      and s="cons_l3 q A q'"
      in ssubst)
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra)(*strict*)
    apply(simp (no_asm) add: isl3_def)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra)(*strict*)
   apply(case_tac l)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra)(*strict*)
    prefer 2
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra)(*strict*)
   apply(case_tac la)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra)(*strict*)
    prefer 2
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
   apply(rule_tac
      t="prod_lhs p1"
      and s="cons_l3 q A q'"
      in ssubst)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
   apply(simp (no_asm) add: isl3_def)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
  apply(erule disjE)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
   prefer 2
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_final_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a i ia Aa Ab)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a i ia Aa Ab l r la ra)(*strict*)
   apply(case_tac l)
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a i ia Aa Ab l r la ra)(*strict*)
    prefer 2
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a i ia Aa Ab l r la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a i ia Aa Ab l r la ra)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
  apply(erule disjE)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x y)(*strict*)
   apply(erule_tac
      P="p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_read x (epda_states G')"
      in disjE)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x y)(*strict*)
    prefer 2
    apply(subgoal_tac "False")
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x y)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x y)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x y)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x y l r la ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x y l r la ra)(*strict*)
     prefer 2
     apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x y l r la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x y l r la ra)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x y)(*strict*)
   apply(erule disjE)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x y)(*strict*)
    prefer 2
    apply(subgoal_tac "False")
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x y)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x y)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_read_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x y)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x y l r la ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x y l r la ra)(*strict*)
     prefer 2
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x y l r la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x y l r la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x y la ra)(*strict*)
    apply(case_tac la)
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x y la ra)(*strict*)
     prefer 2
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x y la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x y la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x y)(*strict*)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x y)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_read_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt qta)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt qta l r la ra)(*strict*)
   apply(case_tac l)
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt qta l r la ra)(*strict*)
    prefer 2
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt qta l r la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt qta l r la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt qta la ra)(*strict*)
   apply(case_tac la)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt qta la ra)(*strict*)
    prefer 2
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt qta la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt qta la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt)(*strict*)
   apply(case_tac ci')
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt cfg_confa)(*strict*)
   apply(case_tac ci'a)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x y qt cfg_confa cfg_confaa)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt)(*strict*)
   apply(erule_tac
      x="\<pi>1"
      in meta_allE)
   apply(subgoal_tac "\<exists>\<alpha>' d1x d2x. cfgLM.trans_der G d1x \<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_pop x ! 0) qt)]\<rparr> \<pi>1 \<lparr>cfg_conf = liftB \<alpha>'\<rparr> \<and> cfgLM.trans_der G d2x \<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_pop x ! 0) qt)]\<rparr> \<pi>2 \<lparr>cfg_conf = liftB \<alpha>'\<rparr> ")
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
    apply(erule_tac
      x="d1x"
      in meta_allE)
    apply(erule_tac
      x="d2x"
      in meta_allE)
    apply(erule_tac
      x="edge_trg x"
      in meta_allE)
    apply(erule_tac
      x="edge_pop x!0"
      in meta_allE)
    apply(erule_tac
      x="qt"
      in meta_allE)
    apply(erule_tac
      x="\<pi>2"
      in meta_allE)
    apply(erule_tac
      x="\<alpha>'"
      in meta_allE)
    apply(erule meta_impE)
     apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
    apply(erule meta_impE)
     apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
    apply(erule meta_impE)
     apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
     apply(rule_tac
      w="[x]" for x
      in notfinishingL_drop2)
     apply(force)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
    apply(erule meta_impE)
     apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
     apply(rule_tac
      w="[x]" for x
      in notfinishingL_drop2)
     apply(force)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
    apply(erule meta_impE)
     apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt \<alpha>' d1x d2x)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt)(*strict*)
   apply(subgoal_tac "prefix [y] \<alpha>")
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt)(*strict*)
    apply(simp add: prefix_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
    apply(rule_tac
      x="c"
      in exI)
    apply(rule conjI)
     apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
     apply(subgoal_tac "X" for X)
      apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
      prefer 2
      apply(rule_tac
      d="d1"
      and n="Suc 0"
      in cfgLM.trans_der_skip_prime)
          apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
          apply(simp add: split_TSstructure_def)
          apply(force)
         apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
         apply(force)
        apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
        apply(force)
       apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
       apply(force)
      apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
     apply(clarsimp)
     apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c d)(*strict*)
     apply(subgoal_tac "X" for X)
      apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c d)(*strict*)
      prefer 2
      apply(rule_tac
      \<alpha>="[y]"
      and d="d"
      in cfgLM_trans_der_drop_leading_terminals_prime)
       apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c d)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c d)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c d)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
     prefer 2
     apply(rule_tac
      d="d2"
      and n="Suc 0"
      in cfgLM.trans_der_skip_prime)
         apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
         apply(simp add: split_TSstructure_def)
         apply(force)
        apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
        apply(force)
       apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
       apply(force)
      apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c d)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c d)(*strict*)
     prefer 2
     apply(rule_tac
      \<alpha>="[y]"
      and d="d"
      in cfgLM_trans_der_drop_leading_terminals_prime)
      apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c d)(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(force)
     apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c d)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 \<pi>1 \<pi>2 e ea x y qt c d)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt)(*strict*)
   apply(subgoal_tac "\<exists>w. cfg_get_history SSci @ w = cfg_get_history SScij" for SSci SScij)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt eb ec)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      d="d1"
      and i="Suc 0"
      and j="length \<pi>1"
      in cfgLM.derivation_monotonically_inc)
         apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt eb ec)(*strict*)
         apply(simp add: split_TSstructure_def)
         apply(force)
        apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt eb ec)(*strict*)
        apply(force)
       apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt eb ec)(*strict*)
       apply(force)
      apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt eb ec)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt eb ec)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt eb ec)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt w)(*strict*)
   apply(simp add: cfg_get_history_def)
   apply(subgoal_tac "maxTermPrefix [teB y, teA (cons_l3   (edge_trg x) (edge_pop x ! 0) qt)] = [y]")
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt w)(*strict*)
    apply(subgoal_tac "maxTermPrefix (liftB \<alpha>) = \<alpha>")
     apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt w)(*strict*)
     apply(simp add: prefix_def)
     apply(rule_tac
      x="w"
      in exI)
     apply(force)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt w)(*strict*)
    apply (metis maxTermPrefix_term_string)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x y qt w)(*strict*)
   apply (metis maxTermPrefix_pull_out maxTermPrefix_one_nonterm)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
  apply(erule disjE)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_pop_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x l r la ra)(*strict*)
   apply(case_tac l)
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x l r la ra)(*strict*)
    prefer 2
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x l r la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x l r la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x la ra)(*strict*)
   apply(case_tac la)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x la ra)(*strict*)
    prefer 2
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x)(*strict*)
   apply(case_tac ci'a)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x cfg_confa)(*strict*)
   apply(case_tac ci')
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x cfg_confa cfg_confaa)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x)(*strict*)
   apply(case_tac \<pi>1)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x a list)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x a list)(*strict*)
    prefer 2
    apply(rule_tac
      G="G"
      and d="d1"
      and i="Suc 0"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
      apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x a list)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x a list)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x a list)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 \<alpha> e ea x a list ci' z zs)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
  apply(clarsimp)
  apply(erule_tac
      P="p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G')"
      in disjE)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
   prefer 2
   apply(subgoal_tac "False")
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
   apply(erule_tac
      P="p1 = \<lparr>prod_lhs = cons_l2 (edge_src x) (edge_pop x ! 0), prod_rhs = [teA (cons_l2   (edge_trg x) (edge_push x ! 0))]\<rparr>"
      in disjE)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x l r la ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x l r la ra)(*strict*)
     prefer 2
     apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x l r la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x l r la ra)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x qs)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x qs l r la ra)(*strict*)
   apply(case_tac l)
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x qs l r la ra)(*strict*)
    prefer 2
    apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x qs l r la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 p2 \<pi>2 e ci' ea ci'a x qs l r la ra)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
  apply(erule disjE)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
   prefer 2
   apply(subgoal_tac "False")
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
   apply(erule disjE)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x l r la ra)(*strict*)
    apply(case_tac l)
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x l r la ra)(*strict*)
     prefer 2
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x l r la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x l r la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x la ra)(*strict*)
    apply(case_tac la)
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x la ra)(*strict*)
     prefer 2
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x la ra a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x la ra)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x)(*strict*)
    apply(subgoal_tac "cons_l3 q A q' = cons_l2 (edge_src x) (edge_pop x ! 0)")
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x)(*strict*)
    apply(rule_tac
      t="cons_l2 (edge_src x) (edge_pop x ! 0)"
      and s="prod_lhs p1"
      in ssubst)
     apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs l r la ra)(*strict*)
   apply(case_tac l)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs l r la ra)(*strict*)
    prefer 2
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs l r la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs l r la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs la ra)(*strict*)
   apply(case_tac la)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs la ra)(*strict*)
    prefer 2
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs la ra a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs la ra)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs)(*strict*)
   apply(subgoal_tac "cons_l3 q A q' = cons_l2 (edge_src x) (edge_pop x ! 0)")
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs)(*strict*)
   apply(rule_tac
      t="cons_l2 (edge_src x) (edge_pop x ! 0)"
      and s="prod_lhs p1"
      in ssubst)
    apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 \<pi>2 e ci' ea ci'a x qs)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 q A q' \<alpha> p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a x)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_push_def)
  apply(clarsimp)
  apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt qta)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt qta l r la ra)(*strict*)
  apply(case_tac l)
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt qta l r la ra)(*strict*)
   prefer 2
   apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt qta l r la ra a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 q A q' \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt qta l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt qta la ra)(*strict*)
  apply(case_tac la)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt qta la ra)(*strict*)
   prefer 2
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt qta la ra a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt qta la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt)(*strict*)
  apply(case_tac ci')
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt cfg_confa)(*strict*)
  apply(case_tac ci'a)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ci' ea ci'a x qs qsa qt cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt)(*strict*)
   prefer 2
   apply(rule_tac
      d="d1"
      and n="Suc 0"
      in cfgLM.trans_der_skip_prime)
       apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d)(*strict*)
   prefer 2
   apply(rule_tac
      d="d2"
      and n="Suc 0"
      in cfgLM.trans_der_skip_prime)
       apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d1 \<lparr>cfg_conf = [teA (cons_l3   (edge_src x) (edge_pop x ! 0) qt)]\<rparr> (\<lparr>prod_lhs = cons_l3 (edge_src x) (edge_pop x ! 0) qt, prod_rhs = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qs), teA (cons_l3   qs (edge_pop x ! 0) qt)]\<rparr> # \<pi>1) \<lparr>cfg_conf = liftB \<alpha>\<rparr>")
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA (cons_l3   (edge_src x) (edge_pop x ! 0) qt)]\<rparr> (\<lparr>prod_lhs = cons_l3 (edge_src x) (edge_pop x ! 0) qt, prod_rhs = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa), teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr> # \<pi>2) \<lparr>cfg_conf = liftB \<alpha>\<rparr>")
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(subgoal_tac "notfinishingL \<pi>1")
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
   prefer 2
   apply(rule_tac
      w="[x]" for x
      in notfinishingL_drop2)
   apply(force)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(thin_tac "notfinishingL (\<lparr>prod_lhs = cons_l3 (edge_src x) (edge_pop x ! 0) qt, prod_rhs = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qs), teA (cons_l3   qs (edge_pop x ! 0) qt)]\<rparr> # \<pi>1)")
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(subgoal_tac "notfinishingL \<pi>2")
   apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
   prefer 2
   apply(rule_tac
      w="[x]" for x
      in notfinishingL_drop2)
   apply(force)
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(thin_tac "notfinishingL (\<lparr>prod_lhs = cons_l3 (edge_src x) (edge_pop x ! 0) qt, prod_rhs = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa), teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr> # \<pi>2)")
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(thin_tac "prod_to_edge G' \<lparr>prod_lhs = cons_l3 (edge_src x) (edge_pop x ! 0) qt, prod_rhs = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qs), teA (cons_l3   qs (edge_pop x ! 0) qt)]\<rparr> = prod_to_edge G' \<lparr>prod_lhs = cons_l3 (edge_src x) (edge_pop x ! 0) qt, prod_rhs = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa), teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr>")
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(thin_tac "d1 0 = Some (pair e \<lparr>cfg_conf = [teA (cons_l3   (edge_src x) (edge_pop x ! 0) qt)]\<rparr>)")
  apply(thin_tac "d1 (Suc 0) = Some (pair (Some \<lparr>prod_lhs = cons_l3 (edge_src x) (edge_pop x ! 0) qt, prod_rhs = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qs), teA (cons_l3   qs (edge_pop x ! 0) qt)]\<rparr>) \<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qs), teA (cons_l3   qs (edge_pop x ! 0) qt)]\<rparr>)")
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(thin_tac "d2 0 = Some (pair ea \<lparr>cfg_conf = [teA (cons_l3   (edge_src x) (edge_pop x ! 0) qt)]\<rparr>)")
  apply(thin_tac "d2 (Suc 0) = Some (pair (Some \<lparr>prod_lhs = cons_l3 (edge_src x) (edge_pop x ! 0) qt, prod_rhs = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa), teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr>) \<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa), teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr>)")
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l3 (edge_src x) (edge_pop x ! 0) qt, prod_rhs = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qs), teA (cons_l3   qs (edge_pop x ! 0) qt)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(thin_tac "\<lparr>prod_lhs = cons_l3 (edge_src x) (edge_pop x ! 0) qt, prod_rhs = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa), teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr> \<in> cfg_productions G")
  apply(rename_tac d1 d2 \<alpha> \<pi>1 \<pi>2 e ea x qs qsa qt d da)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d da)(*strict*)
  apply(rename_tac d1 d2)
  apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2)(*strict*)
  apply(subgoal_tac "\<exists>ds1 f\<pi>1 fw1. cfgLM.trans_der_list G ds1 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) SSw) f\<pi>1 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1) \<and> foldl (@) [] fw1 = \<alpha> \<and> foldl (@) [] f\<pi>1 = \<pi>1 " for SSw)
   apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2)(*strict*)
   prefer 2
   apply(rule_tac
      d="d1"
      and w="[(cons_l3   (edge_trg x) (edge_push x ! 0) qs), (cons_l3 qs (edge_pop x ! 0) qt)]"
      in cfgLM_trans_der_cfgLM_derivation_can_be_decomposed_into_trans_der_list)
    apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2)(*strict*)
    apply(simp add: split_TSstructure_def)
   apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2)(*strict*)
   apply(force)
  apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2)(*strict*)
  apply(subgoal_tac "\<exists>ds2 f\<pi>2 fw2. cfgLM.trans_der_list G ds2 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) SSw) f\<pi>2 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw2) \<and> foldl (@) [] fw2 = \<alpha> \<and> foldl (@) [] f\<pi>2 = \<pi>2 " for SSw)
   apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2)(*strict*)
   prefer 2
   apply(rule_tac
      d="d2"
      and w="[(cons_l3   (edge_trg x) (edge_push x ! 0) qsa), (cons_l3 qsa (edge_pop x ! 0) qt)]"
      in cfgLM_trans_der_cfgLM_derivation_can_be_decomposed_into_trans_der_list)
    apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2)(*strict*)
    apply(simp add: split_TSstructure_def)
   apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2)(*strict*)
   apply(force)
  apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2)(*strict*)
  apply(erule exE)+
  apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac " \<forall>i. i<length [cons_l3 (edge_trg x) (edge_push x ! 0) qs, cons_l3 qs (edge_pop x ! 0) qt] \<longrightarrow> i<length [cons_l3 (edge_trg x) (edge_push x ! 0) qsa, cons_l3 qsa (edge_pop x ! 0) qt] \<longrightarrow> [cons_l3 (edge_trg x) (edge_push x ! 0) qs, cons_l3 qs (edge_pop x ! 0) qt]!i = [cons_l3 (edge_trg x) (edge_push x ! 0) qsa, cons_l3 qsa (edge_pop x ! 0) qt]!i \<and> length (f\<pi>1!i)=length (f\<pi>2!i) \<and> fw1!i=fw2!i")
   apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(rule allI)
   apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(rule impI)+
   apply(rule_tac
      ?\<pi>12.0="[]"
      and ?\<pi>22.0="[]"
      in pointwise_equality)
                 apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
                 apply(force)
                apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
                apply(force)
               apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
               apply(force)
              apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
              apply(force)
             apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
             apply(force)
            apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
            apply(force)
           apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
           apply(simp add: notfinishingL_def)
          apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
          apply(force)
         apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
         apply(simp add: notfinishingL_def)
        apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
        apply(simp add: only_l3_nonterminals_def)
        apply(clarsimp)
        apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w1 w2 xA)(*strict*)
        apply(case_tac w1)
         apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w1 w2 xA)(*strict*)
         apply(clarsimp)
        apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w1 w2 xA a list)(*strict*)
        apply(clarsimp)
        apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w2 xA list)(*strict*)
        apply(case_tac list)
         apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w2 xA list)(*strict*)
         apply(clarsimp)
        apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w2 xA list a lista)(*strict*)
        apply(clarsimp)
       apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
       apply(simp add: only_l3_nonterminals_def)
       apply(clarsimp)
       apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w1 w2 xA)(*strict*)
       apply(case_tac w1)
        apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w1 w2 xA)(*strict*)
        apply(clarsimp)
       apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w1 w2 xA a list)(*strict*)
       apply(clarsimp)
       apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w2 xA list)(*strict*)
       apply(case_tac list)
        apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w2 xA list)(*strict*)
        apply(clarsimp)
       apply(rename_tac x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i w2 xA list a lista)(*strict*)
       apply(clarsimp)
      apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
      apply(force)
     apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
     apply(force)
    apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
    apply(force)
   apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(force)
  apply(rename_tac \<alpha> \<pi>1 \<pi>2 x qs qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(erule_tac x="0" in allE')
  apply(erule_tac
      x="Suc 0"
      in allE)
  apply(clarsimp)
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(simp add: cfgLM.trans_der_list_def)
  apply(clarsimp)
  apply(erule_tac x="0" and P="\<lambda>y. y < length fw2 \<longrightarrow> cfgLMTD G (ds1 ! y) ([\<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa)]\<rparr>, \<lparr>cfg_conf = [teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr>] ! y) (f\<pi>1 ! y) \<lparr>cfg_conf = liftB (fw1 ! y)\<rparr>" in allE')
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(erule_tac x="0" and P="\<lambda>y. y < length fw2 \<longrightarrow> cfgLMTD G (ds2 ! y) ([\<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa)]\<rparr>, \<lparr>cfg_conf = [teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr>] ! y) (f\<pi>2 ! y) \<lparr>cfg_conf = liftB (fw2 ! y)\<rparr>" in allE')
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(erule_tac
      x="Suc 0"
      and P="\<lambda>y. y < length fw2 \<longrightarrow> cfgLMTD G (ds1 ! y) ([\<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa)]\<rparr>, \<lparr>cfg_conf = [teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr>] ! y) (f\<pi>1 ! y) \<lparr>cfg_conf = liftB (fw1 ! y)\<rparr>"
      in allE)
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(erule_tac
      x="Suc 0"
      in allE)
  apply(clarsimp)
  apply(erule_tac
      P="fw2 \<noteq> []"
      and Q="cfgLMTD G (ds1 ! 0) \<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa)]\<rparr> (f\<pi>1 ! 0) \<lparr>cfg_conf = liftB (fw2 ! 0)\<rparr>"
      in impE)
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(force)
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(erule impE)
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(force)
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac "f\<pi>1!0 = f\<pi>2!0 \<and> f\<pi>1!Suc 0=f\<pi>2!Suc 0")
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(subgoal_tac "f\<pi>1=[f\<pi>1!0,f\<pi>1!Suc 0]")
    apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
    apply(subgoal_tac "f\<pi>2=[f\<pi>2!0,f\<pi>2!Suc 0]")
     apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
     apply(force)
    apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
    apply(rule listEqI)
     apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
     apply(force)
    apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
    apply(clarsimp)
    apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>2 fw1 fw2 i)(*strict*)
    apply(case_tac i)
     apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>2 fw1 fw2 i)(*strict*)
     apply(clarsimp)
    apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>2 fw1 fw2 i nat)(*strict*)
    apply(clarsimp)
    apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>2 fw1 fw2 nat)(*strict*)
    apply(case_tac nat)
     apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>2 fw1 fw2 nat)(*strict*)
     apply(clarsimp)
    apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>2 fw1 fw2 nat nata)(*strict*)
    apply(clarsimp)
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(rule listEqI)
    apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
    apply(force)
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(clarsimp)
   apply(case_tac i)
    apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
    apply(clarsimp)
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i nat)(*strict*)
   apply(clarsimp)
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 nat)(*strict*)
   apply(case_tac nat)
    apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 nat)(*strict*)
    apply(clarsimp)
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 nat nata)(*strict*)
   apply(clarsimp)
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac "\<exists>\<pi>11 \<pi>12. f\<pi>1 = [\<pi>11,\<pi>12]")
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(rule length2_string_has_two_elems)
   apply(force)
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac "\<exists>\<pi>21 \<pi>22. f\<pi>2 = [\<pi>21,\<pi>22]")
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(rule length2_string_has_two_elems)
   apply(force)
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac "\<exists>w11 w12. fw1 = [w11,w12]")
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(rule length2_string_has_two_elems)
   apply(force)
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac "\<exists>w21 w22. fw2 = [w21,w22]")
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(rule length2_string_has_two_elems)
   apply(force)
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac "\<exists>ds11 ds12. ds1 = [ds11,ds12]")
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(rule length2_string_has_two_elems)
   apply(simp (no_asm_simp))
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac "\<exists>ds21 ds22. ds2 = [ds21,ds22]")
   apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(rule length2_string_has_two_elems)
   apply(simp (no_asm_simp))
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(clarify)
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 \<pi>11 \<pi>21 w11 w21 ds11 ds21 \<pi>12 \<pi>22 w12 w22 ds12 ds22)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d1 \<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa), teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr> (foldl (@) [] [\<pi>11, \<pi>12]) \<lparr>cfg_conf = liftB (foldl (@) [] [w11, w12])\<rparr>")
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 \<pi>11 \<pi>21 w11 w21 ds11 ds21 \<pi>12 \<pi>22 w12 w22 ds12 ds22)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa), teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr> (foldl (@) [] [\<pi>21, \<pi>22]) \<lparr>cfg_conf = liftB (foldl (@) [] [w11, w12])\<rparr>")
  apply(rename_tac x qsa qt d1 d2 ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 \<pi>11 \<pi>21 w11 w21 ds11 ds21 \<pi>12 \<pi>22 w12 w22 ds12 ds22)(*strict*)
  apply(simp (no_asm_use))
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w11 w21 ds11 ds21 \<pi>12 \<pi>22 w12 w22 ds12 ds22)(*strict*)
  apply(clarsimp)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(rule conjI)
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(thin_tac "cfgLM.trans_der G ds12 \<lparr>cfg_conf = [teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr> \<pi>12 \<lparr>cfg_conf = liftB w22\<rparr>")
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(thin_tac "cfgLM.trans_der G ds22 \<lparr>cfg_conf = [teA (cons_l3   qsa (edge_pop x ! 0) qt)]\<rparr> \<pi>22 \<lparr>cfg_conf = liftB w22\<rparr>")
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(erule_tac
      x="\<pi>11"
      in meta_allE)
   apply(erule_tac
      x="ds11"
      in meta_allE)
   apply(erule_tac
      x="ds21"
      in meta_allE)
   apply(erule_tac
      x="edge_trg x"
      in meta_allE)
   apply(erule_tac
      x="edge_push x ! 0"
      in meta_allE)
   apply(erule_tac
      x="qsa"
      in meta_allE)
   apply(erule_tac
      x="\<pi>21"
      in meta_allE)
   apply(erule_tac
      x="w21"
      in meta_allE)
   apply(erule meta_impE)
    apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
    apply(force)
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(erule meta_impE)
    apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
    apply(force)
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(erule meta_impE)
    apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
    apply(force)
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(erule meta_impE)
    apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
    apply(rule notfinishingL_take)
    apply(force)
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(erule meta_impE)
    apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
    apply(rule notfinishingL_take)
    apply(force)
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(erule meta_impE)
    apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
    apply(force)
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(force)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(thin_tac "cfgLM.trans_der G ds11 \<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa)]\<rparr> \<pi>11 \<lparr>cfg_conf = liftB w21\<rparr>")
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(thin_tac "cfgLM.trans_der G ds21 \<lparr>cfg_conf = [teA (cons_l3   (edge_trg x) (edge_push x ! 0) qsa)]\<rparr> \<pi>21 \<lparr>cfg_conf = liftB w21\<rparr>")
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(erule_tac
      x="\<pi>12"
      in meta_allE)
  apply(erule_tac
      x="ds12"
      in meta_allE)
  apply(erule_tac
      x="ds22"
      in meta_allE)
  apply(erule_tac
      x="qsa"
      in meta_allE)
  apply(erule_tac
      x="edge_pop x ! 0"
      in meta_allE)
  apply(erule_tac
      x="qt"
      in meta_allE)
  apply(erule_tac
      x="\<pi>22"
      in meta_allE)
  apply(erule_tac
      x="w22"
      in meta_allE)
  apply(erule meta_impE)
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(force)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
   apply(force)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(force)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(rule notfinishingL_drop2)
  apply(force)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(rule notfinishingL_drop2)
  apply(force)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(force)
  apply(rename_tac x qsa qt \<pi>11 \<pi>21 w21 ds11 ds21 \<pi>12 \<pi>22 w22 ds12 ds22)(*strict*)
  apply(force)
  done

lemma same_l3_string_source_and_same_target_liftB_and_same_prod_to_edge_implies_equal_prods_hlp: "
       F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w\<rparr> (foldl (@) [] f\<pi>1) \<lparr>cfg_conf = liftB (foldl (@) [] fw1)\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = liftA w\<rparr> (foldl (@) [] f\<pi>2) \<lparr>cfg_conf = liftB (foldl (@) [] fw1)\<rparr>
  \<Longrightarrow> only_l3_nonterminals w
  \<Longrightarrow> notfinishingL (foldl (@) [] f\<pi>1)
  \<Longrightarrow> notfinishingL (foldl (@) [] f\<pi>2)
  \<Longrightarrow> map (prod_to_edge G') (foldl (@) [] f\<pi>1) = map (prod_to_edge G') (foldl (@) [] f\<pi>2)
  \<Longrightarrow> \<forall>i<length w. length (f\<pi>1 ! i) = length (f\<pi>2 ! i) \<and> fw1 ! i = fw2 ! i
  \<Longrightarrow> cfgLM.trans_der_list G ds1 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w) f\<pi>1 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1)
  \<Longrightarrow> cfgLM.trans_der_list G ds2 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w) f\<pi>2 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw2)
  \<Longrightarrow> foldl (@) [] fw2 = foldl (@) [] fw1
  \<Longrightarrow> y < length f\<pi>1
  \<Longrightarrow> k\<le>length f\<pi>1
  \<Longrightarrow> take k f\<pi>1 = take k f\<pi>2"
  apply(induct k)
   apply(clarsimp)
  apply(rename_tac k)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "take (Suc k) f\<pi>1 = take k f\<pi>1 @ [f\<pi>1!k]")
   apply(rename_tac k)(*strict*)
   prefer 2
   apply (rule take_Suc_conv_app_nth)
   apply(force)
  apply(rename_tac k)(*strict*)
  apply(subgoal_tac "take (Suc k) f\<pi>2 = take k f\<pi>2 @ [f\<pi>2!k]")
   apply(rename_tac k)(*strict*)
   prefer 2
   apply (rule take_Suc_conv_app_nth)
   apply(simp add: cfgLM.trans_der_list_def)
  apply(rename_tac k)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "map (prod_to_edge G') (f\<pi>1!k) = map (prod_to_edge G') (f\<pi>2!k)")
   apply(rename_tac k)(*strict*)
   prefer 2
   apply(rule_tac
      x="map (prod_to_edge G') (foldl (@) [] f\<pi>1)"
      and y="map (prod_to_edge G') (foldl (@) [] f\<pi>2)"
      and w="map (prod_to_edge G') (foldl (@) [] (take k f\<pi>1))"
      and v="map (prod_to_edge G') (foldl (@) [] (take k f\<pi>2))"
      in equal_by_embedding_and_AX_equal_length)
       apply(rename_tac k)(*strict*)
       apply(simp add: prefix_def)
       apply(rule_tac
      x="map (prod_to_edge G') (foldl (@) [] (drop (Suc k) f\<pi>1))"
      in exI)
       apply(rule_tac
      t=" map (prod_to_edge G') (f\<pi>1 ! k) @ map (prod_to_edge G') (foldl (@) [] (drop (Suc k) f\<pi>1))"
      in subst)
        apply(rename_tac k)(*strict*)
        apply(rule map_append)
        apply(force)
       apply(rename_tac k)(*strict*)
       apply(rule_tac
      t="map (prod_to_edge G') (foldl (@) [] (take k f\<pi>2)) @ map (prod_to_edge G') (f\<pi>1 ! k @ foldl (@) [] (drop (Suc k) f\<pi>1))"
      in subst)
        apply(rename_tac k)(*strict*)
        apply(rule map_append)
        apply(force)
       apply(rename_tac k)(*strict*)
       apply(rule_tac
      t="map (prod_to_edge G') (foldl (@) [] f\<pi>2)"
      and s="map (prod_to_edge G') (foldl (@) [] f\<pi>1)"
      in ssubst)
        apply(rename_tac k)(*strict*)
        apply(force)
       apply(rename_tac k)(*strict*)
       apply(rule_tac
      f="map (prod_to_edge G')"
      in arg_cong)
       apply(rule_tac
      t="f\<pi>1 ! k @ foldl (@) [] (drop (Suc k) f\<pi>1)"
      and s=" foldl (@) [] (f\<pi>1 ! k #drop (Suc k) f\<pi>1) "
      in ssubst)
        apply(rename_tac k)(*strict*)
        apply (metis append_Nil foldl_Cons foldl_first)
       apply(rename_tac k)(*strict*)
       apply(rule_tac
      t="foldl (@) [] (take k f\<pi>2) @ foldl (@) [] (f\<pi>1 ! k # drop (Suc k) f\<pi>1)"
      and s=" foldl (@) [] (take k f\<pi>2 @ (f\<pi>1 ! k # drop (Suc k) f\<pi>1)) "
      in ssubst)
        apply(rename_tac k)(*strict*)
        apply(rule foldl_append_distrib)
       apply(rename_tac k)(*strict*)
       apply(rule_tac
      f="foldl (@) []"
      in arg_cong)
       apply(rule_tac
      t="take k f\<pi>2"
      and s="take k f\<pi>1"
      in ssubst)
        apply(rename_tac k)(*strict*)
        apply(force)
       apply(rename_tac k)(*strict*)
       apply (metis append_take_drop_id less_eq_Suc_le_raw nth_drop2)
      apply(rename_tac k)(*strict*)
      apply(simp add: prefix_def)
      apply(rule_tac
      x="map (prod_to_edge G') (foldl (@) [] (drop (Suc k) f\<pi>2))"
      in exI)
      apply(rule_tac
      t=" map (prod_to_edge G') (f\<pi>2 ! k) @ map (prod_to_edge G') (foldl (@) [] (drop (Suc k) f\<pi>2))"
      in subst)
       apply(rename_tac k)(*strict*)
       apply(rule map_append)
       apply(force)
      apply(rename_tac k)(*strict*)
      apply(rule_tac
      t="map (prod_to_edge G') (foldl (@) [] (take k f\<pi>2)) @ map (prod_to_edge G') (f\<pi>2 ! k @ foldl (@) [] (drop (Suc k) f\<pi>2))"
      in subst)
       apply(rename_tac k)(*strict*)
       apply(rule map_append)
       apply(force)
      apply(rename_tac k)(*strict*)
      apply(rule_tac
      f="map (prod_to_edge G')"
      in arg_cong)
      apply(rule_tac
      t="f\<pi>2 ! k @ foldl (@) [] (drop (Suc k) f\<pi>2)"
      and s=" foldl (@) [] (f\<pi>2 ! k #drop (Suc k) f\<pi>2) "
      in ssubst)
       apply(rename_tac k)(*strict*)
       apply (metis append_Nil foldl_Cons foldl_first)
      apply(rename_tac k)(*strict*)
      apply(rule_tac
      t="foldl (@) [] (take k f\<pi>2) @ foldl (@) [] (f\<pi>2 ! k # drop (Suc k) f\<pi>2)"
      and s=" foldl (@) [] (take k f\<pi>2 @ (f\<pi>2 ! k # drop (Suc k) f\<pi>2)) "
      in ssubst)
       apply(rename_tac k)(*strict*)
       apply(rule foldl_append_distrib)
      apply(rename_tac k)(*strict*)
      apply(rule_tac
      f="foldl (@) []"
      in arg_cong)
      apply (metis ConsApp append_take_drop_id concat_asso)
     apply(rename_tac k)(*strict*)
     apply(force)
    apply(rename_tac k)(*strict*)
    apply(force)
   apply(rename_tac k)(*strict*)
   apply(erule_tac
      x="k"
      in allE)
   apply(clarsimp)
   apply(erule impE)
    apply(rename_tac k)(*strict*)
    apply(simp add: cfgLM.trans_der_list_def)
   apply(rename_tac k)(*strict*)
   apply(force)
  apply(rename_tac k)(*strict*)
  apply(erule_tac
      x="k"
      in allE)
  apply(simp add: cfgLM.trans_der_list_def)
  apply(clarsimp)
  apply(erule_tac
      x="k"
      in allE)+
  apply(clarsimp)
  apply(case_tac "w!k")
   apply(rename_tac k q b)(*strict*)
   apply(clarsimp)
   apply(rule only_l3_nonterminals_nth_l2)
     apply(rename_tac k q b)(*strict*)
     apply(force)
    apply(rename_tac k q b)(*strict*)
    apply(force)
   apply(rename_tac k q b)(*strict*)
   apply(force)
  apply(rename_tac k q1 b q2)(*strict*)
  apply(clarsimp)
  apply(rule_tac
      ?d1.0="ds1!k"
      and ?d2.0="ds2!k"
      in same_l3_source_and_same_target_liftB_and_same_prod_to_edge_implies_equal_prods)
        apply(rename_tac k q1 b q2)(*strict*)
        apply(force)
       apply(rename_tac k q1 b q2)(*strict*)
       apply(force)
      apply(rename_tac k q1 b q2)(*strict*)
      apply(force)
     apply(rename_tac k q1 b q2)(*strict*)
     apply(force)
    apply(rename_tac k q1 b q2)(*strict*)
    apply(rule notfinishingL_foldl)
     apply(rename_tac k q1 b q2)(*strict*)
     apply(force)
    apply(rename_tac k q1 b q2)(*strict*)
    apply(force)
   apply(rename_tac k q1 b q2)(*strict*)
   apply(rule notfinishingL_foldl)
    apply(rename_tac k q1 b q2)(*strict*)
    apply(force)
   apply(rename_tac k q1 b q2)(*strict*)
   apply(force)
  apply(rename_tac k q1 b q2)(*strict*)
  apply(force)
  done

lemma same_l3_string_source_and_same_target_liftB_and_same_prod_to_edge_implies_equal_prods: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=liftA w\<rparr> \<pi>1 \<lparr>cfg_conf=liftB \<alpha>\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=liftA w\<rparr> \<pi>2 \<lparr>cfg_conf=liftB \<alpha>\<rparr>
  \<Longrightarrow> only_l3_nonterminals w
  \<Longrightarrow> notfinishingL \<pi>1
  \<Longrightarrow> notfinishingL \<pi>2
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> \<pi>1=\<pi>2"
  apply(subgoal_tac "\<exists>ds1 f\<pi>1 fw1. cfgLM.trans_der_list G ds1 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w) f\<pi>1 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1) \<and> foldl (@) [] fw1 = \<alpha> \<and> foldl (@) [] f\<pi>1 = \<pi>1 ")
   prefer 2
   apply(rule cfgLM_trans_der_cfgLM_derivation_can_be_decomposed_into_trans_der_list)
    apply(simp add: split_TSstructure_def)
   apply(force)
  apply(subgoal_tac "\<exists>ds1 f\<pi>1 fw1. cfgLM.trans_der_list G ds1 (map (\<lambda>x. \<lparr>cfg_conf = [teA x]\<rparr>) w) f\<pi>1 (map (\<lambda>x. \<lparr>cfg_conf = liftB x\<rparr>) fw1) \<and> foldl (@) [] fw1 = \<alpha> \<and> foldl (@) [] f\<pi>1 = \<pi>2 ")
   prefer 2
   apply(rule cfgLM_trans_der_cfgLM_derivation_can_be_decomposed_into_trans_der_list)
    apply(simp add: split_TSstructure_def)
   apply(force)
  apply(erule exE)+
  apply(rename_tac ds1 ds1a f\<pi>1 f\<pi>1a fw1 fw1a)(*strict*)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(subgoal_tac " \<forall>i. i<length w \<longrightarrow> i<length w \<longrightarrow> w!i = w!i \<and> length (f\<pi>1!i)=length (f\<pi>2!i) \<and> fw1!i=fw2!i")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   prefer 2
   apply(rule allI)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(rule impI)+
   apply(rule pointwise_equality)
                 apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
                 apply(force)
                apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
                apply(force)
               apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
               apply(force)
              apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
              apply(force)
             apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
             prefer 2
             apply(force)
            apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
            apply(force)
           apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
           apply(force)
          apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
          apply(force)
         apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
         apply(force)
        apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
        apply(force)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
       apply(force)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 i)(*strict*)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
  apply(clarsimp)
  apply(rule foldl_equal)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2)(*strict*)
   apply(simp add: cfgLM.trans_der_list_def)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y)(*strict*)
  apply(subgoal_tac "\<forall>k. k\<le>length f\<pi>1 \<longrightarrow> take k f\<pi>1 = take k f\<pi>2")
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y)(*strict*)
   apply(erule_tac x="Suc y" and P="\<lambda>X. X \<le> length f\<pi>1 \<longrightarrow> take X f\<pi>1 = take X f\<pi>2" in allE')
   apply(erule_tac
      x="y"
      and P="\<lambda>y. y \<le> length f\<pi>1 \<longrightarrow> take y f\<pi>1 = take y f\<pi>2"
      in allE)
   apply(erule_tac
      x="y"
      in allE)
   apply(simp add: cfgLM.trans_der_list_def)
   apply(clarsimp)
   apply(subgoal_tac "take (Suc y) f\<pi>1 = take y f\<pi>1 @ [f\<pi>1!y]")
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y)(*strict*)
    apply(subgoal_tac "take (Suc y) f\<pi>2 = take y f\<pi>2 @ [f\<pi>2!y]")
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y)(*strict*)
    apply (metis take_Suc_conv_app_nth)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y)(*strict*)
   apply (metis take_Suc_conv_app_nth)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y)(*strict*)
  apply(clarsimp)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
  apply(rule_tac
      ?d1.0="d1"
      and ?d2.0="d2"
      and ?ds1.0="ds1"
      and ?ds2.0="ds2"
      in same_l3_string_source_and_same_target_liftB_and_same_prod_to_edge_implies_equal_prods_hlp)
               apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
               apply(force)
              apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
              apply(force)
             apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
             apply(force)
            apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
            apply(force)
           apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
           apply(force)
          apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
          apply(force)
         apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
         apply(force)
        apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
        apply(force)
       apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
       apply(force)
      apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
      apply(force)
     apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
     apply(force)
    apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
    apply(force)
   apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
   apply(force)
  apply(rename_tac ds1 ds2 f\<pi>1 f\<pi>2 fw1 fw2 y k)(*strict*)
  apply(force)
  done

lemma compatible_cfgLMMIP_from_compatible_source: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLMMIP G d1' (liftA t1) \<pi>1' (liftB (\<alpha> @ [b])) (liftA tn1)
  \<Longrightarrow> cfgLMMIP G d2' (liftA t2) \<pi>2' (liftB (\<alpha> @ [b])) (liftA tn2)
  \<Longrightarrow> map (prod_to_edge G') \<pi>1' = map (prod_to_edge G') \<pi>2'
  \<Longrightarrow> only_l3_nonterminals (butlast t1)
  \<Longrightarrow> only_l3_nonterminals (butlast t2)
  \<Longrightarrow> cropTol3l2 t1=cropTol3l2 t2"
  apply(rule_tac
      xs="t1"
      in rev_cases)
   apply(clarsimp)
   apply(simp add: cfgLMMIP_def)
   apply(clarsimp)
   apply(subgoal_tac "SSrenPI=[] \<and> SSc2=\<lparr>cfg_conf=[]\<rparr>" for SSrenPI SSc2)
    prefer 2
    apply(rule_tac cfgLM_trans_der_from_empty)
    apply(force)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply (simp add:liftB_commutes_over_concat)
  apply(rename_tac ys y)(*strict*)
  apply(rule_tac
      xs="t2"
      in rev_cases)
   apply(rename_tac ys y)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLMMIP_def)
   apply(clarsimp)
   apply(subgoal_tac "SSrenPI=[] \<and> SSc2=\<lparr>cfg_conf=[]\<rparr>" for SSrenPI SSc2)
    apply(rename_tac ys y)(*strict*)
    prefer 2
    apply(rule_tac cfgLM_trans_der_from_empty)
    apply(force)
   apply(rename_tac ys y)(*strict*)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply (simp add:liftB_commutes_over_concat)
  apply(rename_tac ys y ysa ya)(*strict*)
  apply(rename_tac tx1 A1 tx2 A2)
  apply(rename_tac tx1 A1 tx2 A2)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
   apply(rename_tac tx1 A1 tx2 A2)(*strict*)
   prefer 2
   apply(rule_tac
      d="d1'"
      and \<alpha>'="[]"
      and w="tx1"
      and A="A1"
      and \<pi>="\<pi>1'"
      and \<alpha>="\<alpha>"
      and b="b"
      and v="tn1"
      in cfgLMMIP_decompose_into_trans_der_and_cfgLMMIP)
     apply(rename_tac tx1 A1 tx2 A2)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2)(*strict*)
   apply(force)
  apply(rename_tac tx1 A1 tx2 A2)(*strict*)
  apply(erule exE)+
  apply(rename_tac tx1 A1 tx2 A2 \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2)(*strict*)
  apply(rename_tac \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12)(*strict*)
   prefer 2
   apply(rule_tac
      d="d2'"
      and \<alpha>'="[]"
      and w="tx2"
      and A="A2"
      and \<pi>="\<pi>2'"
      and \<alpha>="\<alpha>"
      and b="b"
      and v="tn2"
      in cfgLMMIP_decompose_into_trans_der_and_cfgLMMIP)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12)(*strict*)
   apply(force)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12)(*strict*)
  apply(erule exE)+
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>1 \<pi>2 \<alpha>1 \<alpha>2 d1 d2)(*strict*)
  apply(rename_tac \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply(erule conjE)+
  apply(subgoal_tac "\<pi>12 \<noteq> []")
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   prefer 2
   apply(case_tac "\<pi>12")
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    prefer 2
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 a list)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   apply(clarsimp)
   apply(rename_tac tx1 A1 tx2 A2 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   apply(simp add: cfgLMMIP_def cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac tx1 A1 tx2 A2 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 e ea eb ec ee)(*strict*)
   apply(case_tac \<alpha>12)
    apply(rename_tac tx1 A1 tx2 A2 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 e ea eb ec ee)(*strict*)
    apply(clarsimp)
   apply(rename_tac tx1 A1 tx2 A2 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 e ea eb ec ee a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply(subgoal_tac "\<pi>22 \<noteq> []")
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   prefer 2
   apply(case_tac "\<pi>22")
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    prefer 2
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 a list)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   apply(clarsimp)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   apply(simp add: cfgLMMIP_def cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<alpha>21 \<alpha>22 d21 d22 e ea eb ec ed)(*strict*)
   apply(case_tac \<alpha>22)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<alpha>21 \<alpha>22 d21 d22 e ea eb ec ed)(*strict*)
    apply(clarsimp)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<alpha>21 \<alpha>22 d21 d22 e ea eb ec ed a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply(subgoal_tac "tn1 \<noteq> []")
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   prefer 2
   apply(case_tac tn1)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(rule_tac
      \<pi>="\<pi>12"
      and b="b"
      and \<alpha>="\<alpha>12"
      and t="tn1"
      and T="A1"
      and d="d12"
      in cfgLMMIP_nonterminal_tail_not_empty)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
       apply(force)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 a list)(*strict*)
   apply(force)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply(subgoal_tac "tn2 \<noteq> []")
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   prefer 2
   apply(case_tac tn2)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(rule_tac
      \<pi>="\<pi>22"
      and b="b"
      and \<alpha>="\<alpha>22"
      and t="tn2"
      and T="A2"
      and d="d22"
      in cfgLMMIP_nonterminal_tail_not_empty)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
       apply(force)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 a list)(*strict*)
   apply(force)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply(subgoal_tac "notfinishingL \<pi>12")
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   prefer 2
   apply(rule_tac
      xs="tn1"
      in rev_cases)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 ys y)(*strict*)
   apply(unfold cfgLMMIP_def)
   apply(erule conjE)+
   apply(fold cfgLMMIP_def)
   apply(rule_tac
      d="d12"
      and w="liftB (\<alpha>12 @ [b]) @ liftA ys"
      and B="y"
      in trans_der_notfinishingL)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 ys y)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 ys y)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 ys y)(*strict*)
   apply (simp add:liftA_commutes_over_concat)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply (simp add:liftB_commutes_over_concat)
  apply(subgoal_tac "notfinishingL \<pi>22")
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   prefer 2
   apply(rule_tac
      xs="tn2"
      in rev_cases)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 ys y)(*strict*)
   apply(unfold cfgLMMIP_def)
   apply(erule conjE)+
   apply(fold cfgLMMIP_def)
   apply(rule_tac
      d="d22"
      and w="liftB (\<alpha>22 @ [b]) @ liftA ys"
      and B="y"
      in trans_der_notfinishingL)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 ys y)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 ys y)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 ys y)(*strict*)
   apply (simp add:liftA_commutes_over_concat)
   apply (simp add:liftB_commutes_over_concat)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply(subgoal_tac "notfinishingL \<pi>11")
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   prefer 2
   apply(simp add: notfinishingL_def notfinishing_def)
   apply(clarsimp)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i)(*strict*)
   apply(case_tac "prod_lhs (\<pi>11 ! i)")
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
    apply(clarsimp)
    apply(subgoal_tac "False")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
     prefer 2
     apply(rule_tac
      G="G"
      and d="d11"
      and i="i"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci ci')(*strict*)
    apply(case_tac ci)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci ci' cfg_conf)(*strict*)
    apply(rename_tac wx)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci ci' wx)(*strict*)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
    apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
     prefer 2
     apply(simp add: split_TSstructure_def CFGtermLeft_def)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
    apply(erule_tac
      x="d11"
      in allE)
    apply(erule_tac
      x="\<lparr>cfg_conf = liftA tx1\<rparr>"
      in allE)
    apply(erule_tac
      x="take i \<pi>11"
      in allE)
    apply(erule_tac
      x="\<lparr>cfg_conf = wx\<rparr>"
      in allE)
    apply(erule impE)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
     apply(simp add: cfgLM.trans_der_def)
     apply(rule_tac
      t="min (length \<pi>11) i"
      and s="i"
      in ssubst)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
     apply(clarsimp)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx ea eb)(*strict*)
     apply(rule_tac
      m="length \<pi>11-i"
      and v="map Some (drop i \<pi>11)"
      in get_labels_drop_tail)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx ea eb)(*strict*)
      apply(clarsimp)
      apply (metis List.map_append append_take_drop_id)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx ea eb)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
    apply(erule impE)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
     apply(rule_tac
      x="[]"
      in exI)
     apply(clarsimp)
     apply(rule_tac
      x="tx1"
      in exI)
     apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
    apply(subgoal_tac "only_l3_nonterminals w2")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
     prefer 2
     apply(rule_tac
      ?v1.0="tx1"
      and ?w1.0="[]"
      and d="d11"
      and \<pi>="take i \<pi>11"
      and ?w2.0="w1"
      and ?v2.0="w2"
      in F_SDPDA_TO_CFG_STD__only_l3_nonterminals_preserved)
        apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
        apply(force)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
       apply(force)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
      apply(simp add: cfgLM.trans_der_def)
      apply(rule_tac
      t="min (length \<pi>11) i"
      and s="i"
      in ssubst)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
       apply(force)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
      apply(clarsimp)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 ea eb)(*strict*)
      apply(rule_tac
      m="length \<pi>11 - i "
      and v="map Some (drop i \<pi>11)"
      in get_labels_drop_tail)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 ea eb)(*strict*)
       apply(rule_tac
      t="i + (length \<pi>11 - i)"
      and s="length \<pi>11"
      in ssubst)
        apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 ea eb)(*strict*)
        apply(force)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 ea eb)(*strict*)
       apply (metis map_append append_take_drop_id_hlp)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 ea eb)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 l r)(*strict*)
    apply(case_tac ci')
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 l r cfg_confa)(*strict*)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 l r)(*strict*)
    apply(subgoal_tac "\<exists>l'. liftB l' = l")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 l r)(*strict*)
     prefer 2
     apply(rule_tac
      x="filterB l"
      in exI)
     apply (rule liftBDeConv2)
     apply (metis setA_liftB_substring liftB_commutes_over_concat)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 l r)(*strict*)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 r l')(*strict*)
    apply(subgoal_tac "w1=l'")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 r l')(*strict*)
     apply(clarsimp)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w2 r l')(*strict*)
     apply(case_tac w2)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w2 r l')(*strict*)
      apply(clarsimp)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w2 r l' a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e l' list)(*strict*)
     apply(simp add: only_l3_nonterminals_def)
     apply(erule_tac
      x="[]"
      and P="\<lambda>X. \<forall>w2 xA. cons_l2 q ba # list = X @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 r l')(*strict*)
    apply (metis initial_liftB_strings_coincide)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q1 ba q2)(*strict*)
   apply(simp add: isl3_def)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply(subgoal_tac "notfinishingL \<pi>21")
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   prefer 2
   apply(simp add: notfinishingL_def notfinishing_def)
   apply(clarsimp)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i)(*strict*)
   apply(case_tac "prod_lhs (\<pi>21 ! i)")
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
    apply(clarsimp)
    apply(subgoal_tac "False")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
     prefer 2
     apply(rule_tac
      G="G"
      and d="d21"
      and i="i"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba)(*strict*)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci ci')(*strict*)
    apply(case_tac ci)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci ci' cfg_conf)(*strict*)
    apply(rename_tac wx)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci ci' wx)(*strict*)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
    apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
     prefer 2
     apply(simp add: split_TSstructure_def CFGtermLeft_def)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
    apply(erule_tac
      x="d21"
      in allE)
    apply(erule_tac
      x="\<lparr>cfg_conf = liftA tx2\<rparr>"
      in allE)
    apply(erule_tac
      x="take i \<pi>21"
      in allE)
    apply(erule_tac
      x="\<lparr>cfg_conf = wx\<rparr>"
      in allE)
    apply(erule impE)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
     apply(simp add: cfgLM.trans_der_def)
     apply(rule_tac
      t="min (length \<pi>21) i"
      and s="i"
      in ssubst)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
     apply(clarsimp)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx ea eb)(*strict*)
     apply(rule_tac
      m="length \<pi>21-i"
      and v="map Some (drop i \<pi>21)"
      in get_labels_drop_tail)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx ea eb)(*strict*)
      apply(clarsimp)
      apply (metis List.map_append append_take_drop_id)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx ea eb)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
    apply(erule impE)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
     apply(rule_tac
      x="[]"
      in exI)
     apply(clarsimp)
     apply(rule_tac
      x="tx2"
      in exI)
     apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' wx)(*strict*)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
    apply(subgoal_tac "only_l3_nonterminals w2")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
     prefer 2
     apply(rule_tac
      ?v1.0="tx2"
      and ?w1.0="[]"
      and d="d21"
      and \<pi>="take i \<pi>21"
      and ?w2.0="w1"
      and ?v2.0="w2"
      in F_SDPDA_TO_CFG_STD__only_l3_nonterminals_preserved)
        apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
        apply(force)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
       apply(force)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
      apply(simp add: cfgLM.trans_der_def)
      apply(rule_tac
      t="min (length \<pi>21) i"
      and s="i"
      in ssubst)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
       apply(force)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
      apply(clarsimp)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 ea eb)(*strict*)
      apply(rule_tac
      m="length \<pi>21 - i "
      and v="map Some (drop i \<pi>21)"
      in get_labels_drop_tail)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 ea eb)(*strict*)
       apply(rule_tac
      t="i + (length \<pi>21 - i)"
      and s="length \<pi>21"
      in ssubst)
        apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 ea eb)(*strict*)
        apply(force)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 ea eb)(*strict*)
       apply (metis map_append append_take_drop_id_hlp)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 ea eb)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 l r)(*strict*)
    apply(case_tac ci')
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e ci' w1 w2 l r cfg_confa)(*strict*)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 l r)(*strict*)
    apply(subgoal_tac "\<exists>l'. liftB l' = l")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 l r)(*strict*)
     prefer 2
     apply(rule_tac
      x="filterB l"
      in exI)
     apply (rule liftBDeConv2)
     apply (metis setA_liftB_substring liftB_commutes_over_concat)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 l r)(*strict*)
    apply(clarsimp)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 r l')(*strict*)
    apply(subgoal_tac "w1=l'")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 r l')(*strict*)
     apply(clarsimp)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w2 r l')(*strict*)
     apply(case_tac w2)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w2 r l')(*strict*)
      apply(clarsimp)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w2 r l' a list)(*strict*)
     apply(clarsimp)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e l' list)(*strict*)
     apply(simp add: only_l3_nonterminals_def)
     apply(erule_tac
      x="[]"
      and P="\<lambda>X. \<forall>w2 xA. cons_l2 q ba # list = X @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q ba e w1 w2 r l')(*strict*)
    apply (metis initial_liftB_strings_coincide)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22 i q1 ba q2)(*strict*)
   apply(simp add: isl3_def)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply(subgoal_tac "length \<pi>11 = length \<pi>21")
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   prefer 2
   apply(case_tac "length \<pi>11 < length \<pi>21")
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(subgoal_tac "False")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(unfold cfgLMMIP_def)
    apply(erule conjE)+
    apply(fold cfgLMMIP_def)
    apply(rule_tac
      d1'="d12"
      and d2'="d22"
      and ?d1.0="d11"
      and ?d2.0="d21"
      in compatible_elimination_must_have_same_length)
                   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                   apply(force)
                  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                  apply(force)
                 apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                 apply(force)
                apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                apply(force)
               apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
               apply(force)
              apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
              apply(force)
             apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
             apply(force)
            apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
            apply(force)
           apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
           apply(force)
          apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
          apply(force)
         apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
         apply(force)
        apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
        apply(force)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
       apply(force)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   apply(case_tac "length \<pi>21 < length \<pi>11")
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(subgoal_tac "False")
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(unfold cfgLMMIP_def)
    apply(erule conjE)+
    apply(fold cfgLMMIP_def)
    apply(rule_tac
      d1'="d22"
      and d2'="d12"
      and ?d1.0="d21"
      and ?d2.0="d11"
      in compatible_elimination_must_have_same_length)
                   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                   apply(force)
                  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                  apply(force)
                 apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                 apply(force)
                apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                apply(force)
               apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
               apply(rule sym)
               apply(force)
              apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
              apply(force)
             apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
             apply(force)
            apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
            apply(force)
           apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
           apply(force)
          apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
          apply(force)
         apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
         apply(force)
        apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
        apply(force)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
       apply(force)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   apply(force)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   prefer 2
   apply(unfold cfgLMMIP_def)
   apply(erule conjE)+
   apply(fold cfgLMMIP_def)
   apply(rule_tac
      d1'="d12"
      and d2'="d22"
      and ?d1.0="d11"
      and ?d2.0="d21"
      in compatible_elimination_must_have_same_components)
                  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                  apply(force)
                 apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                 apply(force)
                apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
                apply(force)
               apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
               apply(force)
              apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
              prefer 2
              apply(force)
             apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
             prefer 2
             apply(force)
            apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
            apply(force)
           apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
           apply(force)
          apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
          apply(force)
         apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
         apply(force)
        apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
        apply(force)
       apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
       apply(force)
      apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
      apply(force)
     apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
     apply(force)
    apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
    apply(force)
   apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
   apply(force)
  apply(rename_tac tx1 A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>11 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 \<alpha>22 d21 d22)(*strict*)
  apply(clarsimp)
  apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
  apply(subgoal_tac "\<pi>11 = \<pi>21")
   apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
   prefer 2
   apply(rule_tac
      ?d1.0="d11"
      and ?d2.0="d21"
      in same_l3_string_source_and_same_target_liftB_and_same_prod_to_edge_implies_equal_prods)
          apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
          apply(force)
         apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
         apply(force)
        apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
        apply(force)
       apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
       apply(force)
      apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
      apply(force)
     apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
     apply(force)
    apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
    apply(force)
   apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
   apply(force)
  apply(rename_tac A1 tx2 A2 \<pi>11 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
  apply(clarsimp)
  apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
  apply(subgoal_tac "cropTol3l2_single A1 = cropTol3l2_single A2")
   apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
   apply(simp add: drop_and_crop_def butn_def cropTol3l2_def)
  apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d11 \<lparr>cfg_conf = liftA tx2\<rparr> \<pi>21 \<lparr>cfg_conf = liftB \<alpha>21\<rparr>")
  apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
  apply(thin_tac "cfgLMMIP G d1' (liftA (tx2 @ [A1])) (\<pi>21 @ \<pi>12) (liftB (\<alpha>21 @ \<alpha>12) @ [teB b]) (liftA tn1)")
  apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
  apply(thin_tac "cfgLMMIP G d2' (liftA (tx2 @ [A2])) (\<pi>21 @ \<pi>22) (liftB (\<alpha>21 @ \<alpha>12) @ [teB b]) (liftA tn2)")
  apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d21 \<lparr>cfg_conf = liftA tx2\<rparr> \<pi>21 \<lparr>cfg_conf = liftB \<alpha>21\<rparr>")
  apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
  apply(subgoal_tac "cfgLM.trans_der G d12 \<lparr>cfg_conf = [teA A1]\<rparr> \<pi>12 \<lparr>cfg_conf = liftB (\<alpha>12 @ [b]) @ liftA tn1\<rparr>")
   apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
   prefer 2
   apply(simp add: cfgLMMIP_def)
   apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d12 \<pi>21 \<pi>22 d22)(*strict*)
   apply (simp add:liftB_commutes_over_concat)
  apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
  apply(subgoal_tac "cfgLM.trans_der G d22 \<lparr>cfg_conf = [teA A2]\<rparr> \<pi>22 \<lparr>cfg_conf = liftB (\<alpha>12 @ [b]) @ liftA tn2\<rparr>")
   apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
   prefer 2
   apply(simp add: cfgLMMIP_def)
   apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d12 \<pi>21 \<pi>22 d22)(*strict*)
   apply (simp add:liftB_commutes_over_concat)
  apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
  apply(thin_tac "cfgLMMIP G d12 [teA A1] \<pi>12 (liftB \<alpha>12 @ [teB b]) (liftA tn1)")
  apply(thin_tac "cfgLMMIP G d22 [teA A2] \<pi>22 (liftB \<alpha>12 @ [teB b]) (liftA tn2)")
  apply(case_tac \<pi>12)
   apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22)(*strict*)
   apply(clarsimp)
  apply(rename_tac A1 tx2 A2 \<pi>12 \<alpha>12 d11 d12 \<pi>21 \<pi>22 \<alpha>21 d21 d22 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 a list z zs)(*strict*)
  apply(rename_tac pX1 \<pi>X1 pX2 \<pi>X2)
  apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
  apply(subgoal_tac "notfinishing pX1")
   apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
   prefer 2
   apply(simp add: notfinishingL_def)
   apply(force)
  apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
  apply(subgoal_tac "notfinishing pX2")
   apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
   prefer 2
   apply(simp add: notfinishingL_def)
   apply(force)
  apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d22"
      and i="0"
      and kleene_starT="True"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
    apply(force)
   apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
   apply(force)
  apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d12"
      and i="0"
      and kleene_starT="True"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
    apply(force)
   apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
   apply(force)
  apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2)(*strict*)
  apply(clarsimp)
  apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a l r la ra)(*strict*)
  apply(case_tac l)
   apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a l r la ra)(*strict*)
   prefer 2
   apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a l r la ra a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac A1 tx2 A2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac A1 tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a la ra)(*strict*)
  apply(case_tac la)
   apply(rename_tac A1 tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a la ra)(*strict*)
   prefer 2
   apply(rename_tac A1 tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a la ra a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac A1 tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a)(*strict*)
  apply(case_tac ci')
  apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci' ci'a cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci'a)(*strict*)
  apply(case_tac ci'a)
  apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea ci'a cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea)(*strict*)
  apply(rule_tac
      ?p1.0="pX1"
      and ?p2.0="pX2"
      in same_source_edge_productions_have_similar_lhs)
        apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea)(*strict*)
        apply(force)
       apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea)(*strict*)
       apply(force)
      apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea)(*strict*)
      apply(force)
     apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea)(*strict*)
     apply(force)
    apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea)(*strict*)
    apply(clarsimp)
    apply(simp add: notfinishing_def)
   apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea)(*strict*)
   apply(clarsimp)
   apply(simp add: notfinishing_def)
  apply(rename_tac tx2 \<alpha>12 d12 \<pi>21 d22 pX1 \<pi>X1 pX2 \<pi>X2 e ea)(*strict*)
  apply(force)
  done

lemma no_terminal_productions_for_2LR1Grammar: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> set \<pi> \<subseteq> cfg_productions G
  \<Longrightarrow> (\<forall>p\<in> set(butlast \<pi>). \<forall>b A. prod_rhs p\<noteq>[teB b,teA A])
  \<Longrightarrow> (\<forall>p\<in> set(butlast \<pi>). setB (prod_rhs p) = {})"
  apply(clarsimp)
  apply(rename_tac p)(*strict*)
  apply(erule_tac
      x="p"
      in ballE)
   apply(rename_tac p)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac p)(*strict*)
  apply(subgoal_tac "p \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
   apply(rename_tac p)(*strict*)
   prefer 2
   apply(rule_tac
      A="cfg_productions G"
      in set_mp)
    apply(rename_tac p)(*strict*)
    apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def cfg_sub_def)
   apply(rename_tac p)(*strict*)
   apply(rule_tac
      A="set \<pi>"
      in set_mp)
    apply(rename_tac p)(*strict*)
    apply(force)
   apply(rename_tac p)(*strict*)
   apply (metis in_set_butlastD)
  apply(rename_tac p)(*strict*)
  apply(clarsimp)
  apply(erule disjE)+
   apply(rename_tac p)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
   apply(erule disjE)+
    apply(rename_tac p)(*strict*)
    apply(clarsimp)
    apply(rename_tac p x)(*strict*)
    apply(case_tac "edge_event x")
     apply(rename_tac p x)(*strict*)
     apply(clarsimp)
    apply(rename_tac p x a)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
    apply(force)
   apply(rename_tac p)(*strict*)
   apply(erule disjE)+
    apply(rename_tac p)(*strict*)
    apply(clarsimp)
    apply(rename_tac p x)(*strict*)
    apply(case_tac "edge_push x")
     apply(rename_tac p x)(*strict*)
     apply(clarsimp)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
    apply(rename_tac p x a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac p)(*strict*)
   apply(clarsimp)
   apply(rename_tac p x)(*strict*)
   apply(case_tac "edge_push x")
    apply(rename_tac p x)(*strict*)
    apply(clarsimp)
   apply(rename_tac p x a list)(*strict*)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac p x a list)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
    apply(clarsimp)
   apply(rename_tac p x a list aa)(*strict*)
   apply(case_tac "edge_event x")
    apply(rename_tac p x a list aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac p x a list aa ab)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
  apply(rename_tac p)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def prod_sets)
  apply(erule disjE)+
   apply(rename_tac p)(*strict*)
   apply(clarsimp)
   apply(rename_tac p x)(*strict*)
   apply(case_tac "edge_event x")
    apply(rename_tac p x)(*strict*)
    apply(clarsimp)
   apply(rename_tac p x a)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
  apply(rename_tac p)(*strict*)
  apply(erule disjE)+
   apply(rename_tac p)(*strict*)
   apply(clarsimp)
  apply(rename_tac p)(*strict*)
  apply(clarsimp)
  apply(rename_tac p x)(*strict*)
  apply(case_tac "edge_push x")
   apply(rename_tac p x)(*strict*)
   apply(clarsimp)
  apply(rename_tac p x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
   apply(rename_tac p x a list)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
   apply(erule disjE)+
    apply(rename_tac p x a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac p x a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac p x a list aa)(*strict*)
  apply(case_tac "edge_event x")
   apply(rename_tac p x a list aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac p x a list aa ab)(*strict*)
  apply(clarsimp)
  done

lemma preserve_only_l3_nonterminals: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> set \<pi> \<subseteq> cfg_productions G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf=liftA w\<rparr> \<pi> c'
  \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A]
  \<Longrightarrow> n\<le>length \<pi>
  \<Longrightarrow> d n = Some (pair e \<lparr>cfg_conf=liftA v\<rparr>)
  \<Longrightarrow> only_l3_nonterminals (butlast w)
  \<Longrightarrow> only_l3_nonterminals (butlast v)"
  apply(induct n arbitrary: e v)
   apply(rename_tac e v)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac v ea)(*strict*)
   apply(subgoal_tac "v=w")
    apply(rename_tac v ea)(*strict*)
    apply(force)
   apply(rename_tac v ea)(*strict*)
   apply(rule liftA_inj)
   apply(force)
  apply(rename_tac n e v)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
   apply(rename_tac n e v)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d"
      and i="n"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac n e v)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac n e v)(*strict*)
    apply(force)
   apply(rename_tac n e v)(*strict*)
   apply(force)
  apply(rename_tac n e v)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v ea ci)(*strict*)
  apply(erule_tac
      x="ea"
      in meta_allE)
  apply(subgoal_tac "setB (cfg_conf ci) = {}")
   apply(rename_tac n v ea ci)(*strict*)
   prefer 2
   apply(rule no_terminal_production_implies_always_no_terminals)
       apply(rename_tac n v ea ci)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac n v ea ci)(*strict*)
      apply(force)
     apply(rename_tac n v ea ci)(*strict*)
     apply(rule no_terminal_productions_for_2LR1Grammar)
        apply(rename_tac n v ea ci)(*strict*)
        apply(force)
       apply(rename_tac n v ea ci)(*strict*)
       apply(force)
      apply(rename_tac n v ea ci)(*strict*)
      apply(force)
     apply(rename_tac n v ea ci)(*strict*)
     apply(force)
    apply(rename_tac n v ea ci)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac n v ea ci)(*strict*)
   apply(force)
  apply(rename_tac n v ea ci)(*strict*)
  apply(case_tac ci)
  apply(rename_tac n v ea ci cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v ea cfg_conf)(*strict*)
  apply(rename_tac x)
  apply(rename_tac n v ea x)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftA l' = x")
   apply(rename_tac n v ea x)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterA x"
      in exI)
   apply (rule liftA_filterA)
   apply(force)
  apply(rename_tac n v ea x)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v ea l')(*strict*)
  apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
  apply(erule_tac
      x="l'"
      in meta_allE)
  apply(erule meta_impE)
   apply(rename_tac n v ea l')(*strict*)
   apply(force)
  apply(rename_tac n v ea l')(*strict*)
  apply(subgoal_tac "\<pi>!n \<in> F_SDPDA_TO_CFG_STD__edges_l3 G' \<union> F_SDPDA_TO_CFG_STD__edges_l2 G'")
   apply(rename_tac n v ea l')(*strict*)
   prefer 2
   apply(rule_tac
      A="cfg_productions G"
      in set_mp)
    apply(rename_tac n v ea l')(*strict*)
    apply(simp add: F2LR1inputx_def F_SDPDA_TO_CFG_STD_def cfg_sub_def)
   apply(rename_tac n v ea l')(*strict*)
   apply(rule_tac
      A="set \<pi>"
      in set_mp)
    apply(rename_tac n v ea l')(*strict*)
    apply(force)
   apply(rename_tac n v ea l')(*strict*)
   apply (metis nth_Cons_Suc nth_set)
  apply(rename_tac n v ea l')(*strict*)
  apply(clarsimp)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac n v ea l' l r)(*strict*)
  apply(subgoal_tac "l=[]")
   apply(rename_tac n v ea l' l r)(*strict*)
   prefer 2
   apply(rule left_context_empty)
    apply(rename_tac n v ea l' l r)(*strict*)
    apply(force)
   apply(rename_tac n v ea l' l r)(*strict*)
   apply(force)
  apply(rename_tac n v ea l' l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac n v ea l' r)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac n v ea l' r)(*strict*)
   prefer 2
   apply(rule liftA_append)
   apply(rule sym)
   apply(force)
  apply(rename_tac n v ea l' r)(*strict*)
  apply(clarsimp)
  apply(rename_tac n ea l' l1 l2)(*strict*)
  apply(thin_tac "liftA (l1 @ l2) = liftA l1 @ liftA l2")
  apply(case_tac l')
   apply(rename_tac n ea l' l1 l2)(*strict*)
   apply(clarsimp)
  apply(rename_tac n ea l' l1 l2 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac n ea l1 l2 list)(*strict*)
  apply(subgoal_tac "list=l2")
   apply(rename_tac n ea l1 l2 list)(*strict*)
   prefer 2
   apply(rule liftA_inj)
   apply(force)
  apply(rename_tac n ea l1 l2 list)(*strict*)
  apply(clarsimp)
  apply(rename_tac n ea l1 l2)(*strict*)
  apply(erule disjE)+
   apply(rename_tac n ea l1 l2)(*strict*)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
   apply(erule disjE)+
    apply(rename_tac n ea l1 l2)(*strict*)
    apply(clarsimp)
    apply(rename_tac n ea l1 l2 x)(*strict*)
    apply(case_tac "edge_event x")
     apply(rename_tac n ea l1 l2 x)(*strict*)
     apply(clarsimp)
    apply(rename_tac n ea l1 l2 x a)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
    apply(clarsimp)
    apply(rename_tac n ea l1 l2 x a qt)(*strict*)
    apply(rule liftA_BA)
    apply(rule sym)
    apply(force)
   apply(rename_tac n ea l1 l2)(*strict*)
   apply(erule disjE)+
    apply(rename_tac n ea l1 l2)(*strict*)
    apply(clarsimp)
    apply(rename_tac n ea l1 l2 x)(*strict*)
    apply(case_tac "edge_push x")
     apply(rename_tac n ea l1 l2 x)(*strict*)
     apply(clarsimp)
     apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
     apply(case_tac l1)
      apply(rename_tac n ea l1 l2 x)(*strict*)
      prefer 2
      apply(rename_tac n ea l1 l2 x a list)(*strict*)
      apply(clarsimp)
     apply(rename_tac n ea l1 l2 x)(*strict*)
     apply(clarsimp)
     apply(rename_tac n ea l2 x)(*strict*)
     apply(rule_tac
      xs="l2"
      in rev_cases)
      apply(rename_tac n ea l2 x)(*strict*)
      apply(clarsimp)
     apply(rename_tac n ea l2 x ys y)(*strict*)
     apply(clarsimp)
     apply(rename_tac n ea x ys y)(*strict*)
     apply (metis append_Cons eq_Nil_appendI only_l3_nonterminals_drop only_l3_nonterminals_replace_front)
    apply(rename_tac n ea l1 l2 x a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n ea l1 l2)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l1 l2 x)(*strict*)
   apply(case_tac "edge_push x")
    apply(rename_tac n ea l1 l2 x)(*strict*)
    apply(clarsimp)
   apply(rename_tac n ea l1 l2 x a list)(*strict*)
   apply(clarsimp)
   apply(case_tac "edge_event x")
    apply(rename_tac n ea l1 l2 x a list)(*strict*)
    apply(clarsimp)
    apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
    apply(clarsimp)
    apply(rename_tac n ea l1 l2 x a list qs qt)(*strict*)
    apply(subgoal_tac "l1=SSW" for SSW)
     apply(rename_tac n ea l1 l2 x a list qs qt)(*strict*)
     prefer 2
     apply(rule liftA_AA)
     apply(rule sym)
     apply(force)
    apply(rename_tac n ea l1 l2 x a list qs qt)(*strict*)
    apply(thin_tac "[teA (cons_l3   (edge_trg x) a qs), teA (cons_l3   qs (edge_pop x ! 0) qt)] = liftA l1")
    apply(clarsimp)
    apply(rename_tac n ea l2 x a list qs qt)(*strict*)
    apply(rule_tac
      xs="l2"
      in rev_cases)
     apply(rename_tac n ea l2 x a list qs qt)(*strict*)
     apply(clarsimp)
     apply(rename_tac n ea x a list qs qt)(*strict*)
     apply(rule only_l3_nonterminals_single)
    apply(rename_tac n ea l2 x a list qs qt ys y)(*strict*)
    apply(clarsimp)
    apply(rename_tac n ea x a list qs qt ys y)(*strict*)
    apply (metis Cons_eq_appendI Cons_eq_append_conv only_l3_nonterminals_append only_l3_nonterminals_replace_front only_l3_nonterminals_single)
   apply(rename_tac n ea l1 l2 x a list aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac n ea l1 l2)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_def prod_sets)
  apply(rename_tac n ea l1 l2a)(*strict*)
  apply(erule disjE)+
   apply(rename_tac n ea l1 l2)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l1 l2 x)(*strict*)
   apply(case_tac "edge_event x")
    apply(rename_tac n ea l1 l2 x)(*strict*)
    apply(clarsimp)
   apply(rename_tac n ea l1 l2 x a)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
   apply(rename_tac n ea l1 l2a x a)(*strict*)
   apply(rule liftA_BA)
   apply(rule sym)
   apply(force)
  apply(rename_tac n ea l1 l2a)(*strict*)
  apply(erule disjE)+
   apply(rename_tac n ea l1 l2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l1 l2a i A)(*strict*)
   apply(case_tac l1)
    apply(rename_tac n ea l1 l2a i A)(*strict*)
    prefer 2
    apply(rename_tac n ea l1 l2a i A a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac n ea l1 l2a i A)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l2a i A)(*strict*)
   apply(rule_tac
      xs="l2a"
      in rev_cases)
    apply(rename_tac n ea l2a i A)(*strict*)
    apply(clarsimp)
   apply(rename_tac n ea l2a i A ys y)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea i A ys y)(*strict*)
   apply (metis only_l3_nonterminals_l2_at_front)
  apply(rename_tac n ea l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac n ea l1 l2 x)(*strict*)
  apply(case_tac "edge_push x")
   apply(rename_tac n ea l1 l2 x)(*strict*)
   apply(clarsimp)
  apply(rename_tac n ea l1 l2 x a list)(*strict*)
  apply(clarsimp)
  apply(case_tac "edge_event x")
   apply(rename_tac n ea l1 l2 x a list)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_TO_CFG_STD__edges_l3_def prod_sets)
   apply(rename_tac n ea l1 l2a x a list)(*strict*)
   apply(erule disjE)+
    apply(rename_tac n ea l1 l2a x a list)(*strict*)
    apply(clarsimp)
    apply(subgoal_tac "l1=SSW" for SSW)
     apply(rename_tac n ea l1 l2a x a list)(*strict*)
     prefer 2
     apply(rule liftA_A)
     apply(rule sym)
     apply(force)
    apply(rename_tac n ea l1 l2a x a list)(*strict*)
    apply(thin_tac "[teA (cons_l2   (edge_trg x) a)] = liftA l1")
    apply(clarsimp)
    apply(rename_tac n ea l2a x a list)(*strict*)
    apply(rule_tac
      xs="l2a"
      in rev_cases)
     apply(rename_tac n ea l2a x a list)(*strict*)
     apply(clarsimp)
    apply(rename_tac n ea l2a x a list ys y)(*strict*)
    apply(clarsimp)
    apply(rename_tac n ea x a list ys y)(*strict*)
    apply (metis only_l3_nonterminals_l2_at_front)
   apply(rename_tac n ea l1 l2a x a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l1 l2a x a list qs)(*strict*)
   apply(subgoal_tac "l1=SSW" for SSW)
    apply(rename_tac n ea l1 l2a x a list qs)(*strict*)
    prefer 2
    apply(rule liftA_AA)
    apply(rule sym)
    apply(force)
   apply(rename_tac n ea l1 l2a x a list qs)(*strict*)
   apply(thin_tac "[teA (cons_l3   (edge_trg x) a qs), teA (cons_l2   qs (edge_pop x ! 0))] = liftA l1")
   apply(clarsimp)
   apply(rename_tac n ea l2a x a list qs)(*strict*)
   apply(rule_tac
      xs="l2a"
      in rev_cases)
    apply(rename_tac n ea l2a x a list qs)(*strict*)
    apply(clarsimp)
    apply(rename_tac n ea x a list qs)(*strict*)
    apply(rule only_l3_nonterminals_single)
   apply(rename_tac n ea l2a x a list qs ys y)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea x a list qs ys y)(*strict*)
   apply (metis only_l3_nonterminals_l2_at_front)
  apply(rename_tac n ea l1 l2 x a list aa)(*strict*)
  apply(clarsimp)
  done

lemma realizable_length_eq: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> notfinishingL \<pi>1
  \<Longrightarrow> notfinishingL \<pi>2
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=liftA w1\<rparr> \<pi>1 c1'
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=liftA w2\<rparr> \<pi>2 c2'
  \<Longrightarrow> only_l3_nonterminals(butlast w1)
  \<Longrightarrow> only_l3_nonterminals(butlast w2)
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> (\<forall>p\<in> set(butlast \<pi>1). \<forall>b A. prod_rhs p\<noteq>[teB b,teA A])
  \<Longrightarrow> (\<forall>p\<in> set(butlast \<pi>2). \<forall>b A. prod_rhs p\<noteq>[teB b,teA A])
  \<Longrightarrow> length (realizable G \<pi>1) = length (realizable G \<pi>2)"
  apply(induct "length \<pi>1" arbitrary: \<pi>1 \<pi>2 d1 d2 w1 w2 c1' c2' rule: less_induct)
  apply(rename_tac \<pi>1 \<pi>2 d1 d2 w1 w2 c1' c2')(*strict*)
  apply(clarsimp)
  apply(case_tac \<pi>1)
   apply(rename_tac \<pi>1 \<pi>2 d1 d2 w1 w2 c1' c2')(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 d1 d2 w1 w2 c1' c2' a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' a list z zs)(*strict*)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
  apply(subgoal_tac "set (p1#\<pi>1) \<subseteq> cfg_productions G")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
   prefer 2
   apply(rule_tac
      t="cfg_productions G"
      and s="cfg_step_labels G"
      in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
    apply(simp add: cfg_step_labels_def)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
   apply(rule cfgLM.trans_der_all_step_labels)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
    apply(simp add: split_TSstructure_def)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
  apply(subgoal_tac "set (p2#\<pi>2) \<subseteq> cfg_productions G")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
   prefer 2
   apply(rule_tac
      t="cfg_productions G"
      and s="cfg_step_labels G"
      in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
    apply(simp add: cfg_step_labels_def)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
   apply(rule_tac
      d="d2"
      in cfgLM.trans_der_all_step_labels)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
    apply(simp add: split_TSstructure_def)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
   prefer 2
   apply(rule_tac
      ?p1.0="p1"
      and ?p2.0="p2"
      in nonfinal_prod_to_edge_to_special_production_set)
         apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
         apply(force)
        apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
        apply(force)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
    apply(simp add: notfinishingL_def notfinishing_def)
    apply(clarsimp)
    apply(case_tac p1)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 prod_lhsa prod_rhsa)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' \<pi>1 p2 \<pi>2 prod_lhsa)(*strict*)
    apply(erule_tac
      x="0"
      in allE)+
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
   apply(simp add: notfinishingL_def notfinishing_def)
   apply(clarsimp)
   apply(case_tac p2)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 prod_lhsa prod_rhsa)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 \<pi>2 prod_lhsa)(*strict*)
   apply(erule_tac
      x="0"
      in allE)+
   apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
  apply(erule disjE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
   prefer 2
   apply(clarsimp)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' \<pi>1 \<pi>2 i ia A Aa)(*strict*)
   apply(simp add: notfinishingL_def notfinishing_def)
   apply(erule_tac
      x="0"
      in allE)+
   apply(clarsimp)
   apply(simp add: isl3_def)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
  apply(erule disjE)+
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
   apply(subgoal_tac "\<pi>1=[]")
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
    prefer 2
    apply(erule_tac
      x="p1"
      and A="set (if \<pi>1 = [] then [] else p1 # butlast \<pi>1)"
      and P="\<lambda>p1. \<forall>b A. prod_rhs p1 \<noteq> [teB b, teA A]"
      in ballE)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
     apply(erule disjE)+
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
       apply(simp add: prod_sets)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
      apply(simp add: prod_sets)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
    apply(rule_tac
      xs="\<pi>1"
      in rev_cases)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y ys ya)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
   apply(subgoal_tac "\<pi>2=[]")
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
    prefer 2
    apply(erule_tac
      x="p2"
      and A="set (if \<pi>2 = [] then [] else p2 # butlast \<pi>2)"
      in ballE)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
     apply(erule disjE)+
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
       apply(simp add: prod_sets)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
     apply(erule disjE)+
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
    apply(rule_tac
      xs="\<pi>2"
      in rev_cases)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y ys ya)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x y)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x y)(*strict*)
   apply(rule_tac
      t="realizable G [p1]"
      and s="[p1]"
      in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x y)(*strict*)
    apply(rule realizable_single)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x y)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x y)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x y)(*strict*)
   apply(rule_tac
      t="realizable G [p2]"
      and s="[p2]"
      in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x y)(*strict*)
    apply(rule realizable_single)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x y)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x y)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x y)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
  apply(erule disjE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   apply(rule_tac
      t="realizable G (p1 # \<pi>1)"
      and s="[p1]"
      in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
    apply(rule realizable_rhs_empty)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
    apply(simp add: prod_sets)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   apply(rule_tac
      t="realizable G (p2 # \<pi>2)"
      and s="[p2]"
      in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
    apply(rule realizable_rhs_empty)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
    apply(simp add: prod_sets)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   apply(force)
    (*push*)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
  apply(clarsimp)
  apply(case_tac "\<pi>1=[]")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x)(*strict*)
   apply(rule_tac
      t="realizable G [p1]"
      and s="[p1]"
      in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x)(*strict*)
    apply(rule realizable_single)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x)(*strict*)
   apply(rule_tac
      t="realizable G [p2]"
      and s="[p2]"
      in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x)(*strict*)
    apply(rule realizable_single)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 p2 x)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
  apply(subgoal_tac "\<exists>A B. prod_rhs p1=[teA A] \<or> prod_rhs p1=[teA A,teA B]")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   prefer 2
   apply(erule disjE)+
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
     apply(simp add: prod_sets)
     apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
    apply(simp add: prod_sets)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(erule disjE)+
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   apply(erule disjE)+
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
  apply(subgoal_tac "\<exists>A B. prod_rhs p2=[teA A] \<or> prod_rhs p2=[teA A,teA B]")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   prefer 2
   apply(erule disjE)+
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
     apply(simp add: prod_sets)
     apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
    apply(simp add: prod_sets)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
   apply(erule disjE)+
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
      apply(clarsimp)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
    apply(erule disjE)+
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
   apply(erule disjE)+
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
      apply(clarsimp)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
    apply(erule disjE)+
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
   apply(erule disjE)+
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
   apply(erule disjE)+
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x)(*strict*)
  apply(erule exE)+
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
  apply(rule_tac
      t="realizable G (p1 # \<pi>1)"
      in ssubst)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
   apply(rule realizable_rhs_one_or_two)
        apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
        apply(simp add: split_TSstructure_def)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
  apply(rule_tac
      t="realizable G (p2 # \<pi>2)"
      in ssubst)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
   apply(rule realizable_rhs_one_or_two)
        apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
        apply(simp add: split_TSstructure_def)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
  apply(subgoal_tac "length (realizable G \<pi>1 @ (if prod_rhs p1 = [teA A, teA B] \<and> strict_prefix (realizable G \<pi>1) \<pi>1 then realizable G (drop (length (realizable G \<pi>1)) \<pi>1) else [])) = length (realizable G \<pi>2 @ (if prod_rhs p2 = [teA Aa, teA Ba] \<and> strict_prefix (realizable G \<pi>2) \<pi>2 then realizable G (drop (length (realizable G \<pi>2)) \<pi>2) else []))")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
  apply(subgoal_tac "length (realizable G \<pi>1) = length (realizable G \<pi>2) \<and> length ((if prod_rhs p1 = [teA A, teA B] \<and> strict_prefix (realizable G \<pi>1) \<pi>1 then realizable G (drop (length (realizable G \<pi>1)) \<pi>1) else [])) = length ((if prod_rhs p2 = [teA Aa, teA Ba] \<and> strict_prefix (realizable G \<pi>2) \<pi>2 then realizable G (drop (length (realizable G \<pi>2)) \<pi>2) else []))")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d1"
      and i="0"
      and kleene_starT="True"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba)(*strict*)
  apply(erule exE)+
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci')(*strict*)
   prefer 2
   apply(rule_tac
      n="Suc 0"
      and d="d1"
      in cfgLM.trans_der_skip_prime)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci')(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci')(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci')(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci')(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci')(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci')(*strict*)
  apply(erule exE)+
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d2"
      and i="0"
      and kleene_starT="True"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d)(*strict*)
  apply(erule exE)+
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a)(*strict*)
   prefer 2
   apply(rule_tac
      n="Suc 0"
      and d="d2"
      in cfgLM.trans_der_skip_prime)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a)(*strict*)
  apply(erule exE)+
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
  apply(subgoal_tac "prefix (realizable G \<pi>1) \<pi>1")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
   prefer 2
   apply(rule realizable_prefix)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
  apply(subgoal_tac "prefix (realizable G \<pi>2) \<pi>2")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
   prefer 2
   apply(rule realizable_prefix)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da)(*strict*)
  apply(case_tac ci')
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da cfg_conf)(*strict*)
  apply(case_tac ci'a)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da cfg_conf cfg_confa)(*strict*)
  apply(rename_tac v1 v2)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftA l' = v1")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2)(*strict*)
   prefer 2
   apply(thin_tac "\<And>\<pi>1a \<pi>2 d1 d2 w1 w2 c1' c2'. length \<pi>1a < Suc (length \<pi>1) \<Longrightarrow> notfinishingL \<pi>1a \<Longrightarrow> notfinishingL \<pi>2 \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w1\<rparr> \<pi>1a c1' \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = liftA w2\<rparr> \<pi>2 c2' \<Longrightarrow> only_l3_nonterminals (butlast w1) \<Longrightarrow> only_l3_nonterminals (butlast w2) \<Longrightarrow> map (prod_to_edge G') \<pi>1a = map (prod_to_edge G') \<pi>2 \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>1a). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>2). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> length (realizable G \<pi>1a) = length (realizable G \<pi>2)")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2)(*strict*)
   apply(rule_tac
      x="filterA v1"
      in exI)
   apply (rule liftA_filterA)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l r la ra)(*strict*)
   apply(subgoal_tac "l=[]")
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l r la ra)(*strict*)
    prefer 2
    apply(rule left_context_empty)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l r la ra)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l r la ra)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l r la ra)(*strict*)
   apply(subgoal_tac "la=[]")
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l r la ra)(*strict*)
    prefer 2
    apply(rule left_context_empty)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l r la ra)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l r la ra)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l r la ra)(*strict*)
   apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da r ra)(*strict*)
   apply(case_tac w1)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da r ra)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da r ra a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da ra list)(*strict*)
   apply(case_tac w2)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da ra list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da ra list a lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
   apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
   apply(erule disjE)+
       apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
       apply(simp add: prod_sets)
      apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
     apply(erule disjE)+
      apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
    apply(erule disjE)+
      apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
    apply(erule disjE)+
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
   apply(erule disjE)+
      apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
    apply(erule disjE)+
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
   apply(erule disjE)+
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
   apply(erule disjE)+
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
    apply(simp add: prod_sets)
   apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da list lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftA l' = v2")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2)(*strict*)
   prefer 2
   apply(thin_tac "\<And>\<pi>1a \<pi>2 d1 d2 w1 w2 c1' c2'. length \<pi>1a < Suc (length \<pi>1) \<Longrightarrow> notfinishingL \<pi>1a \<Longrightarrow> notfinishingL \<pi>2 \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w1\<rparr> \<pi>1a c1' \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = liftA w2\<rparr> \<pi>2 c2' \<Longrightarrow> only_l3_nonterminals (butlast w1) \<Longrightarrow> only_l3_nonterminals (butlast w2) \<Longrightarrow> map (prod_to_edge G') \<pi>1a = map (prod_to_edge G') \<pi>2 \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>1a). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>2). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> length (realizable G \<pi>1a) = length (realizable G \<pi>2)")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2)(*strict*)
   apply(rule_tac
      x="filterA v2"
      in exI)
   apply (rule liftA_filterA)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' l r la ra)(*strict*)
   apply(subgoal_tac "l=[]")
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' l r la ra)(*strict*)
    prefer 2
    apply(rule left_context_empty)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' l r la ra)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' l r la ra)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' l r la ra)(*strict*)
   apply(subgoal_tac "la=[]")
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' l r la ra)(*strict*)
    prefer 2
    apply(rule left_context_empty)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' l r la ra)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' l r la ra)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' l r la ra)(*strict*)
   apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' r ra)(*strict*)
   apply(case_tac w1)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' r ra)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' r ra a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' ra list)(*strict*)
   apply(case_tac w2)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' ra list)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' ra list a lista)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
   apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
   apply(erule disjE)+
       apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
       apply(simp add: prod_sets)
      apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
      apply(clarsimp)
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
     apply(erule disjE)+
      apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
    apply(erule disjE)+
      apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
    apply(erule disjE)+
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
   apply(erule disjE)+
      apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
    apply(erule disjE)+
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
   apply(erule disjE)+
     apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
   apply(erule disjE)+
    apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
    apply(simp add: prod_sets)
   apply(rename_tac d1 d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da l' list lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2)(*strict*)
  apply(erule exE)+
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 l' l'a)(*strict*)
  apply(rename_tac u1 u2)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(subgoal_tac "only_l3_nonterminals (butlast u1)")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   prefer 2
   apply(thin_tac "liftA u2 = v2")
   apply(thin_tac "d2 0 = Some (pair ea cia) \<and> d2 (Suc 0) = Some (pair (Some ((p2 # \<pi>2) ! 0)) ci'a) \<and> cfgLM_step_relation G cia ((p2 # \<pi>2) ! 0) ci'a \<and> (True \<and> 0 = 0 \<longrightarrow> \<lparr>cfg_conf = liftA w2\<rparr> = cia) \<and> (False \<and> Suc 0 = length (p2 # \<pi>2) \<longrightarrow> c2' = ci'a)")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(thin_tac "p2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or> p2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G')")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ci'a da v1 v2 u1)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 l r)(*strict*)
   apply(subgoal_tac "l=[]")
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 l r)(*strict*)
    prefer 2
    apply(rule left_context_empty)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 l r)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 l r)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 l r)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 r)(*strict*)
   apply(case_tac w1)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 r)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 r a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 list)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 list)(*strict*)
    prefer 2
    apply(rule liftA_append)
    apply(rule sym)
    apply(force)
   apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 u1 list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 list l1 l2)(*strict*)
   apply(thin_tac "liftA (l1 @ l2) = liftA l1 @ liftA l2")
   apply(subgoal_tac "list=l2")
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 list l1 l2)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 l2)(*strict*)
    apply(rule_tac
      xs="l2"
      in rev_cases)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 l2)(*strict*)
     apply(clarsimp)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
     apply(simp add: prod_sets)
     apply(erule disjE)+
        apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
        apply(simp add: prod_sets)
        apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa e d da v2 l1)(*strict*)
        apply(clarsimp)
       apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
       apply(clarsimp)
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
      apply(clarsimp)
      apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1 qs qt)(*strict*)
      apply(subgoal_tac "l1=SSX" for SSX)
       apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1 qs qt)(*strict*)
       prefer 2
       apply(rule liftA_AA)
       apply(force)
      apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1 qs qt)(*strict*)
      apply(clarsimp)
      apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 qs qt)(*strict*)
      apply(rule only_l3_nonterminals_single)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
     apply(erule disjE)+
        apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
        apply(simp add: prod_sets)
        apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa e d da v2 l1)(*strict*)
        apply(clarsimp)
        apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa e d da v2 l1)(*strict*)
        apply(subgoal_tac "l1=SSX" for SSX)
         apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa e d da v2 l1)(*strict*)
         prefer 2
         apply(rule liftA_A)
         apply(force)
        apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa e d da v2 l1)(*strict*)
        apply(clarsimp)
       apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
       apply(clarsimp)
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
      apply(erule disjE)+
       apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
       apply(simp add: prod_sets)
       apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa Ba e d da v2 l1)(*strict*)
       apply(clarsimp)
       apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1)(*strict*)
       apply(subgoal_tac "l1=SSX" for SSX)
        apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1)(*strict*)
        prefer 2
        apply(rule liftA_A)
        apply(force)
       apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1)(*strict*)
       apply(clarsimp)
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
      apply(clarsimp)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
     apply(erule disjE)+
       apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
       apply(simp add: prod_sets)
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
      apply(clarsimp)
      apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa e d da v2 l1 qs)(*strict*)
      apply(subgoal_tac "l1=SSX" for SSX)
       apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa e d da v2 l1 qs)(*strict*)
       prefer 2
       apply(rule liftA_AA)
       apply(force)
      apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa e d da v2 l1 qs)(*strict*)
      apply(clarsimp)
      apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa e d da v2 qs)(*strict*)
      apply(rule only_l3_nonterminals_single)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
     apply(clarsimp)
     apply(erule disjE)+
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1)(*strict*)
     apply(clarsimp)
     apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1 qs)(*strict*)
     apply(subgoal_tac "l1=SSX" for SSX)
      apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1 qs)(*strict*)
      prefer 2
      apply(rule liftA_AA)
      apply(force)
     apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1 qs)(*strict*)
     apply(clarsimp)
     apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 qs)(*strict*)
     apply(rule only_l3_nonterminals_single)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 l2 ys y)(*strict*)
    apply(clarsimp)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y)(*strict*)
    apply(rule_tac
      t="butlast (l1 @ ys @ [y])"
      and s="(l1 @ ys)"
      in ssubst)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y)(*strict*)
     apply(rule butlast_direct)
     apply(force)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y)(*strict*)
    apply(case_tac "prod_lhs p1")
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q b)(*strict*)
     apply(subgoal_tac "False")
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q b)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q b)(*strict*)
     apply(clarsimp)
     apply(simp add: only_l3_nonterminals_def)
     apply(erule_tac
      x="[]"
      and P="\<lambda>w1. \<forall>w2 xA. cons_l2 q b # ys = w1 @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
      in allE)
     apply(clarsimp)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
    apply(clarsimp)
    apply(rule_tac
      ?w1.0="l1"
      in only_l3_nonterminals_append)
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
      prefer 3
      apply(force)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
     prefer 2
     apply(rule_tac
      w="[cons_l3 q1 b q2]"
      in only_l3_nonterminals_drop)
     apply(force)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
    apply(erule disjE)+
       apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
       apply(simp add: prod_sets)
       apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa e d da v2 l1 ys y q1 b q2)(*strict*)
       apply(clarsimp)
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
      apply(simp add: prod_sets)
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa Ba e d da v2 l1 ys y q1 b q2)(*strict*)
      apply(clarsimp)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
     apply(simp add: prod_sets)
     apply(clarsimp)
     apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1 ys y q2 qs)(*strict*)
     apply(subgoal_tac "l1=SSX" for SSX)
      apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1 ys y q2 qs)(*strict*)
      prefer 2
      apply(rule liftA_AA)
      apply(force)
     apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 l1 ys y q2 qs)(*strict*)
     apply(clarsimp)
     apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 ys y q2 qs)(*strict*)
     apply(rule_tac
      ?w1.0="[cons_l3 (edge_trg x) (edge_push x ! 0) qs]"
      in only_l3_nonterminals_append)
       apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 ys y q2 qs)(*strict*)
       prefer 3
       apply(force)
      apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 ys y q2 qs)(*strict*)
      apply(rule only_l3_nonterminals_single)
     apply(rename_tac d1 d2 w2 c1' c2' \<pi>1 p2 \<pi>2 x Aa Ba e d da v2 ys y q2 qs)(*strict*)
     apply(rule only_l3_nonterminals_single)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
    apply(simp add: prod_sets)
    apply(erule disjE)+
       apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
       apply(simp add: prod_sets)
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
      apply(clarsimp)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
     apply(erule disjE)+
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
    apply(erule disjE)+
      apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
      apply(simp add: prod_sets)
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
    apply(erule disjE)+
     apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 l1 ys y q1 b q2)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da v2 list l1 l2)(*strict*)
   apply(rule liftA_inj)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(subgoal_tac "only_l3_nonterminals (butlast u2)")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   prefer 2
   apply(thin_tac "liftA u1 = v1")
   apply(thin_tac "d1 0 = Some (pair e ci) \<and> d1 (Suc 0) = Some (pair (Some ((p1 # \<pi>1) ! 0)) ci') \<and> cfgLM_step_relation G ci ((p1 # \<pi>1) ! 0) ci' \<and> (True \<and> 0 = 0 \<longrightarrow> \<lparr>cfg_conf = liftA w1\<rparr> = ci) \<and> (False \<and> Suc 0 = length (p1 # \<pi>1) \<longrightarrow> c1' = ci')")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(thin_tac "p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or> p1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G')")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(thin_tac "\<And>\<pi>1a \<pi>2 d1 d2 w1 w2 c1' c2'. length \<pi>1a < Suc (length \<pi>1) \<Longrightarrow> notfinishingL \<pi>1a \<Longrightarrow> notfinishingL \<pi>2 \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w1\<rparr> \<pi>1a c1' \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = liftA w2\<rparr> \<pi>2 c2' \<Longrightarrow> only_l3_nonterminals (butlast w1) \<Longrightarrow> only_l3_nonterminals (butlast w2) \<Longrightarrow> map (prod_to_edge G') \<pi>1a = map (prod_to_edge G') \<pi>2 \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>1a). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>2). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> length (realizable G \<pi>1a) = length (realizable G \<pi>2)")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(thin_tac "notfinishingL (p2 # \<pi>2)")
   apply(thin_tac "cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w1\<rparr> (p1 # \<pi>1) c1'")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(thin_tac "cfgLM.trans_der G d2 \<lparr>cfg_conf = liftA w2\<rparr> (p2 # \<pi>2) c2'")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(thin_tac "\<forall>p\<in> set (if \<pi>1 = [] then [] else p1 # butlast \<pi>1). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A]")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(thin_tac "\<forall>p\<in> set (if \<pi>2 = [] then [] else p2 # butlast \<pi>2). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A]")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(rename_tac d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(clarsimp)
   apply(rename_tac d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 l r)(*strict*)
   apply(subgoal_tac "l=[]")
    apply(rename_tac d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 l r)(*strict*)
    prefer 2
    apply(rule left_context_empty)
     apply(rename_tac d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 l r)(*strict*)
     apply(force)
    apply(rename_tac d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 l r)(*strict*)
    apply(force)
   apply(rename_tac d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 l r)(*strict*)
   apply(clarsimp)
   apply(rename_tac d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 r)(*strict*)
   apply(case_tac w2)
    apply(rename_tac d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 r)(*strict*)
    apply(clarsimp)
   apply(rename_tac d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 r a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 list)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 list)(*strict*)
    prefer 2
    apply(rule liftA_append)
    apply(rule sym)
    apply(force)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 u2 list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 list l1 l2)(*strict*)
   apply(thin_tac "liftA (l1 @ l2) = liftA l1 @ liftA l2")
   apply(subgoal_tac "list=l2")
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 list l1 l2)(*strict*)
    apply(clarsimp)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 l2)(*strict*)
    apply(rule_tac
      xs="l2"
      in rev_cases)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 l2)(*strict*)
     apply(clarsimp)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
     apply(simp add: prod_sets)
     apply(erule disjE)+
        apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
        apply(simp add: prod_sets)
        apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa d ea da v1 u1 l1)(*strict*)
        apply(clarsimp)
       apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
       apply(clarsimp)
       apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1 qs qt)(*strict*)
       apply(subgoal_tac "l1=SSX" for SSX)
        apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1 qs qt)(*strict*)
        prefer 2
        apply(rule liftA_AA)
        apply(force)
       apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1 qs qt)(*strict*)
       apply(clarsimp)
       apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 qs qt)(*strict*)
       apply(rule only_l3_nonterminals_single)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
    apply(erule disjE)+
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
     apply(simp add: prod_sets)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B d ea da v1 u1 l1)(*strict*)
     apply(clarsimp)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
    apply(subgoal_tac "l1=SSX" for SSX)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
     prefer 2
     apply(rule liftA_AA)
     apply(force)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
    apply(clarsimp)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 qs qt)(*strict*)
    apply(rule only_l3_nonterminals_single)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
   apply(erule disjE)+
      apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
      apply(simp add: prod_sets)
      apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa d ea da v1 u1 l1)(*strict*)
      apply(clarsimp)
      apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1)(*strict*)
      apply(subgoal_tac "l1=SSX" for SSX)
       apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1)(*strict*)
       prefer 2
       apply(rule liftA_A)
       apply(force)
      apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1)(*strict*)
      apply(clarsimp)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
     apply(clarsimp)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
    apply(erule disjE)+
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
    apply(clarsimp)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1 qs)(*strict*)
    apply(subgoal_tac "l1=SSX" for SSX)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1 qs)(*strict*)
     prefer 2
     apply(rule liftA_AA)
     apply(force)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1 qs)(*strict*)
    apply(clarsimp)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 qs)(*strict*)
    apply(rule only_l3_nonterminals_single)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
   apply(erule disjE)+
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
     apply(simp add: prod_sets)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B d ea da v1 u1 l1)(*strict*)
     apply(clarsimp)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 l1)(*strict*)
     apply(subgoal_tac "l1=SSX" for SSX)
      apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 l1)(*strict*)
      prefer 2
      apply(rule liftA_A)
      apply(force)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 l1)(*strict*)
     apply(clarsimp)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
    apply(clarsimp)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
   apply(erule disjE)+
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
    apply(simp add: prod_sets)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1)(*strict*)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 l1 qs)(*strict*)
   apply(subgoal_tac "l1=SSX" for SSX)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 l1 qs)(*strict*)
    prefer 2
    apply(rule liftA_AA)
    apply(force)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 l1 qs)(*strict*)
   apply(clarsimp)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 qs)(*strict*)
   apply(rule only_l3_nonterminals_single)
  apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 l2 ys y)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y)(*strict*)
  apply(rule_tac
    t="butlast (l1 @ ys @ [y])"
    and s="(l1 @ ys)"
    in ssubst)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y)(*strict*)
   apply(rule butlast_direct)
   apply(force)
  apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y)(*strict*)
  apply(case_tac "prod_lhs p2")
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q b)(*strict*)
   apply(subgoal_tac "False")
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q b)(*strict*)
    apply(force)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q b)(*strict*)
   apply(clarsimp)
   apply(simp add: only_l3_nonterminals_def)
   apply(erule_tac
    x="[]"
    and P="\<lambda>X. \<forall>w2 xA. cons_l2 q b # ys = X @ xA # w2 \<longrightarrow> (\<exists>q1 A q2. xA = cons_l3 q1 A q2)"
    in allE)
   apply(clarsimp)
  apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
  apply(clarsimp)
  apply(rule_tac
    ?w1.0="l1"
    in only_l3_nonterminals_append)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
    prefer 3
    apply(force)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
   prefer 2
   apply(rule_tac
    w="[cons_l3 q1 b q2]"
    in only_l3_nonterminals_drop)
   apply(force)
  apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
  apply(erule disjE)+
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
     apply(simp add: prod_sets)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
     apply(clarsimp)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
    apply(simp add: prod_sets)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
    apply(clarsimp)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1 ys y q2 qs)(*strict*)
    apply(subgoal_tac "l1=SSX" for SSX)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1 ys y q2 qs)(*strict*)
     prefer 2
     apply(rule liftA_AA)
     apply(force)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 l1 ys y q2 qs)(*strict*)
    apply(clarsimp)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 ys y q2 qs)(*strict*)
    apply(rule_tac
    ?w1.0="[cons_l3 (edge_trg x) (edge_push x ! 0) qs]"
    in only_l3_nonterminals_append)
      apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 ys y q2 qs)(*strict*)
      prefer 3
      apply(force)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 ys y q2 qs)(*strict*)
     apply(rule only_l3_nonterminals_single)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A d ea da v1 u1 ys y q2 qs)(*strict*)
    apply(rule only_l3_nonterminals_single)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
   apply(simp add: prod_sets)
   apply(erule disjE)+
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
    apply(simp add: prod_sets)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
    apply(clarsimp)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
   apply(clarsimp)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 l1 ys y q2 qs)(*strict*)
   apply(subgoal_tac "l1=SSX" for SSX)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 l1 ys y q2 qs)(*strict*)
    prefer 2
    apply(rule liftA_AA)
    apply(force)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 l1 ys y q2 qs)(*strict*)
   apply(clarsimp)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 ys y q2 qs)(*strict*)
   apply(rule_tac
    ?w1.0="[cons_l3 (edge_trg x) (edge_push x ! 0) qs]"
    in only_l3_nonterminals_append)
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 ys y q2 qs)(*strict*)
     prefer 3
     apply(force)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 ys y q2 qs)(*strict*)
    apply(rule only_l3_nonterminals_single)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 \<pi>2 x A B d ea da v1 u1 ys y q2 qs)(*strict*)
   apply(rule only_l3_nonterminals_single)
  apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
  apply(simp add: prod_sets)
  apply(erule disjE)+
     apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
     apply(simp add: prod_sets)
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
    apply(clarsimp)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
   apply(simp add: prod_sets)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
   apply(erule disjE)+
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
    apply(simp add: prod_sets)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
   apply(clarsimp)
  apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
  apply(erule disjE)+
    apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
    apply(simp add: prod_sets)
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
   apply(clarsimp)
  apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
  apply(clarsimp)
  apply(erule disjE)+
   apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
   apply(simp add: prod_sets)
  apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 l1 ys y q1 b q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da v1 u1 list l1 l2)(*strict*)
  apply(rule liftA_inj)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(rule context_conjI)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "p1 \<in> cfg_productions G")
  apply(thin_tac "p2 \<in> cfg_productions G")
  apply(thin_tac "p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or> p1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G') ")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "p2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or> p2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G')")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "prod_rhs p1 = [teA A] \<or> prod_rhs p1 = [teA A, teA B]")
  apply(thin_tac "prod_rhs p2 = [teA Aa] \<or> prod_rhs p2 = [teA Aa, teA Ba]")
  apply(thin_tac "edge_push x \<noteq> []")
  apply(thin_tac "edge_event x = None")
  apply(thin_tac "x \<in> epda_delta G'")
  apply(erule_tac
    x="\<pi>1"
    in meta_allE)
  apply(erule_tac
    x="\<pi>2"
    in meta_allE)
  apply(erule_tac
    x="d"
    in meta_allE)
  apply(erule_tac
    x="da"
    in meta_allE)
  apply(erule_tac
    x="u1"
    in meta_allE)
  apply(erule_tac
    x="u2"
    in meta_allE)
  apply(erule_tac
    x="c1'"
    in meta_allE)
  apply(erule_tac
    x="c2'"
    in meta_allE)
  apply(erule meta_impE)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply (metis append_Cons eq_Nil_appendI notfinishingL_drop2)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply (metis append_Cons eq_Nil_appendI notfinishingL_drop2)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(rule_tac
    xs="\<pi>2"
    in rev_cases)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2 ys y)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(erule meta_impE)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(rule_tac
    xs="\<pi>2"
    in rev_cases)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2 ys y)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(case_tac "prod_rhs p1 = [teA A, teA B] \<and> strict_prefix (realizable G \<pi>1) \<pi>1")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  prefer 2
  apply(case_tac "prod_rhs p2 = [teA Aa, teA Ba] \<and> strict_prefix (realizable G \<pi>2) \<pi>2")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  prefer 2
  (*case1: then then*)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  prefer 2
  apply(case_tac "prod_rhs p2 = [teA Aa, teA Ba] \<and> strict_prefix (realizable G \<pi>2) \<pi>2")
  (*case2: if if*)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(subgoal_tac "length (realizable G (drop (length (realizable G \<pi>1)) \<pi>1)) = length (realizable G (drop (length (realizable G \<pi>2)) \<pi>2))")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   prefer 2
   apply(rule_tac
    i="Suc(length (realizable G \<pi>1))"
    and d="d1"
    in cfgLM.trans_der_position_detail)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
     apply(simp add: split_TSstructure_def)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
   apply(simp add: strict_prefix_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 c ca)(*strict*)
   apply(rule_tac
    t="\<pi>1"
    and s="realizable G \<pi>1 @ c"
    in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 c ca)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 c ca)(*strict*)
   apply(rule_tac
    t="length (realizable G \<pi>2)"
    and s="length (realizable G \<pi>1)"
    in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 c ca)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 c ca)(*strict*)
   apply(simp (no_asm))
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
   prefer 2
   apply(rule_tac
    n="Suc(length (realizable G \<pi>1))"
    and d="d1"
    in cfgLM.trans_der_skip_prime)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
    apply(simp add: strict_prefix_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib c ca)(*strict*)
    apply(rule_tac
    t="\<pi>1"
    and s="realizable G \<pi>1 @ c"
    in ssubst)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib c ca)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib c ca)(*strict*)
    apply(rule_tac
    t="length (realizable G \<pi>2)"
    and s="length (realizable G \<pi>1)"
    in ssubst)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib c ca)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib c ca)(*strict*)
    apply(simp (no_asm))
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
   prefer 2
   apply(rule_tac
    i="Suc(length (realizable G \<pi>2))"
    and d="d2"
    in cfgLM.trans_der_position_detail)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
     apply(simp add: split_TSstructure_def)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
   apply(simp add: strict_prefix_def)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib c ca db)(*strict*)
   apply(rule_tac
    P="\<lambda>X. length (realizable G \<pi>2) \<le> length X"
    and s="realizable G \<pi>2 @ ca"
    in ssubst)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib c ca db)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib c ca db)(*strict*)
   apply(simp (no_asm))
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci)(*strict*)
   prefer 2
   apply(rule_tac
    n="Suc(length (realizable G \<pi>2))"
    and d="d2"
    in cfgLM.trans_der_skip_prime)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci)(*strict*)
    apply(simp add: strict_prefix_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci c ca)(*strict*)
    apply(rule_tac
    P="\<lambda>X. length (realizable G \<pi>2) \<le> length X"
    and s="realizable G \<pi>2 @ ca"
    in ssubst)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci c ca)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci c ca)(*strict*)
    apply(simp (no_asm))
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
  apply(erule_tac
    x="drop (length (realizable G \<pi>2)) \<pi>1"
    in meta_allE)
  apply(erule_tac
    x="drop (length (realizable G \<pi>2)) \<pi>2"
    in meta_allE)
  apply(erule_tac
    x="db"
    in meta_allE)
  apply(erule_tac
    x="dc"
    in meta_allE)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
   prefer 2
   apply(thin_tac "\<And>w1 w2 c1' c2'. length (drop (length (realizable G \<pi>2)) \<pi>1) < Suc (length \<pi>1) \<Longrightarrow> notfinishingL (drop (length (realizable G \<pi>2)) \<pi>1) \<Longrightarrow> notfinishingL (drop (length (realizable G \<pi>2)) \<pi>2) \<Longrightarrow> cfgLM.trans_der G db \<lparr>cfg_conf = liftA w1\<rparr> (drop (length (realizable G \<pi>2)) \<pi>1) c1' \<Longrightarrow> cfgLM.trans_der G dc \<lparr>cfg_conf = liftA w2\<rparr> (drop (length (realizable G \<pi>2)) \<pi>2) c2' \<Longrightarrow> only_l3_nonterminals (butlast w1) \<Longrightarrow> only_l3_nonterminals (butlast w2) \<Longrightarrow> map (prod_to_edge G') (drop (length (realizable G \<pi>2)) \<pi>1) = map (prod_to_edge G') (drop (length (realizable G \<pi>2)) \<pi>2) \<Longrightarrow> \<forall>p\<in> set (butlast (drop (length (realizable G \<pi>2)) \<pi>1)). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> \<forall>p\<in> set (butlast (drop (length (realizable G \<pi>2)) \<pi>2)). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> length (realizable G (drop (length (realizable G \<pi>2)) \<pi>1)) = length (realizable G (drop (length (realizable G \<pi>2)) \<pi>2))")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
   apply(thin_tac "p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or> p1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G')")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
   apply(thin_tac "p2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or> p2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G')")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
   apply(rule_tac
    d="d1"
    and n="Suc(length (realizable G \<pi>2))"
    in no_terminal_production_implies_always_no_terminals)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
     apply(rule no_terminal_productions_for_2LR1Grammar)
        apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
        apply(force)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
     apply(simp (no_asm_simp))
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
    apply(simp add: strict_prefix_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc c ca)(*strict*)
    apply(rule_tac
    P="\<lambda>X. (length (realizable G \<pi>2)) < (length X)"
    and s="realizable G \<pi>1 @ c"
    in ssubst)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc c ca)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc c ca)(*strict*)
    apply(rule_tac
    t="length(realizable G \<pi>2)"
    and s="length(realizable G \<pi>1)"
    in ssubst)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc c ca)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc c ca)(*strict*)
    apply(simp (no_asm))
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
   prefer 2
   apply(thin_tac "\<And>w1 w2 c1' c2'. length (drop (length (realizable G \<pi>2)) \<pi>1) < Suc (length \<pi>1) \<Longrightarrow> notfinishingL (drop (length (realizable G \<pi>2)) \<pi>1) \<Longrightarrow> notfinishingL (drop (length (realizable G \<pi>2)) \<pi>2) \<Longrightarrow> cfgLM.trans_der G db \<lparr>cfg_conf = liftA w1\<rparr> (drop (length (realizable G \<pi>2)) \<pi>1) c1' \<Longrightarrow> cfgLM.trans_der G dc \<lparr>cfg_conf = liftA w2\<rparr> (drop (length (realizable G \<pi>2)) \<pi>2) c2' \<Longrightarrow> only_l3_nonterminals (butlast w1) \<Longrightarrow> only_l3_nonterminals (butlast w2) \<Longrightarrow> map (prod_to_edge G') (drop (length (realizable G \<pi>2)) \<pi>1) = map (prod_to_edge G') (drop (length (realizable G \<pi>2)) \<pi>2) \<Longrightarrow> \<forall>p\<in> set (butlast (drop (length (realizable G \<pi>2)) \<pi>1)). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> \<forall>p\<in> set (butlast (drop (length (realizable G \<pi>2)) \<pi>2)). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> length (realizable G (drop (length (realizable G \<pi>2)) \<pi>1)) = length (realizable G (drop (length (realizable G \<pi>2)) \<pi>2))")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
   apply(thin_tac "p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or> p1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G')")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
   apply(thin_tac "p2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or> p2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G')")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
   apply(rule_tac
    d="d2"
    and n="Suc(length (realizable G \<pi>2))"
    in no_terminal_production_implies_always_no_terminals)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
     apply(rule no_terminal_productions_for_2LR1Grammar)
        apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
        apply(force)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
     apply(simp (no_asm_simp))
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
    apply(simp add: strict_prefix_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc c ca)(*strict*)
    apply(rule_tac
    P="\<lambda>X. (length (realizable G \<pi>2)) < (length X)"
    and s="realizable G \<pi>2 @ ca"
    in ssubst)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc c ca)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc c ca)(*strict*)
    apply(simp (no_asm))
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc)(*strict*)
  apply(case_tac cib)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc cfg_confa)(*strict*)
  apply(case_tac ci)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc cfg_confa cfg_confaa)(*strict*)
  apply(rename_tac h1 h2)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 cib db ci dc h1 h2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftA l' = h1")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   prefer 2
   apply(rule_tac
    x="filterA h1"
    in exI)
   apply (rule liftA_filterA)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftA l' = h2")
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   prefer 2
   apply(rule_tac
    x="filterA h2"
    in exI)
   apply (rule liftA_filterA)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc l' l'a)(*strict*)
  apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
  apply(rename_tac h1 h2)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(erule_tac
    x="h1"
    in meta_allE)
  apply(erule_tac
    x="h2"
    in meta_allE)
  apply(erule_tac
    x="c1'"
    in meta_allE)
  apply(erule_tac
    x="c2'"
    in meta_allE)
  apply(erule meta_impE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply (metis drop_Suc_Cons notfinishingL_drop)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply (metis drop_Suc_Cons notfinishingL_drop)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply(rule_tac
    d="d1"
    and n="Suc (length (realizable G \<pi>2))"
    in preserve_only_l3_nonterminals)
          apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
          apply(force)
         apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
         apply(force)
        apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
        prefer 5
        apply(force)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
       prefer 2
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
    apply(simp add: prefix_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 c ca)(*strict*)
    apply(rule_tac
    t="length(realizable G \<pi>2)"
    and s="length(realizable G \<pi>1)"
    in ssubst)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 c ca)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 c ca)(*strict*)
    apply(rule_tac
    P="\<lambda>x. length (realizable G \<pi>1) \<le> length x"
    and s="realizable G \<pi>1 @ c"
    in ssubst)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 c ca)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 c ca)(*strict*)
    apply(simp (no_asm))
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply(rule_tac
    d="d2"
    and n="Suc (length (realizable G \<pi>2))"
    in preserve_only_l3_nonterminals)
          apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
          apply(force)
         apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
         apply(force)
        apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
        prefer 5
        apply(force)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
       prefer 2
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
    apply(simp add: prefix_def)
    apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 c ca)(*strict*)
    apply(rule_tac
    P="\<lambda>x. length (realizable G \<pi>2) \<le> length x"
    and s="realizable G \<pi>2 @ ca"
    in ssubst)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 c ca)(*strict*)
     apply(force)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 c ca)(*strict*)
    apply(simp (no_asm))
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply (metis drop_map)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab)(*strict*)
   apply(erule_tac
    x="p"
    and A="set (butlast \<pi>1)"
    in ballE)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab)(*strict*)
   apply (metis butlast_drop in_set_dropD)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab)(*strict*)
   apply(erule_tac
    x="p"
    and A="set (butlast \<pi>1)"
    and P="\<lambda>p. \<forall>b A. prod_rhs p \<noteq> [teB b, teA A]"
    in ballE)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab)(*strict*)
   apply(rule_tac
    xs="\<pi>2"
    in rev_cases)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab)(*strict*)
    apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y)(*strict*)
   apply(clarsimp)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y)(*strict*)
   apply(subgoal_tac "p\<in> set ys")
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y)(*strict*)
    apply(force)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y)(*strict*)
   apply(rule_tac
    A="set (butlast (drop (length (realizable G (ys @ [y]))) ys @ drop (length (realizable G (ys @ [y])) - length ys) [y]))"
    in set_mp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y)(*strict*)
    apply(case_tac "length (realizable G (ys @ [y])) - length ys")
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y)(*strict*)
     prefer 2
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y nat)(*strict*)
     apply(rule_tac
    t="butlast (drop (length (realizable G (ys @ [y]))) ys @ drop (length (realizable G (ys @ [y])) - length ys) [y])"
    and s="butlast (drop (length (realizable G (ys @ [y]))) ys)"
    in ssubst)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y nat)(*strict*)
      apply(rule_tac
    t="length (realizable G (ys @ [y])) - length ys"
    and s="0"
    in ssubst)
       apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y nat)(*strict*)
       apply(force)
      apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y nat)(*strict*)
      apply(force)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y nat)(*strict*)
     apply (metis append_Nil2 butlast_drop drop_Nil drop_Suc_Cons in_set_butlastD in_set_dropD)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y)(*strict*)
    apply(rule_tac
    t="drop (length (realizable G (ys @ [y])) - length ys) [y]"
    and s="[y]"
    in ssubst)
     apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y)(*strict*)
     apply(clarsimp)
    apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y)(*strict*)
    apply (metis butlast_direct set_drop_subset)
   apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2 p b Ab ys y)(*strict*)
   apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d ea da u1 u2 db dc h1 h2)(*strict*)
  apply(force)
  (*case3: then else*)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(subgoal_tac "False")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "\<And>\<pi>1a \<pi>2 d1 d2 w1 w2 c1' c2'. length \<pi>1a < Suc (length \<pi>1) \<Longrightarrow> notfinishingL \<pi>1a \<Longrightarrow> notfinishingL \<pi>2 \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w1\<rparr> \<pi>1a c1' \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = liftA w2\<rparr> \<pi>2 c2' \<Longrightarrow> only_l3_nonterminals (butlast w1) \<Longrightarrow> only_l3_nonterminals (butlast w2) \<Longrightarrow> map (prod_to_edge G') \<pi>1a = map (prod_to_edge G') \<pi>2 \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>1a). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>2). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> length (realizable G \<pi>1a) = length (realizable G \<pi>2)")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w1\<rparr> (p1 # \<pi>1) c1'")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "notfinishingL (p1 # \<pi>1)")
  apply(thin_tac "only_l3_nonterminals (butlast w1)")
  apply(thin_tac "\<forall>p\<in> set (if \<pi>1 = [] then [] else p1 # butlast \<pi>1). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A]")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "prod_to_edge G' p1 = prod_to_edge G' p2")
  apply(thin_tac "p1 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or> p1 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G')")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "d1 0 = Some (pair e ci) \<and> d1 (Suc 0) = Some (pair (Some ((p1 # \<pi>1) ! 0)) ci') \<and> cfgLM_step_relation G ci ((p1 # \<pi>1) ! 0) ci' \<and> (True \<and> 0 = 0 \<longrightarrow> \<lparr>cfg_conf = liftA w1\<rparr> = ci) \<and> (False \<and> Suc 0 = length (p1 # \<pi>1) \<longrightarrow> c1' = ci')")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(subgoal_tac "strict_prefix (realizable G \<pi>2) \<pi>2")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  prefer 2
  apply(simp add: strict_prefix_def)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da u1 u2 c)(*strict*)
  apply(rule_tac
    x="drop(length(realizable G \<pi>2))\<pi>2"
    in exI)
  apply(rule conjI)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da u1 u2 c)(*strict*)
   apply(rule drop_not_empty_if_len)
   apply(rule_tac
    t="length \<pi>2"
    and s="length \<pi>1"
    in subst)
    apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da u1 u2 c)(*strict*)
    apply(rule map_eq_imp_length_eq)
    apply(force)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da u1 u2 c)(*strict*)
   apply(rule_tac
    t="length (realizable G \<pi>2)"
    and s="length (realizable G \<pi>1)"
    in subst)
    apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da u1 u2 c)(*strict*)
    apply(force)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da u1 u2 c)(*strict*)
   apply(rule_tac
    P="\<lambda>X. length (realizable G \<pi>1) < length X"
    and s="realizable G \<pi>1 @ c"
    in ssubst)
    apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da u1 u2 c)(*strict*)
    apply(force)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da u1 u2 c)(*strict*)
   apply(simp (no_asm))
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba d ea da u1 u2 c)(*strict*)
  apply(rule prefix_drop_is_difference)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B d ea da u1 u2)(*strict*)
  apply(thin_tac "map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2")
  apply(case_tac Aa)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B d ea da u1 u2 q b)(*strict*)
  prefer 2
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B d ea da u1 u2 q1 b q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q1 b q2)(*strict*)
  apply(erule disjE)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q1 b q2)(*strict*)
   apply(simp add: prod_sets)
   apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q1 b q2)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
  apply(erule disjE)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q1 b q2)(*strict*)
   apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q1 b q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B d ea da u1 u2 q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b)(*strict*)
  apply(subgoal_tac "u2=[cons_l2 q b]")
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b)(*strict*)
  prefer 2
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b l r)(*strict*)
  apply(case_tac l)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b l r)(*strict*)
   prefer 2
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b l r a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b r a list)(*strict*)
   apply(case_tac a)
    apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b r a list aa)(*strict*)
    apply(clarsimp)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b r a list ba)(*strict*)
   apply(clarsimp)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b r list ba)(*strict*)
   apply(case_tac w2)
    apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b r list ba)(*strict*)
    apply(clarsimp)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b r list ba a lista)(*strict*)
   apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b r)(*strict*)
  apply(case_tac w2)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b r)(*strict*)
   apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b r a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b list)(*strict*)
  apply(case_tac u2)
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b list)(*strict*)
   apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b list lista)(*strict*)
  apply(subgoal_tac "lista=list")
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b list lista)(*strict*)
   prefer 2
   apply(rule liftA_inj)
   apply(force)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b list lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b list)(*strict*)
  apply(rule_tac
    xs="list"
    in rev_cases)
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b list)(*strict*)
   apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b list ys y)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
  apply(subgoal_tac "only_l3_nonterminals (butlast(cons_l2 q b#ys@[y]))")
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
   apply(subgoal_tac "only_l3_nonterminals ((cons_l2 q b # ys))")
    apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
    apply (rule only_l3_nonterminals_l2_at_front)
    apply(force)
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
   apply(rule_tac
    t="cons_l2 q b # ys"
    and s="butlast (cons_l2 q b # ys @ [y])"
    in subst)
    apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
    apply(rule butlast_direct)
    apply(force)
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
   apply(force)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
  apply(rule_tac
    w="(prod_lhs p2) # (ys @ [y])"
    and d="d2"
    and G="G"
    and G'="G'"
    and \<pi>="p2#\<pi>2"
    and n="Suc 0"
    in preserve_only_l3_nonterminals)
         apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
         apply(force)
        apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
        apply(force)
       apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
       apply(simp (no_asm))
      apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
      apply(rule_tac
    t="liftA (prod_lhs p2 # ys @ [y])"
    and s="teA (prod_lhs p2) # liftA (ys @ [y])"
    in ssubst)
       apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
       apply(simp (no_asm))
      apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
      apply(force)
     apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
     apply(simp (no_asm))
    apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
    apply(force)
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
   apply(simp (no_asm))
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
  apply(rule_tac
    t="butlast (prod_lhs p2 # ys @ [y])"
    in ssubst)
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
   apply(rule butlast_direct)
   apply(force)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b ys y)(*strict*)
  apply(force)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 u2 q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(subgoal_tac "w2=[prod_lhs p2]")
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  prefer 2
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b l r)(*strict*)
  apply(case_tac l)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b l r)(*strict*)
   prefer 2
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b l r a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(case_tac w2)
   apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
   apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b list)(*strict*)
  apply(case_tac list)
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b list)(*strict*)
   apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(thin_tac "cfgLM_step_relation G \<lparr>cfg_conf = [teA (prod_lhs p2)]\<rparr> p2 \<lparr>cfg_conf = [teA (cons_l2   q b)]\<rparr>")
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(case_tac "\<pi>2=[]")
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 x A B d ea da u1 q b)(*strict*)
  apply(simp add: strict_prefix_def)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(subgoal_tac "realizable G \<pi>2 = \<pi>2")
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(simp add: strict_prefix_def)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  prefer 2
  apply(rule_tac
    n="Suc 0"
    and d="d2"
    in cfgLM.trans_der_skip_prime)
      apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
      apply(simp add: split_TSstructure_def)
      apply(force)
     apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
     apply(force)
    apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
    apply(force)
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
   apply(force)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(force)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b)(*strict*)
  apply(erule exE)+
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
  apply(rule_tac
    d="db"
    and da="db"
    in realizable_eq_from_existence)
       apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
      apply(force)
     apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
     apply(force)
    apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
    apply(force)
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
   apply(simp add: prefix_def)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
  apply(rule disjI2)
  apply(force)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
  apply(rule_tac
    t="prod_lhs (hd \<pi>2)"
    and s="cons_l2 q b"
    in ssubst)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
  prefer 2
  apply(force)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
  prefer 2
  apply(rule_tac
    G="G"
    and d="db"
    and i="0"
    and kleene_starT="True"
    and END="False"
    in cfgLM.trans_der_step_detail)
    apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
    apply(simp add: split_TSstructure_def)
   apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
   apply(force)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
  apply(force)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db e ci')(*strict*)
  apply(case_tac \<pi>2)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db e ci')(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A B d ea da u1 q b db e ci' a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 x A B d ea da u1 q b db e ci' a list)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 x A B d ea da u1 q b db e ci' a list l r)(*strict*)
  apply(case_tac l)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 x A B d ea da u1 q b db e ci' a list l r)(*strict*)
  prefer 2
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 x A B d ea da u1 q b db e ci' a list l r aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac d2 c1' c2' p1 \<pi>1 p2 x A B d ea da u1 q b db e ci' a list l r)(*strict*)
  apply(clarsimp)
  (*case4: else then*)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(subgoal_tac "False")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "\<And>\<pi>1a \<pi>2 d1 d2 w1 w2 c1' c2'. length \<pi>1a < Suc (length \<pi>1) \<Longrightarrow> notfinishingL \<pi>1a \<Longrightarrow> notfinishingL \<pi>2 \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = liftA w1\<rparr> \<pi>1a c1' \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = liftA w2\<rparr> \<pi>2 c2' \<Longrightarrow> only_l3_nonterminals (butlast w1) \<Longrightarrow> only_l3_nonterminals (butlast w2) \<Longrightarrow> map (prod_to_edge G') \<pi>1a = map (prod_to_edge G') \<pi>2 \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>1a). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> \<forall>p\<in> set (butlast \<pi>2). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A] \<Longrightarrow> length (realizable G \<pi>1a) = length (realizable G \<pi>2)")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d2 \<lparr>cfg_conf = liftA w2\<rparr> (p2 # \<pi>2) c2'")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "notfinishingL (p2 # \<pi>2)")
  apply(thin_tac "only_l3_nonterminals (butlast w2)")
  apply(thin_tac "\<forall>p\<in> set (if \<pi>2 = [] then [] else p2 # butlast \<pi>2). \<forall>b A. prod_rhs p \<noteq> [teB b, teA A]")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "prod_to_edge G' p1 = prod_to_edge G' p2")
  apply(thin_tac "p2 \<in> F_SDPDA_TO_CFG_STD__edges_l3_push x (epda_states G') \<or> p2 \<in> F_SDPDA_TO_CFG_STD__edges_l2_push x (epda_states G')")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(thin_tac "d2 0 = Some (pair ea cia) \<and> d2 (Suc 0) = Some (pair (Some ((p2 # \<pi>2) ! 0)) ci'a) \<and> cfgLM_step_relation G cia ((p2 # \<pi>2) ! 0) ci'a \<and> (True \<and> 0 = 0 \<longrightarrow> \<lparr>cfg_conf = liftA w2\<rparr> = cia) \<and> (False \<and> Suc 0 = length (p2 # \<pi>2) \<longrightarrow> c2' = ci'a)")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(subgoal_tac "strict_prefix (realizable G \<pi>1) \<pi>1")
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  prefer 2
  apply(simp add: strict_prefix_def)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ci'a da v1 v2 u1 u2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da u1 u2 c)(*strict*)
  apply(rule_tac
    x="drop(length(realizable G \<pi>1))\<pi>1"
    in exI)
  apply(rule conjI)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da u1 u2 c)(*strict*)
  apply(rule drop_not_empty_if_len)
  apply(rule_tac
    t="length \<pi>1"
    and s="length \<pi>2"
    in ssubst)
   apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da u1 u2 c)(*strict*)
   apply(rule map_eq_imp_length_eq)
   apply(force)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da u1 u2 c)(*strict*)
  apply(rule_tac
    t="length (realizable G \<pi>1)"
    and s="length (realizable G \<pi>2)"
    in ssubst)
   apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da u1 u2 c)(*strict*)
   apply(force)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da u1 u2 c)(*strict*)
  apply(rule_tac
    P="\<lambda>X. length (realizable G \<pi>2) < length X"
    and s="realizable G \<pi>2 @ c"
    in ssubst)
   apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da u1 u2 c)(*strict*)
   apply(force)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da u1 u2 c)(*strict*)
  apply(simp (no_asm))
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e d da u1 u2 c)(*strict*)
  apply(rule prefix_drop_is_difference)
  apply(force)
  apply(rename_tac d1 d2 w1 w2 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa B Ba e ci ci' d ea cia ci'a da v1 v2 u1 u2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa Ba e d da u1 u2)(*strict*)
  apply(thin_tac "map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2")
  apply(case_tac A)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa Ba e d da u1 u2 q b)(*strict*)
  prefer 2
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa Ba e d da u1 u2 q1 b q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q1 b q2)(*strict*)
  apply(erule disjE)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q1 b q2)(*strict*)
  apply(simp add: prod_sets)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q1 b q2)(*strict*)
  apply(simp add: F_SDPDA_TO_CFG_STD__edges_l2_push_def)
  apply(erule disjE)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q1 b q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q1 b q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x A Aa Ba e d da u1 u2 q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b)(*strict*)
  apply(subgoal_tac "u1=[cons_l2 q b]")
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b)(*strict*)
  prefer 2
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b l r)(*strict*)
  apply(case_tac l)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b l r)(*strict*)
  prefer 2
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b l r a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b r a list)(*strict*)
  apply(case_tac a)
   apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b r a list aa)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b r a list ba)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b r list ba)(*strict*)
  apply(case_tac w1)
   apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b r list ba)(*strict*)
   apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b r list ba a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b r)(*strict*)
  apply(case_tac w1)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b r)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b r a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b list)(*strict*)
  apply(case_tac u1)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b list lista)(*strict*)
  apply(subgoal_tac "lista=list")
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b list lista)(*strict*)
  prefer 2
  apply(rule liftA_inj)
  apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b list lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b list)(*strict*)
  apply(rule_tac
    xs="list"
    in rev_cases)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b list ys y)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
  apply(subgoal_tac "only_l3_nonterminals (butlast(cons_l2 q b#ys@[y]))")
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
  apply(subgoal_tac "only_l3_nonterminals ((cons_l2 q b # ys))")
   apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
   apply (rule only_l3_nonterminals_l2_at_front)
   apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
  apply(rule_tac
    t="cons_l2 q b # ys"
    and s="butlast (cons_l2 q b # ys @ [y])"
    in subst)
   apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
   apply(rule butlast_direct)
   apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
  apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
  apply(rule_tac
    w="(prod_lhs p1) # (ys @ [y])"
    and d="d1"
    and G="G"
    and G'="G'"
    and \<pi>="p1#\<pi>1"
    and n="Suc 0"
    in preserve_only_l3_nonterminals)
        apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
        apply(force)
       apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
       apply(force)
      apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
      apply(simp (no_asm))
     apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
     apply(rule_tac
    t="liftA (prod_lhs p1 # ys @ [y])"
    and s="teA (prod_lhs p1) # liftA (ys @ [y])"
    in ssubst)
      apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
      apply(simp (no_asm))
     apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
     apply(force)
    apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
    apply(simp (no_asm))
    apply(force)
   apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
   apply(simp (no_asm))
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
  apply(rule_tac
    t="butlast (prod_lhs p1 # ys @ [y])"
    in ssubst)
   apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
   apply(rule butlast_direct)
   apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
  apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b ys y)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b)(*strict*)
  apply(subgoal_tac "w1=[prod_lhs p1]")
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b)(*strict*)
  prefer 2
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b l r)(*strict*)
  apply(case_tac l)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b l r)(*strict*)
  prefer 2
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b l r a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(case_tac w1)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b list)(*strict*)
  apply(case_tac list)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 w1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u1 u2 q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(thin_tac "cfgLM_step_relation G \<lparr>cfg_conf = [teA (prod_lhs p1)]\<rparr> p1 \<lparr>cfg_conf = [teA (cons_l2   q b)]\<rparr>")
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(case_tac "\<pi>1=[]")
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(simp add: strict_prefix_def)
  apply(subgoal_tac "realizable G \<pi>1 = \<pi>1")
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(simp add: strict_prefix_def)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  prefer 2
  apply(rule_tac
    n="Suc 0"
    and d="d1"
    in cfgLM.trans_der_skip_prime)
     apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
     apply(simp add: split_TSstructure_def)
     apply(force)
    apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
    apply(force)
   apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
   apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b)(*strict*)
  apply(erule exE)+
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
  apply(rule_tac
    d="db"
    and da="db"
    in realizable_eq_from_existence)
      apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
      apply(simp add: split_TSstructure_def)
     apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
     apply(force)
    apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
    apply(force)
   apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
   apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
  apply(simp add: prefix_def)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
  apply(rule disjI2)
  apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
  apply(rule_tac
    t="prod_lhs (hd \<pi>1)"
    and s="cons_l2 q b"
    in ssubst)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
  prefer 2
  apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
  apply(subgoal_tac "X" for X)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
  prefer 2
  apply(rule_tac
    G="G"
    and d="db"
    and i="0"
    and kleene_starT="True"
    and END="False"
    in cfgLM.trans_der_step_detail)
   apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
   apply(simp add: split_TSstructure_def)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
  apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
  apply(force)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db ea ci')(*strict*)
  apply(case_tac \<pi>1)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db ea ci')(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 \<pi>1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db ea ci' a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db ea ci' a list)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db ea ci' a list l r)(*strict*)
  apply(case_tac l)
  apply(rename_tac d1 c1' c2' p1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db ea ci' a list l r)(*strict*)
  prefer 2
  apply(rename_tac d1 c1' c2' p1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db ea ci' a list l r aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac d1 c1' c2' p1 p2 \<pi>2 x Aa Ba e d da u2 q b c ca db ea ci' a list l r)(*strict*)
  apply(clarsimp)
  done

lemma compatible_productions_l3_does_not_end_faster: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA A]\<rparr> \<pi>1 \<lparr>cfg_conf=liftA w1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA (cons_l3   q1 A1 q2)]\<rparr> \<pi>2 \<lparr>cfg_conf=liftA w2\<rparr>
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> cropTol3l2_single A = cons_l2 q1 A1
  \<Longrightarrow> case A of cons_l2 q A \<Rightarrow> w1 \<noteq> [] | _ \<Rightarrow> True
  \<Longrightarrow> w2=[]
  \<Longrightarrow> w1=[]"
  apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
  apply(subgoal_tac "length \<pi>1=length \<pi>2")
   apply(case_tac A)
    apply(rename_tac q b)(*strict*)
    prefer 2
    apply(rename_tac q1a b q2a)(*strict*)
    apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
    apply(clarsimp)
    apply(rename_tac q2a e ea)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac q2a e ea)(*strict*)
     prefer 2
     apply(rule_tac
      n="length \<pi>1"
      and ?v1.0="[]"
      and ?v2.0="[]"
      and ?x1.0="[]"
      and ?x2.0="[]"
      and G="G'"
      and G'="G"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and ?w1.0="w1"
      and ?w2.0="[]"
      in cfgLM_positions_remain_compatible_l3l3)
                   apply(rename_tac q2a e ea)(*strict*)
                   apply(simp add: F2LR1inputx_def split_TSstructure_def)
                  apply(rename_tac q2a e ea)(*strict*)
                  apply(simp add: F2LR1inputx_def split_TSstructure_def)
                 apply(rename_tac q2a e ea)(*strict*)
                 apply(simp add: F2LR1inputx_def split_TSstructure_def)
                apply(rename_tac q2a e ea)(*strict*)
                apply(simp add: F2LR1inputx_def split_TSstructure_def)
               apply(rename_tac q2a e ea)(*strict*)
               apply(simp add: F2LR1inputx_def split_TSstructure_def)
              apply(rename_tac q2a e ea)(*strict*)
              apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(rename_tac q2a e ea)(*strict*)
             apply(simp add: cfgLM.trans_der_def)
            apply(rename_tac q2a e ea)(*strict*)
            apply(simp add: cfgLM.trans_der_def)
           apply(rename_tac q2a e ea)(*strict*)
           apply(simp add: cfgLM.trans_der_def)
          apply(rename_tac q2a e ea)(*strict*)
          apply(simp add: cfgLM.trans_der_def)
         apply(rename_tac q2a e ea)(*strict*)
         apply(simp add: cfgLM.trans_der_def)
        apply(rename_tac q2a e ea)(*strict*)
        apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
       apply(rename_tac q2a e ea)(*strict*)
       apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
      apply(rename_tac q2a e ea)(*strict*)
      apply(clarsimp)
      apply(force)
     apply(rename_tac q2a e ea)(*strict*)
     apply(force)
    apply(rename_tac q2a e ea)(*strict*)
    apply(clarsimp)
   apply(rename_tac q b)(*strict*)
   apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
   apply(clarsimp)
   apply(rename_tac e ea)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac e ea)(*strict*)
    prefer 2
    apply(rule_tac
      n="length \<pi>1"
      and ?v1.0="[]"
      and ?v2.0="[]"
      and ?x1.0="[]"
      and ?x2.0="[]"
      and G="G"
      and G'="G'"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and ?w1.0="w1"
      and ?w2.0="[]"
      in cfgLM_positions_remain_compatible_l2l3)
               apply(rename_tac e ea)(*strict*)
               apply(simp add: F2LR1inputx_def split_TSstructure_def)
              apply(rename_tac e ea)(*strict*)
              apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(rename_tac e ea)(*strict*)
             apply(simp add: F2LR1inputx_def split_TSstructure_def)
            apply(rename_tac e ea)(*strict*)
            apply(simp add: F2LR1inputx_def split_TSstructure_def)
           apply(rename_tac e ea)(*strict*)
           apply(simp add: F2LR1inputx_def split_TSstructure_def)
          apply(rename_tac e ea)(*strict*)
          apply(simp add: F2LR1inputx_def split_TSstructure_def)
         apply(rename_tac e ea)(*strict*)
         apply(simp add: cfgLM.trans_der_def)
        apply(rename_tac e ea)(*strict*)
        apply(simp add: cfgLM.trans_der_def)
       apply(rename_tac e ea)(*strict*)
       apply(simp add: cfgLM.trans_der_def)
      apply(rename_tac e ea)(*strict*)
      apply(simp add: cfgLM.trans_der_def)
     apply(rename_tac e ea)(*strict*)
     apply(force)
    apply(rename_tac e ea)(*strict*)
    apply(force)
   apply(rename_tac e ea)(*strict*)
   apply(force)
  apply (metis map_eq_imp_length_eq)
  done

lemma compatible_productions_l3_grows_faster_than_unknown: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA A]\<rparr> \<pi>1 \<lparr>cfg_conf=liftA w1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA (cons_l3   q1 A1 q2)]\<rparr> \<pi>2 \<lparr>cfg_conf=liftA w2\<rparr>
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> cropTol3l2_single A = cons_l2 q1 A1
  \<Longrightarrow> case A of cons_l2 q A \<Rightarrow> w1 \<noteq> [] | _ \<Rightarrow> True
  \<Longrightarrow> length w1 \<le> length w2"
  apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
  apply(subgoal_tac "length \<pi>1=length \<pi>2")
   apply(case_tac A)
    apply(rename_tac q b)(*strict*)
    prefer 2
    apply(rename_tac q1a b q2a)(*strict*)
    apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
    apply(clarsimp)
    apply(rename_tac q2a e ea)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac q2a e ea)(*strict*)
     prefer 2
     apply(rule_tac
      n="length \<pi>1"
      and ?v1.0="[]"
      and ?v2.0="[]"
      and ?x1.0="[]"
      and ?x2.0="[]"
      and G="G'"
      and G'="G"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and ?w1.0="w1"
      and ?w2.0="w2"
      in cfgLM_positions_remain_compatible_l3l3)
                   apply(rename_tac q2a e ea)(*strict*)
                   apply(simp add: F2LR1inputx_def split_TSstructure_def)
                  apply(rename_tac q2a e ea)(*strict*)
                  apply(simp add: F2LR1inputx_def split_TSstructure_def)
                 apply(rename_tac q2a e ea)(*strict*)
                 apply(simp add: F2LR1inputx_def split_TSstructure_def)
                apply(rename_tac q2a e ea)(*strict*)
                apply(simp add: F2LR1inputx_def split_TSstructure_def)
               apply(rename_tac q2a e ea)(*strict*)
               apply(simp add: F2LR1inputx_def split_TSstructure_def)
              apply(rename_tac q2a e ea)(*strict*)
              apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(rename_tac q2a e ea)(*strict*)
             apply(simp add: cfgLM.trans_der_def)
            apply(rename_tac q2a e ea)(*strict*)
            apply(simp add: cfgLM.trans_der_def)
           apply(rename_tac q2a e ea)(*strict*)
           apply(simp add: cfgLM.trans_der_def)
          apply(rename_tac q2a e ea)(*strict*)
          apply(simp add: cfgLM.trans_der_def)
         apply(rename_tac q2a e ea)(*strict*)
         apply(simp add: cfgLM.trans_der_def)
        apply(rename_tac q2a e ea)(*strict*)
        apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
       apply(rename_tac q2a e ea)(*strict*)
       apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
      apply(rename_tac q2a e ea)(*strict*)
      apply(clarsimp)
      apply(rename_tac q2a e ea)(*strict*)
      apply(force)
     apply(rename_tac q2a e ea)(*strict*)
     apply(clarsimp)
    apply(rename_tac q b)(*strict*)
    apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
   apply(rename_tac q b)(*strict*)
   apply(clarsimp)
   apply(rename_tac e ea)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac e ea)(*strict*)
    prefer 2
    apply(rule_tac
      n="length \<pi>1"
      and ?v1.0="[]"
      and ?v2.0="[]"
      and ?x1.0="[]"
      and ?x2.0="[]"
      and G="G"
      and G'="G'"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and ?w1.0="w1"
      and ?w2.0="w2"
      in cfgLM_positions_remain_compatible_l2l3)
               apply(rename_tac e ea)(*strict*)
               apply(simp add: F2LR1inputx_def split_TSstructure_def)
              apply(rename_tac e ea)(*strict*)
              apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(rename_tac e ea)(*strict*)
             apply(simp add: F2LR1inputx_def split_TSstructure_def)
            apply(rename_tac e ea)(*strict*)
            apply(simp add: F2LR1inputx_def split_TSstructure_def)
           apply(rename_tac e ea)(*strict*)
           apply(simp add: F2LR1inputx_def split_TSstructure_def)
          apply(rename_tac e ea)(*strict*)
          apply(simp add: F2LR1inputx_def split_TSstructure_def)
         apply(rename_tac e ea)(*strict*)
         apply(simp add: cfgLM.trans_der_def)
        apply(rename_tac e ea)(*strict*)
        apply(simp add: cfgLM.trans_der_def)
       apply(rename_tac e ea)(*strict*)
       apply(simp add: cfgLM.trans_der_def)
      apply(rename_tac e ea)(*strict*)
      apply(simp add: cfgLM.trans_der_def)
     apply(rename_tac e ea)(*strict*)
     apply(force)
    apply(rename_tac e ea)(*strict*)
    apply(force)
   apply(rename_tac e ea)(*strict*)
   apply(force)
  apply (metis map_eq_imp_length_eq)
  done

lemma compatible_productions_l3_grows_faster_than_unknown_ext: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA A]\<rparr> \<pi>1 \<lparr>cfg_conf=X#liftA w1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA (cons_l3   q1 A1 q2)]\<rparr> \<pi>2 \<lparr>cfg_conf=X#liftA w2\<rparr>
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> cropTol3l2_single A = cons_l2 q1 A1
  \<Longrightarrow> case A of cons_l2 q A \<Rightarrow> w1 \<noteq> [] | _ \<Rightarrow> True
  \<Longrightarrow> length w1 \<le> length w2"
  apply(case_tac X)
   apply(rename_tac a)(*strict*)
   apply(subgoal_tac "length(a#w1) \<le> length (a#w2)")
    apply(rename_tac a)(*strict*)
    apply(force)
   apply(rename_tac a)(*strict*)
   apply(rule_tac
      ?d1.0="d1"
      and ?d2.0="d2"
      in compatible_productions_l3_grows_faster_than_unknown)
         apply(rename_tac a)(*strict*)
         apply(force)
        apply(rename_tac a)(*strict*)
        apply(force)
       apply(rename_tac a)(*strict*)
       apply(simp add: liftA_commutes_over_concat)
      apply(rename_tac a)(*strict*)
      apply(simp add: liftA_commutes_over_concat)
     apply(rename_tac a)(*strict*)
     apply(force)
    apply(rename_tac a)(*strict*)
    apply(force)
   apply(rename_tac a)(*strict*)
   apply(case_tac A)
    apply(rename_tac a q b)(*strict*)
    apply(clarsimp)
   apply(rename_tac a q1a b q2a)(*strict*)
   apply(clarsimp)
  apply(rename_tac b)(*strict*)
  apply(clarsimp)
  apply(rename_tac b)(*strict*)
  apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
  apply(subgoal_tac "length \<pi>1=length \<pi>2")
   apply(rename_tac b)(*strict*)
   apply(case_tac A)
    apply(rename_tac b q ba)(*strict*)
    prefer 2
    apply(rename_tac b q1a ba q2a)(*strict*)
    apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
    apply(clarsimp)
    apply(rename_tac b q2a e ea)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac b q2a e ea)(*strict*)
     prefer 2
     apply(rule_tac
      n="length \<pi>1"
      and ?v1.0="[b]"
      and ?v2.0="[b]"
      and ?x1.0="[]"
      and ?x2.0="[]"
      and G="G'"
      and G'="G"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and ?w1.0="w1"
      and ?w2.0="w2"
      in cfgLM_positions_remain_compatible_l3l3)
                   apply(rename_tac b q2a e ea)(*strict*)
                   apply(simp add: F2LR1inputx_def split_TSstructure_def)
                  apply(rename_tac b q2a e ea)(*strict*)
                  apply(simp add: F2LR1inputx_def split_TSstructure_def)
                 apply(rename_tac b q2a e ea)(*strict*)
                 apply(simp add: F2LR1inputx_def split_TSstructure_def)
                apply(rename_tac b q2a e ea)(*strict*)
                apply(simp add: F2LR1inputx_def split_TSstructure_def)
               apply(rename_tac b q2a e ea)(*strict*)
               apply(simp add: F2LR1inputx_def split_TSstructure_def)
              apply(rename_tac b q2a e ea)(*strict*)
              apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(rename_tac b q2a e ea)(*strict*)
             apply(simp add: cfgLM.trans_der_def)
            apply(rename_tac b q2a e ea)(*strict*)
            apply(simp add: cfgLM.trans_der_def)
           apply(rename_tac b q2a e ea)(*strict*)
           apply(simp add: cfgLM.trans_der_def)
          apply(rename_tac b q2a e ea)(*strict*)
          apply(simp add: cfgLM.trans_der_def)
         apply(rename_tac b q2a e ea)(*strict*)
         apply(simp add: cfgLM.trans_der_def)
        apply(rename_tac b q2a e ea)(*strict*)
        apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
       apply(rename_tac b q2a e ea)(*strict*)
       apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
      apply(rename_tac b q2a e ea)(*strict*)
      apply(clarsimp)
      apply(force)
     apply(rename_tac b q2a e ea)(*strict*)
     apply(force)
    apply(rename_tac b q2a e ea)(*strict*)
    apply(clarsimp)
   apply(rename_tac b q ba)(*strict*)
   apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
   apply(clarsimp)
   apply(rename_tac b e ea)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac b e ea)(*strict*)
    prefer 2
    apply(rule_tac
      n="length \<pi>1"
      and ?v1.0="[b]"
      and ?v2.0="[b]"
      and ?x1.0="[]"
      and ?x2.0="[]"
      and G="G"
      and G'="G'"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and ?w1.0="w1"
      and ?w2.0="w2"
      in cfgLM_positions_remain_compatible_l2l3)
               apply(rename_tac b e ea)(*strict*)
               apply(simp add: F2LR1inputx_def split_TSstructure_def)
              apply(rename_tac b e ea)(*strict*)
              apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(rename_tac b e ea)(*strict*)
             apply(simp add: F2LR1inputx_def split_TSstructure_def)
            apply(rename_tac b e ea)(*strict*)
            apply(simp add: F2LR1inputx_def split_TSstructure_def)
           apply(rename_tac b e ea)(*strict*)
           apply(simp add: F2LR1inputx_def split_TSstructure_def)
          apply(rename_tac b e ea)(*strict*)
          apply(simp add: F2LR1inputx_def split_TSstructure_def)
         apply(rename_tac b e ea)(*strict*)
         apply(simp add: cfgLM.trans_der_def)
        apply(rename_tac b e ea)(*strict*)
        apply(simp add: cfgLM.trans_der_def)
       apply(rename_tac b e ea)(*strict*)
       apply(simp add: cfgLM.trans_der_def)
      apply(rename_tac b e ea)(*strict*)
      apply(simp add: cfgLM.trans_der_def)
     apply(rename_tac b e ea)(*strict*)
     apply(force)
    apply(rename_tac b e ea)(*strict*)
    apply(force)
   apply(rename_tac b e ea)(*strict*)
   apply(force)
  apply(rename_tac b)(*strict*)
  apply (metis map_eq_imp_length_eq)
  done

lemma compatible_left_degen_l2l2: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA (cons_l2   q A)]\<rparr> \<pi>1 c1
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA (cons_l2   q A)]\<rparr> \<pi>2 c2
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> i \<le> length \<pi>1
  \<Longrightarrow> left_degen G d1
  \<Longrightarrow> left_degen G d2
  \<Longrightarrow> notfinishingL \<pi>1
  \<Longrightarrow> notfinishingL \<pi>2
  \<Longrightarrow> \<exists>\<alpha> v1 v2.
  cfg_conf(the(get_configuration(d1 i))) = liftB \<alpha> @ liftA v1
  \<and> cfg_conf(the(get_configuration(d2 i))) = liftB \<alpha> @ liftA v2
  \<and> (v1=[] \<longleftrightarrow> v2=[])
  \<and> (v1 \<noteq> [] \<longrightarrow> (cropTol3l2_single (hd v1) = cropTol3l2_single (hd v2)))
  \<and> proper_l3_l2_seq v1
  \<and> proper_l3_l2_seq v2"
  apply(induct i)
   apply(clarsimp)
   apply(simp add: get_configuration_def cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac e ea)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[cons_l2 q A]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[cons_l2 q A]"
      in exI)
   apply(clarsimp)
   apply (metis proper_l3_l2_seqI)
  apply(rename_tac i)(*strict*)
  apply(subgoal_tac "length \<pi>1 = length \<pi>2")
   apply(rename_tac i)(*strict*)
   prefer 2
   apply (metis length_map not_less_eq_eq trivNat)
  apply(rename_tac i)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d1"
      and i="i"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac i)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac i)(*strict*)
    apply(force)
   apply(rename_tac i)(*strict*)
   apply(force)
  apply(rename_tac i)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> e v1 ci v2 ci')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac i \<alpha> e v1 ci v2 ci')(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d2"
      and i="i"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac i \<alpha> e v1 ci v2 ci')(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac i \<alpha> e v1 ci v2 ci')(*strict*)
    apply(force)
   apply(rename_tac i \<alpha> e v1 ci v2 ci')(*strict*)
   apply(force)
  apply(rename_tac i \<alpha> e v1 ci v2 ci')(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> e v1 ci v2 ci' ea cia ci'a)(*strict*)
  apply(simp add: get_configuration_def)
  apply(case_tac ci)
  apply(rename_tac i \<alpha> e v1 ci v2 ci' ea cia ci'a cfg_confa)(*strict*)
  apply(case_tac cia)
  apply(rename_tac i \<alpha> e v1 ci v2 ci' ea cia ci'a cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> e v1 v2 ci' ea ci'a)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac i \<alpha> e v1 v2 ci' ea ci'a l r la ra)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac i \<alpha> e v1 v2 ci' ea ci'a l r la ra)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac i \<alpha> e v1 v2 ci' ea ci'a l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> e v1 v2 ci' ea ci'a r la ra l')(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = la")
   apply(rename_tac i \<alpha> e v1 v2 ci' ea ci'a r la ra l')(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB la"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac i \<alpha> e v1 v2 ci' ea ci'a r la ra l')(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> e v1 v2 ci' ea ci'a r ra l' l'a)(*strict*)
  apply(thin_tac "setA (liftB l'a) = {}")
  apply(thin_tac "setA (liftB l') = {}")
  apply(case_tac ci')
  apply(rename_tac i \<alpha> e v1 v2 ci' ea ci'a r ra l' l'a cfg_confa)(*strict*)
  apply(case_tac ci'a)
  apply(rename_tac i \<alpha> e v1 v2 ci' ea ci'a r ra l' l'a cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i \<alpha> e v1 v2 ea r ra l' l'a)(*strict*)
  apply(subgoal_tac "\<alpha>=l'")
   apply(rename_tac i \<alpha> e v1 v2 ea r ra l' l'a)(*strict*)
   prefer 2
   apply (metis liftAMap append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac i \<alpha> e v1 v2 ea r ra l' l'a)(*strict*)
  apply(subgoal_tac "\<alpha>=l'a")
   apply(rename_tac i \<alpha> e v1 v2 ea r ra l' l'a)(*strict*)
   prefer 2
   apply (metis liftAMap append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac i \<alpha> e v1 v2 ea r ra l' l'a)(*strict*)
  apply(clarsimp)
  apply(rename_tac i e v1 v2 ea r ra l')(*strict*)
  apply(case_tac v1)
   apply(rename_tac i e v1 v2 ea r ra l')(*strict*)
   apply(clarsimp)
  apply(rename_tac i e v1 v2 ea r ra l' a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac i e v2 ea ra l' list)(*strict*)
  apply(case_tac v2)
   apply(rename_tac i e v2 ea ra l' list)(*strict*)
   apply(clarsimp)
  apply(rename_tac i e v2 ea ra l' list a lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac i e ea l' list lista)(*strict*)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(subgoal_tac "prod_to_edge G' (\<pi>1!i) = prod_to_edge G' (\<pi>2!i)")
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   prefer 2
   apply (metis Suc_le_lessD epdaH_vs_epdaHS.eq_by_map_eq)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2")
  apply(subgoal_tac "X" for X)
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   prefer 2
   apply(rule_tac
      ?p1.0="\<pi>1!i"
      and ?p2.0="\<pi>2!i"
      in nonfinal_prod_to_edge_to_special_production_set)
         apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
         apply(force)
        apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
        apply(force)
       apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
       apply(force)
      apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
      apply(force)
     apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
     apply(force)
    apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
    apply(fold notfinishing_def)
    apply(simp add: notfinishingL_def)
   apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
   apply(simp add: notfinishingL_def)
  apply(rename_tac i e1 e2 \<alpha> v1 v2)(*strict*)
  apply(thin_tac "prod_to_edge G' (\<pi>1 ! i) = prod_to_edge G' (\<pi>2 ! i)")
  apply(simp add: left_degen_def sat_refined_def)
  apply(erule_tac
      x="i"
      in allE)+
  apply(clarsimp)
  apply(rename_tac i e1 e2 \<alpha> v1 v2 w Aa wa wb Aaa wc)(*strict*)
  apply(case_tac "\<alpha>")
   apply(rename_tac i e1 e2 \<alpha> v1 v2 w Aa wa wb Aaa wc)(*strict*)
   prefer 2
   apply(rename_tac i e1 e2 \<alpha> v1 v2 w Aa wa wb Aaa wc a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac i e1 e2 \<alpha> v1 v2 w Aa wa wb Aaa wc)(*strict*)
  apply(clarsimp)
  apply(rename_tac i e1 e2 v1 v2 Aa wa Aaa wc)(*strict*)
  apply(thin_tac "d1 i = SSX" for SSX)
  apply(thin_tac "d1 (Suc i) = SSX" for SSX)
  apply(thin_tac "d2 i = SSX" for SSX)
  apply(thin_tac "d2 (Suc i) = SSX" for SSX)
  apply(rename_tac i e1 e2 v1 v2 Aa wa Aaa wc)(*strict*)
  apply(erule disjE)+
   apply(rename_tac i e1 e2 v1 v2 Aa wa Aaa wc)(*strict*)
   prefer 2
   apply(clarsimp)
   apply(rename_tac i v1 v2 Aa wa Aaa wc)(*strict*)
   apply(simp add: prod_sets)
   apply(clarsimp)
  apply(rename_tac i e1 e2 v1 v2 Aa wa Aaa wc)(*strict*)
  apply(clarsimp)
  apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
  apply(erule disjE)+
   apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
   apply(clarsimp)
   apply(rename_tac i v1 v2 Aa wa Aaa wc x y)(*strict*)
   apply(simp add: prod_sets)
   apply(erule disjE)+
     apply(rename_tac i v1 v2 Aa wa Aaa wc x y)(*strict*)
     apply(clarsimp)
    apply(rename_tac i v1 v2 Aa wa Aaa wc x y)(*strict*)
    apply(clarsimp)
   apply(rename_tac i v1 v2 Aa wa Aaa wc x y)(*strict*)
   apply(erule disjE)+
    apply(rename_tac i v1 v2 Aa wa Aaa wc x y)(*strict*)
    apply(clarsimp)
   apply(rename_tac i v1 v2 Aa wa Aaa wc x y)(*strict*)
   apply(clarsimp)
  apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
  apply(erule disjE)+
   apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
   apply(clarsimp)
   apply(simp add: prod_sets)
  apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
  apply(clarsimp)
  apply(erule disjE)+
    apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
    apply(simp add: prod_sets)
    apply(clarsimp)
    apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(clarsimp)
    apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l3 qs (edge_pop x ! 0) qt]@v1"
      in exI)
    apply(clarsimp)
    apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qsa,cons_l3 qsa (edge_pop x ! 0) qta]@v2"
      in exI)
    apply(clarsimp)
    apply(rule conjI)
     apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
     apply(simp add: cropTol3l2_single_def)
    apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
    apply(rule conjI)
     apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
     apply (metis proper_l3_l2_seq_enlarge proper_l3_l2_seq_replace_first)
    apply(rename_tac i v1 v2 x qs qsa qt qta)(*strict*)
    apply (metis proper_l3_l2_seq_enlarge proper_l3_l2_seq_replace_first)
   apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(rename_tac i v1 v2 Aa wc x qs qt)(*strict*)
   apply(erule disjE)+
    apply(rename_tac i v1 v2 Aa wc x qs qt)(*strict*)
    apply(clarsimp)
    apply(rename_tac i v1 v2 x qs qt)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(clarsimp)
    apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l3 qs (edge_pop x ! 0) qt]@v1"
      in exI)
    apply(clarsimp)
    apply(rule_tac
      x="[cons_l2 (edge_trg x) (edge_push x ! 0)]@v2"
      in exI)
    apply(clarsimp)
    apply(rule conjI)
     apply(rename_tac i v1 v2 x qs qt)(*strict*)
     apply(simp add: cropTol3l2_single_def)
    apply(rename_tac i v1 v2 x qs qt)(*strict*)
    apply(rule conjI)
     apply(rename_tac i v1 v2 x qs qt)(*strict*)
     apply (metis proper_l3_l2_seq_enlarge proper_l3_l2_seq_replace_first)
    apply(rename_tac i v1 v2 x qs qt)(*strict*)
    apply(subgoal_tac "v2=[]")
     apply(rename_tac i v1 v2 x qs qt)(*strict*)
     apply(clarsimp)
     apply(rename_tac i v1 x qs qt)(*strict*)
     apply (metis proper_l3_l2_seqI)
    apply(rename_tac i v1 v2 x qs qt)(*strict*)
    apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
   apply(rename_tac i v1 v2 Aa wc x qs qt)(*strict*)
   apply(clarsimp)
   apply(rename_tac i v1 v2 x qs qt qsa)(*strict*)
   apply(subgoal_tac "v2=[]")
    apply(rename_tac i v1 v2 x qs qt qsa)(*strict*)
    prefer 2
    apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
   apply(rename_tac i v1 v2 x qs qt qsa)(*strict*)
   apply(clarsimp)
   apply(rename_tac i v1 x qs qt qsa)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l3 qs (edge_pop x ! 0) qt]@v1"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qsa,cons_l2 qsa (edge_pop x ! 0)]"
      in exI)
   apply(clarsimp)
   apply(rule conjI)
    apply(rename_tac i v1 x qs qt qsa)(*strict*)
    apply(simp add: cropTol3l2_single_def)
   apply(rename_tac i v1 x qs qt qsa)(*strict*)
   apply(rule conjI)
    apply(rename_tac i v1 x qs qt qsa)(*strict*)
    apply (metis proper_l3_l2_seq_enlarge proper_l3_l2_seq_replace_first)
   apply(rename_tac i v1 x qs qt qsa)(*strict*)
   apply (metis proper_l3_l2_seqI2)
  apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
  apply(erule disjE)+
   apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(rename_tac i v1 v2 Aa wa x qs qt)(*strict*)
   apply(erule disjE)+
    apply(rename_tac i v1 v2 Aa wa x qs qt)(*strict*)
    apply(clarsimp)
    apply(rename_tac i v1 v2 x qs qt)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(clarsimp)
    apply(rule_tac
      x="[cons_l2 (edge_trg x) (edge_push x ! 0)]@v1"
      in exI)
    apply(clarsimp)
    apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l3 qs (edge_pop x ! 0) qt]@v2"
      in exI)
    apply(clarsimp)
    apply(rule conjI)
     apply(rename_tac i v1 v2 x qs qt)(*strict*)
     apply(simp add: cropTol3l2_single_def)
    apply(rename_tac i v1 v2 x qs qt)(*strict*)
    apply(rule conjI)
     apply(rename_tac i v1 v2 x qs qt)(*strict*)
     apply(subgoal_tac "v1=[]")
      apply(rename_tac i v1 v2 x qs qt)(*strict*)
      apply(clarsimp)
      apply(rename_tac i v2 x qs qt)(*strict*)
      apply (metis proper_l3_l2_seqI)
     apply(rename_tac i v1 v2 x qs qt)(*strict*)
     apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
    apply(rename_tac i v1 v2 x qs qt)(*strict*)
    apply (metis proper_l3_l2_seq_enlarge proper_l3_l2_seq_replace_first)
   apply(rename_tac i v1 v2 Aa wa x qs qt)(*strict*)
   apply(clarsimp)
   apply(rename_tac i v1 v2 x qs qt qsa)(*strict*)
   apply(subgoal_tac "v1=[]")
    apply(rename_tac i v1 v2 x qs qt qsa)(*strict*)
    prefer 2
    apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
   apply(rename_tac i v1 v2 x qs qt qsa)(*strict*)
   apply(clarsimp)
   apply(rename_tac i v2 x qs qt qsa)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qsa,cons_l2 qsa (edge_pop x ! 0)]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l3 qs (edge_pop x ! 0) qt]@v2"
      in exI)
   apply(clarsimp)
   apply(rule conjI)
    apply(rename_tac i v2 x qs qt qsa)(*strict*)
    apply(simp add: cropTol3l2_single_def)
   apply(rename_tac i v2 x qs qt qsa)(*strict*)
   apply(rule conjI)
    apply(rename_tac i v2 x qs qt qsa)(*strict*)
    apply (metis proper_l3_l2_seqI2)
   apply(rename_tac i v2 x qs qt qsa)(*strict*)
   apply (metis proper_l3_l2_seq_enlarge proper_l3_l2_seq_replace_first)
  apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
  apply(simp add: prod_sets)
  apply(erule disjE)+
    apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
    apply(clarsimp)
    apply(rename_tac i v1 v2 x)(*strict*)
    apply(subgoal_tac "v1=[]")
     apply(rename_tac i v1 v2 x)(*strict*)
     prefer 2
     apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
    apply(rename_tac i v1 v2 x)(*strict*)
    apply(subgoal_tac "v2=[]")
     apply(rename_tac i v1 v2 x)(*strict*)
     prefer 2
     apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
    apply(rename_tac i v1 v2 x)(*strict*)
    apply(rule_tac
      x="[]"
      in exI)
    apply(clarsimp)
    apply(rename_tac i x)(*strict*)
    apply(rule_tac
      x="[cons_l2 (edge_trg x) (edge_push x ! 0)]"
      in exI)
    apply(clarsimp)
    apply(rule_tac
      x="[cons_l2 (edge_trg x) (edge_push x ! 0)]"
      in exI)
    apply(clarsimp)
    apply (metis proper_l3_l2_seqI)
   apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
   apply(clarsimp)
   apply(rename_tac i v1 v2 x qs)(*strict*)
   apply(subgoal_tac "v1=[]")
    apply(rename_tac i v1 v2 x qs)(*strict*)
    prefer 2
    apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
   apply(rename_tac i v1 v2 x qs)(*strict*)
   apply(subgoal_tac "v2=[]")
    apply(rename_tac i v1 v2 x qs)(*strict*)
    prefer 2
    apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
   apply(rename_tac i v1 v2 x qs)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rename_tac i x qs)(*strict*)
   apply(rule_tac
      x="[cons_l2 (edge_trg x) (edge_push x ! 0)]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l2 qs (edge_pop x ! 0)]"
      in exI)
   apply(clarsimp)
   apply(rule conjI)
    apply(rename_tac i x qs)(*strict*)
    apply(simp add: cropTol3l2_single_def)
   apply(rename_tac i x qs)(*strict*)
   apply(rule conjI)
    apply(rename_tac i x qs)(*strict*)
    apply (metis proper_l3_l2_seqI)
   apply(rename_tac i x qs)(*strict*)
   apply (metis proper_l3_l2_seqI2)
  apply(rename_tac i v1 v2 Aa wa Aaa wc x)(*strict*)
  apply(clarsimp)
  apply(rename_tac i v1 v2 Aa wc x qs)(*strict*)
  apply(erule disjE)+
   apply(rename_tac i v1 v2 Aa wc x qs)(*strict*)
   apply(clarsimp)
   apply(rename_tac i v1 v2 x qs)(*strict*)
   apply(subgoal_tac "v1=[]")
    apply(rename_tac i v1 v2 x qs)(*strict*)
    prefer 2
    apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
   apply(rename_tac i v1 v2 x qs)(*strict*)
   apply(subgoal_tac "v2=[]")
    apply(rename_tac i v1 v2 x qs)(*strict*)
    prefer 2
    apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
   apply(rename_tac i v1 v2 x qs)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rename_tac i x qs)(*strict*)
   apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l2 qs (edge_pop x ! 0)]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[cons_l2 (edge_trg x) (edge_push x ! 0)]"
      in exI)
   apply(clarsimp)
   apply(rule conjI)
    apply(rename_tac i x qs)(*strict*)
    apply(simp add: cropTol3l2_single_def)
   apply(rename_tac i x qs)(*strict*)
   apply(rule conjI)
    apply(rename_tac i x qs)(*strict*)
    apply (metis proper_l3_l2_seqI2)
   apply(rename_tac i x qs)(*strict*)
   apply (metis proper_l3_l2_seqI)
  apply(rename_tac i v1 v2 Aa wc x qs)(*strict*)
  apply(clarsimp)
  apply(rename_tac i v1 v2 x qs qsa)(*strict*)
  apply(rule_tac
      x="[]"
      in exI)
  apply(clarsimp)
  apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qs,cons_l2 qs (edge_pop x ! 0)]@v1"
      in exI)
  apply(clarsimp)
  apply(rule_tac
      x="[cons_l3 (edge_trg x) (edge_push x ! 0) qsa,cons_l2 qsa (edge_pop x ! 0)]@v2"
      in exI)
  apply(clarsimp)
  apply(rule conjI)
   apply(rename_tac i v1 v2 x qs qsa)(*strict*)
   apply(simp add: cropTol3l2_single_def)
  apply(rename_tac i v1 v2 x qs qsa)(*strict*)
  apply(rule conjI)
   apply(rename_tac i v1 v2 x qs qsa)(*strict*)
   apply(subgoal_tac "v1=[]")
    apply(rename_tac i v1 v2 x qs qsa)(*strict*)
    prefer 2
    apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
   apply(rename_tac i v1 v2 x qs qsa)(*strict*)
   apply(clarsimp)
   apply(rename_tac i v2 x qs qsa)(*strict*)
   apply (metis proper_l3_l2_seqI2)
  apply(rename_tac i v1 v2 x qs qsa)(*strict*)
  apply(subgoal_tac "v2=[]")
   apply(rename_tac i v1 v2 x qs qsa)(*strict*)
   prefer 2
   apply (metis eq_Nil_appendI proper_l3_l2_seq_nol2_prime)
  apply(rename_tac i v1 v2 x qs qsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i v1 x qs qsa)(*strict*)
  apply (metis proper_l3_l2_seqI2)
  done

lemma compatible_prod_terminal_l2l2: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA (cons_l2   q A)]\<rparr> \<pi>1 \<lparr>cfg_conf=teB b#t1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA (cons_l2   q A)]\<rparr> \<pi>2 \<lparr>cfg_conf=teB b#t2\<rparr>
  \<Longrightarrow> d1 i = Some (pair e1 \<lparr>cfg_conf=teA A1#liftA w1\<rparr>)
  \<Longrightarrow> d2 i = Some (pair e2 \<lparr>cfg_conf=teA A2#liftA w2\<rparr>)
  \<Longrightarrow> \<exists>X1 X2 v1 v2.
  cfg_conf(the(get_configuration(d1 i))) = teA X1 # liftA v1
  \<and> cfg_conf(the(get_configuration(d2 i))) = teA X2 # liftA v2
  \<and> cropTol3l2_single X1 = cropTol3l2_single X2"
  apply(subgoal_tac "X" for X)
   prefer 2
   apply(rule_tac
      ?v1.0="[]"
      and ?v2.0="[]"
      and ?e1.0="e1"
      and ?c1.0="\<lparr>cfg_conf=teA A1#liftA w1\<rparr>"
      and ?e2.0="e2"
      and ?c2.0="\<lparr>cfg_conf=teA A2#liftA w2\<rparr>"
      and ?d1.0="d1"
      and n="i"
      and ?d2.0="d2"
      and G="G'"
      and G'="G"
      in cfgLM_positions_remain_compatible_prime)
                  apply(simp add: F2LR1inputx_def split_TSstructure_def)
                 apply(simp add: F2LR1inputx_def split_TSstructure_def)
                apply(simp add: F2LR1inputx_def split_TSstructure_def)
               apply(simp add: F2LR1inputx_def split_TSstructure_def)
              apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(simp add: cfgLM.trans_der_def)
            apply(simp add: cfgLM.trans_der_def)
           apply(simp add: cfgLM.trans_der_def)
          apply(simp add: cfgLM.trans_der_def)
         apply(simp add: cfgLM.trans_der_def)
        apply(simp add: cfgLM.trans_der_def)
       apply(simp add: cfgLM.trans_der_def)
      apply(simp add: cfgLM.trans_der_def)
     apply(force)
    apply(force)
   apply(force)
  apply(clarsimp)
  apply(simp add: get_configuration_def)
  apply(rule conjI)
   apply(force)
  apply(rule conjI)
   apply(force)
  apply(simp add: cropTol3l2_single_def equal_stack_def equal_front_state_def Let_def)
  apply(case_tac A1)
   apply(rename_tac qa ba)(*strict*)
   apply(case_tac A2)
    apply(rename_tac qa ba qaa baa)(*strict*)
    apply(clarsimp)
   apply(rename_tac qa ba q1 baa q2)(*strict*)
   apply(clarsimp)
  apply(rename_tac q1 ba q2)(*strict*)
  apply(case_tac A2)
   apply(rename_tac q1 ba q2 qa baa)(*strict*)
   apply(clarsimp)
  apply(rename_tac q1 ba q2 q1a baa q2a)(*strict*)
  apply(clarsimp)
  done

lemma compatible_derivation_from_lxlx_remain_compatible_for_generations: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA F1]\<rparr> \<pi>1 \<lparr>cfg_conf=X#liftA t1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA F2]\<rparr> \<pi>2 \<lparr>cfg_conf=X#liftA t2\<rparr>
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> length \<pi>1=length \<pi>2
  \<Longrightarrow> i < length \<pi>1
  \<Longrightarrow> d1 i = Some (pair e1 \<lparr>cfg_conf=teA A1#liftA w1\<rparr>)
  \<Longrightarrow> d2 i = Some (pair e2 \<lparr>cfg_conf=teA A2#liftA w2\<rparr>)
  \<Longrightarrow> ((\<exists>b. Some (teB b) = Some X) \<longrightarrow> (\<forall>ia<length \<pi>1. hd (cfg_conf (the (get_configuration (d1 ia)))) \<noteq> X))
  \<Longrightarrow> ((\<exists>b. Some (teB b) = Some X) \<longrightarrow> (\<forall>ia<length \<pi>2. hd (cfg_conf (the (get_configuration (d2 ia)))) \<noteq> X))
  \<Longrightarrow> ((\<exists>A. Some (teA A) = Some X) \<longrightarrow> (left_degen G d1))
  \<Longrightarrow> ((\<exists>A. Some (teA A) = Some X) \<longrightarrow> (left_degen G d2))
  \<Longrightarrow> cropTol3l2_single F1 = cropTol3l2_single F2
  \<Longrightarrow> notfinishingL \<pi>1
  \<Longrightarrow> notfinishingL \<pi>2
  \<Longrightarrow> cropTol3l2_single A1 = cropTol3l2_single A2"
  apply(case_tac F1)
   apply(rename_tac q b)(*strict*)
   apply(case_tac F2)
    apply(rename_tac q b qa ba)(*strict*)
    apply(case_tac X)
     apply(rename_tac q b qa ba a)(*strict*)
     apply(clarsimp)
     apply(subgoal_tac "q = qa \<and> b = ba")
      apply(rename_tac q b qa ba a)(*strict*)
      prefer 2
      apply(simp add: cropTol3l2_single_def)
     apply(rename_tac q b qa ba a)(*strict*)
     apply(subgoal_tac "X" for X)
      apply(rename_tac q b qa ba a)(*strict*)
      prefer 2
      apply(rule_tac
      i="i"
      and ?\<pi>1.0="\<pi>1"
      and ?\<pi>2.0="\<pi>2"
      and ?d1.0="d1"
      and ?d2.0="d2"
      in compatible_left_degen_l2l2)
               apply(rename_tac q b qa ba a)(*strict*)
               apply(force)
              apply(rename_tac q b qa ba a)(*strict*)
              apply(force)
             apply(rename_tac q b qa ba a)(*strict*)
             apply(force)
            apply(rename_tac q b qa ba a)(*strict*)
            apply(force)
           apply(rename_tac q b qa ba a)(*strict*)
           apply(force)
          apply(rename_tac q b qa ba a)(*strict*)
          apply(force)
         apply(rename_tac q b qa ba a)(*strict*)
         apply(force)
        apply(rename_tac q b qa ba a)(*strict*)
        apply(force)
       apply(rename_tac q b qa ba a)(*strict*)
       apply(force)
      apply(rename_tac q b qa ba a)(*strict*)
      apply(force)
     apply(rename_tac q b qa ba a)(*strict*)
     apply(clarsimp)
     apply(rename_tac qa ba a \<alpha> v1 v2)(*strict*)
     apply(simp add: get_configuration_def)
     apply(case_tac "\<alpha>")
      apply(rename_tac qa ba a \<alpha> v1 v2)(*strict*)
      prefer 2
      apply(rename_tac qa ba a \<alpha> v1 v2 aa list)(*strict*)
      apply(clarsimp)
     apply(rename_tac qa ba a \<alpha> v1 v2)(*strict*)
     apply(clarsimp)
     apply(rename_tac qa ba a v1 v2)(*strict*)
     apply(case_tac v1)
      apply(rename_tac qa ba a v1 v2)(*strict*)
      apply(clarsimp)
     apply(rename_tac qa ba a v1 v2 aa list)(*strict*)
     apply(clarsimp)
     apply(rename_tac qa ba a v2 list)(*strict*)
     apply(case_tac v2)
      apply(rename_tac qa ba a v2 list)(*strict*)
      apply(clarsimp)
     apply(rename_tac qa ba a v2 list aa lista)(*strict*)
     apply(clarsimp)
    apply(rename_tac q b qa ba bb)(*strict*)
    apply(subgoal_tac "q = qa \<and> b = ba")
     apply(rename_tac q b qa ba bb)(*strict*)
     prefer 2
     apply(simp add: cropTol3l2_single_def)
    apply(rename_tac q b qa ba bb)(*strict*)
    apply(subgoal_tac "X" for X)
     apply(rename_tac q b qa ba bb)(*strict*)
     prefer 2
     apply(rule_tac
      ?d1.0="d1"
      and ?d2.0="d2"
      in compatible_prod_terminal_l2l2)
          apply(rename_tac q b qa ba bb)(*strict*)
          apply(force)
         apply(rename_tac q b qa ba bb)(*strict*)
         apply(force)
        apply(rename_tac q b qa ba bb)(*strict*)
        apply(force)
       apply(rename_tac q b qa ba bb)(*strict*)
       apply(force)
      apply(rename_tac q b qa ba bb)(*strict*)
      apply(force)
     apply(rename_tac q b qa ba bb)(*strict*)
     apply(force)
    apply(rename_tac q b qa ba bb)(*strict*)
    apply(clarsimp)
    apply(rename_tac qa ba bb X1 v1 X2 v2)(*strict*)
    apply(simp add: get_configuration_def)
   apply(rename_tac q b q1 ba q2)(*strict*)
   apply(subgoal_tac "q = q1 \<and> b = ba")
    apply(rename_tac q b q1 ba q2)(*strict*)
    prefer 2
    apply(simp add: cropTol3l2_single_def)
   apply(rename_tac q b q1 ba q2)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac q b q1 ba q2)(*strict*)
    prefer 2
    apply(rule_tac
      n="i"
      and ?v1.0="[]"
      and ?v2.0="[]"
      and ?x1.0="[]"
      and ?x2.0="[]"
      and G="G"
      and G'="G'"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and ?w1.0="A1#w1"
      and ?w2.0="A2#w2"
      in cfgLM_positions_remain_compatible_l2l3)
               apply(rename_tac q b q1 ba q2)(*strict*)
               apply(simp add: F2LR1inputx_def split_TSstructure_def)
              apply(rename_tac q b q1 ba q2)(*strict*)
              apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(rename_tac q b q1 ba q2)(*strict*)
             apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
            apply(rename_tac q b q1 ba q2)(*strict*)
            apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
           apply(rename_tac q b q1 ba q2)(*strict*)
           apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
          apply(rename_tac q b q1 ba q2)(*strict*)
          apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
         apply(rename_tac q b q1 ba q2)(*strict*)
         apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
        apply(rename_tac q b q1 ba q2)(*strict*)
        apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
       apply(rename_tac q b q1 ba q2)(*strict*)
       apply(simp add: liftA_commutes_over_concat)
      apply(rename_tac q b q1 ba q2)(*strict*)
      apply(simp add: liftA_commutes_over_concat)
     apply(rename_tac q b q1 ba q2)(*strict*)
     apply(force)
    apply(rename_tac q b q1 ba q2)(*strict*)
    apply(force)
   apply(rename_tac q b q1 ba q2)(*strict*)
   apply(simp add: cropTol3l2_single_def equal_stacks_def equal_front_states_def equal_stack_def equal_front_state_def Let_def)
   apply(case_tac A1)
    apply(rename_tac q b q1 ba q2 qa bb)(*strict*)
    apply(case_tac A2)
     apply(rename_tac q b q1 ba q2 qa bb qb bc)(*strict*)
     apply(clarsimp)
     apply(rename_tac q1 ba q2 bb qb bc)(*strict*)
     apply(erule_tac
      x="0"
      in allE)+
     apply(clarsimp)
    apply(rename_tac q b q1 ba q2 qa bb q1a bc q2a)(*strict*)
    apply(clarsimp)
    apply(rename_tac q1 ba q2 bb q1a bc q2a)(*strict*)
    apply(erule_tac
      x="0"
      in allE)+
    apply(clarsimp)
   apply(rename_tac q b q1 ba q2 q1a bb q2a)(*strict*)
   apply(case_tac A2)
    apply(rename_tac q b q1 ba q2 q1a bb q2a qa bc)(*strict*)
    apply(clarsimp)
    apply(rename_tac q1 ba q2 bb q2a qa bc)(*strict*)
    apply(erule_tac
      x="0"
      in allE)+
    apply(clarsimp)
   apply(rename_tac q b q1 ba q2 q1a bb q2a q1b bc q2b)(*strict*)
   apply(clarsimp)
   apply(rename_tac q1 ba q2 bb q2a q1b bc q2b)(*strict*)
   apply(erule_tac
      x="0"
      in allE)+
   apply(clarsimp)
  apply(rename_tac q1 b q2)(*strict*)
  apply(case_tac F2)
   apply(rename_tac q1 b q2 q ba)(*strict*)
   apply(subgoal_tac "q = q1 \<and> b = ba")
    apply(rename_tac q1 b q2 q ba)(*strict*)
    prefer 2
    apply(simp add: cropTol3l2_single_def)
   apply(rename_tac q1 b q2 q ba)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac q1 b q2 q ba)(*strict*)
    prefer 2
    apply(rule_tac
      n="i"
      and ?v1.0="[]"
      and ?v2.0="[]"
      and ?x1.0="[]"
      and ?x2.0="[]"
      and G="G"
      and G'="G'"
      and ?d1.0="d2"
      and ?d2.0="d1"
      and ?w1.0="A2#w2"
      and ?w2.0="A1#w1"
      in cfgLM_positions_remain_compatible_l2l3)
               apply(rename_tac q1 b q2 q ba)(*strict*)
               apply(simp add: F2LR1inputx_def split_TSstructure_def)
              apply(rename_tac q1 b q2 q ba)(*strict*)
              apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(rename_tac q1 b q2 q ba)(*strict*)
             apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
            apply(rename_tac q1 b q2 q ba)(*strict*)
            apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
           apply(rename_tac q1 b q2 q ba)(*strict*)
           apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
          apply(rename_tac q1 b q2 q ba)(*strict*)
          apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
         apply(rename_tac q1 b q2 q ba)(*strict*)
         apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
        apply(rename_tac q1 b q2 q ba)(*strict*)
        apply(simp add: cfgLM.trans_der_def F2LR1inputx_def split_TSstructure_def)
       apply(rename_tac q1 b q2 q ba)(*strict*)
       apply(simp add: liftA_commutes_over_concat)
      apply(rename_tac q1 b q2 q ba)(*strict*)
      apply(simp add: liftA_commutes_over_concat)
     apply(rename_tac q1 b q2 q ba)(*strict*)
     apply(force)
    apply(rename_tac q1 b q2 q ba)(*strict*)
    apply(force)
   apply(rename_tac q1 b q2 q ba)(*strict*)
   apply(simp add: cropTol3l2_single_def equal_stacks_def equal_front_states_def equal_stack_def equal_front_state_def Let_def)
   apply(case_tac A1)
    apply(rename_tac q1 b q2 q ba qa bb)(*strict*)
    apply(case_tac A2)
     apply(rename_tac q1 b q2 q ba qa bb qb bc)(*strict*)
     apply(clarsimp)
     apply(rename_tac q1 q2 ba qa bb bc)(*strict*)
     apply(erule_tac
      x="0"
      in allE)+
     apply(clarsimp)
    apply(rename_tac q1 b q2 q ba qa bb q1a bc q2a)(*strict*)
    apply(clarsimp)
    apply(rename_tac q1 q2 ba qa bb bc q2a)(*strict*)
    apply(erule_tac
      x="0"
      in allE)+
    apply(clarsimp)
   apply(rename_tac q1 b q2 q ba q1a bb q2a)(*strict*)
   apply(case_tac A2)
    apply(rename_tac q1 b q2 q ba q1a bb q2a qa bc)(*strict*)
    apply(clarsimp)
    apply(rename_tac q1 q2 ba q1a bb q2a bc)(*strict*)
    apply(erule_tac
      x="0"
      in allE)+
    apply(clarsimp)
   apply(rename_tac q1 b q2 q ba q1a bb q2a q1b bc q2b)(*strict*)
   apply(clarsimp)
   apply(rename_tac q1 q2 ba q1a bb q2a bc q2b)(*strict*)
   apply(erule_tac
      x="0"
      in allE)+
   apply(clarsimp)
  apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
   prefer 2
   apply(rule_tac
      n="i"
      and ?v1.0="[]"
      and ?v2.0="[]"
      and ?x1.0="[]"
      and ?x2.0="[]"
      and G="G'"
      and G'="G"
      and ?d1.0="d1"
      and ?d2.0="d2"
      and ?w1.0="A1#w1"
      and ?w2.0="A2#w2"
      in cfgLM_positions_remain_compatible_l3l3)
                 apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
                 apply(simp add: F2LR1inputx_def split_TSstructure_def)
                apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
                apply(simp add: F2LR1inputx_def split_TSstructure_def)
               apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
               apply(simp add: F2LR1inputx_def split_TSstructure_def)
              apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
              apply(simp add: F2LR1inputx_def split_TSstructure_def)
             apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
             apply(simp add: F2LR1inputx_def split_TSstructure_def)
            apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
            apply(simp add: F2LR1inputx_def split_TSstructure_def)
           apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
           apply(simp add: cfgLM.trans_der_def)
          apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
          apply(simp add: cfgLM.trans_der_def)
         apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
         apply(simp add: cfgLM.trans_der_def)
        apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
        apply(simp add: cfgLM.trans_der_def)
       apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
       apply(simp add: cfgLM.trans_der_def)
      apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
      apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
     apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
     apply(simp add: cfgLM.trans_der_def cropTol3l2_single_def)
    apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
    apply(clarsimp)
    apply(force)
   apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
   apply(force)
  apply(rename_tac q1 b q2 q1a ba q2a)(*strict*)
  apply(clarsimp)
  apply(simp add: cropTol3l2_single_def equal_stacks_def equal_front_states_def equal_stack_def equal_front_state_def Let_def)
  apply(case_tac A1)
   apply(rename_tac q1 b q2 q1a ba q2a q bb)(*strict*)
   apply(case_tac A2)
    apply(rename_tac q1 b q2 q1a ba q2a q bb qa bc)(*strict*)
    apply(clarsimp)
    apply(rename_tac q2 q1a ba q2a bb qa bc)(*strict*)
    apply(erule_tac
      x="0"
      in allE)+
    apply(clarsimp)
   apply(rename_tac q1 b q2 q1a ba q2a q bb q1b bc q2b)(*strict*)
   apply(clarsimp)
   apply(rename_tac q2 q1a ba q2a bb q1b bc q2b)(*strict*)
   apply(erule_tac
      x="0"
      in allE)+
   apply(clarsimp)
  apply(rename_tac q1 b q2 q1a ba q2a q1b bb q2b)(*strict*)
  apply(case_tac A2)
   apply(rename_tac q1 b q2 q1a ba q2a q1b bb q2b q bc)(*strict*)
   apply(clarsimp)
   apply(rename_tac q2 q1a ba q2a bb q2b q bc)(*strict*)
   apply(erule_tac
      x="0"
      in allE)+
   apply(clarsimp)
  apply(rename_tac q1 b q2 q1a ba q2a q1b bb q2b q1c bc q2c)(*strict*)
  apply(clarsimp)
  apply(rename_tac q2 q1a ba q2a bb q2b q1c bc q2c)(*strict*)
  apply(erule_tac
      x="0"
      in allE)+
  apply(clarsimp)
  done

lemma prod_to_edge_eq_implies_same_terminal_production: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf = [teA A1]\<rparr> \<pi>1 \<lparr>cfg_conf = liftB \<alpha>1 @ liftA v1\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA A2]\<rparr> \<pi>2 \<lparr>cfg_conf = liftB \<alpha>2 @ liftA v2\<rparr>
  \<Longrightarrow> cropTol3l2_single A1 = cropTol3l2_single A2
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> notfinishingL \<pi>1
  \<Longrightarrow> notfinishingL \<pi>2
  \<Longrightarrow> \<alpha>1 = \<alpha>2"
  apply(induct \<pi>1 arbitrary: \<pi>2 \<alpha>1 \<alpha>2 v1 v2 rule: rev_induct)
   apply(rename_tac \<pi>2 \<alpha>1 \<alpha>2 v1 v2)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<alpha>1 \<alpha>2 v1 v2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(case_tac \<alpha>1)
    apply(rename_tac \<alpha>1 \<alpha>2 v1 v2)(*strict*)
    prefer 2
    apply(rename_tac \<alpha>1 \<alpha>2 v1 v2 a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<alpha>1 \<alpha>2 v1 v2)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<alpha>2 v1 v2)(*strict*)
   apply(case_tac \<alpha>2)
    apply(rename_tac \<alpha>2 v1 v2)(*strict*)
    prefer 2
    apply(rename_tac \<alpha>2 v1 v2 a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<alpha>2 v1 v2)(*strict*)
   apply(clarsimp)
  apply(rename_tac x xs \<pi>2 \<alpha>1 \<alpha>2 v1 v2)(*strict*)
  apply(clarsimp)
  apply(rule_tac
      xs="\<pi>2"
      in rev_cases)
   apply(rename_tac x xs \<pi>2 \<alpha>1 \<alpha>2 v1 v2)(*strict*)
   apply(clarsimp)
  apply(rename_tac x xs \<pi>2 \<alpha>1 \<alpha>2 v1 v2 ys y)(*strict*)
  apply(clarsimp)
  apply(rename_tac x xs \<alpha>1 \<alpha>2 v1 v2 ys y)(*strict*)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d1"
      and i="length \<pi>1"
      and kleene_starT="False"
      and END="True"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2)(*strict*)
    apply(force)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2)(*strict*)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d2"
      and i="length \<pi>2"
      and kleene_starT="False"
      and END="True"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci)(*strict*)
    apply(force)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci)(*strict*)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia)(*strict*)
  apply(erule_tac
      x="d1"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA A1]\<rparr>"
      in allE)
  apply(erule_tac
      x="\<pi>1"
      in allE)
  apply(erule_tac
      x="ci"
      in allE)
  apply(erule impE)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc 0"
      and v="[Some p1]"
      in get_labels_drop_tail)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia)(*strict*)
    apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia)(*strict*)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia)(*strict*)
  apply(erule impE)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2)(*strict*)
  apply(erule_tac
      x="d2"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA A2]\<rparr>"
      in allE)
  apply(erule_tac
      x="\<pi>2"
      in allE)
  apply(erule_tac
      x="cia"
      in allE)
  apply(erule impE)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(rule_tac
      m="Suc 0"
      and v="[Some p2]"
      in get_labels_drop_tail)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2)(*strict*)
    apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2)(*strict*)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2)(*strict*)
  apply(erule impE)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2 w1a w2a)(*strict*)
  apply(case_tac ci)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2 w1a w2a cfg_confa)(*strict*)
  apply(case_tac cia)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ci ea cia w1 w2 w1a w2a cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
  apply(erule_tac
      x="\<pi>2"
      in meta_allE)
  apply(erule_tac
      x="w1"
      in meta_allE)
  apply(erule_tac
      x="w1a"
      in meta_allE)
  apply(erule_tac
      x="w2"
      in meta_allE)
  apply(erule_tac
      x="w2a"
      in meta_allE)
  apply(clarsimp)
  apply(erule meta_impE)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
   apply(rule_tac
      n="length \<pi>1"
      and d="d1"
      in cfgLM.trans_der_crop)
       apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
      apply(force)
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
     apply(force)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
    apply(force)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
   apply(rule_tac
      n="length \<pi>2"
      and d="d2"
      in cfgLM.trans_der_crop)
       apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
       apply(simp add: split_TSstructure_def)
      apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
      apply(force)
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
     apply(force)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
    apply(force)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
   apply(rule notfinishingL_take)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
   apply(rule notfinishingL_take)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1 w2 w1a w2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w2 w1a w2a)(*strict*)
  apply(case_tac w2)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w2 w1a w2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1a w2a)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1a w2a l r la ra)(*strict*)
   apply(rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w2 w1a w2a a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1a w2a a list)(*strict*)
  apply(case_tac w2a)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1a w2a a list)(*strict*)
   apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1a a list)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1a a list l r la ra)(*strict*)
   apply(rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1a w2a a list aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e ea w1a a list aa lista)(*strict*)
  apply(rename_tac e1 e2 \<beta> B1 y1 B2 y2)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
  apply(thin_tac "cfgLM.trans_der G d1 \<lparr>cfg_conf = [teA A1]\<rparr> (\<pi>1 @ [p1]) \<lparr>cfg_conf = liftB \<alpha>1 @ liftA v1\<rparr>")
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
  apply(thin_tac "map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2")
  apply(thin_tac "cropTol3l2_single A1 = cropTol3l2_single A2")
  apply(thin_tac "cfgLM.trans_der G d2 \<lparr>cfg_conf = [teA A2]\<rparr> (\<pi>2 @ [p2]) \<lparr>cfg_conf = liftB \<alpha>2 @ liftA v2\<rparr>")
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
  apply(thin_tac "d1 (length \<pi>1) = Some (pair e1 \<lparr>cfg_conf = liftB \<beta> @ teA B1 # liftA y1\<rparr>)")
  apply(thin_tac "d1 (Suc (length \<pi>1)) = Some (pair (Some p1) \<lparr>cfg_conf = liftB \<alpha>1 @ liftA v1\<rparr>)")
  apply(thin_tac "d2 (length \<pi>2) = Some (pair e2 \<lparr>cfg_conf = liftB \<beta> @ teA B2 # liftA y2\<rparr>)")
  apply(thin_tac "d2 (Suc (length \<pi>2)) = Some (pair (Some p2) \<lparr>cfg_conf = liftB \<alpha>2 @ liftA v2\<rparr>)")
  apply(subgoal_tac "X" for X)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
   prefer 2
   apply(rule_tac
      ?p1.0="p1"
      and ?p2.0="p2"
      in nonfinal_prod_to_edge_to_special_production_set)
         apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
         apply(force)
        apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
        apply(force)
       apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
       apply(simp add: cfgLM_step_relation_def)
      apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
      apply(simp add: cfgLM_step_relation_def)
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
     apply(force)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
    apply(simp add: notfinishingL_def notfinishing_def)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2)(*strict*)
    apply(clarsimp)
    apply(erule_tac
      x="length \<pi>1"
      in allE)+
    apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
   apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2)(*strict*)
   apply(simp add: notfinishingL_def notfinishing_def)
   apply(erule_tac
      x="length \<pi>2"
      in allE)+
   apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 e1 e2 \<beta> B1 y1 B2 y2)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 l r la ra)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 l r la ra)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 r la ra l')(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = la")
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 r la ra l')(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB la"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 r la ra l')(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 r ra l' l'a)(*strict*)
  apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
  apply(subgoal_tac "\<beta>=l'a")
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 r ra l' l'a)(*strict*)
   prefer 2
   apply (metis liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_front)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 r ra l' l'a)(*strict*)
  apply(subgoal_tac "\<beta>=l'")
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 r ra l' l'a)(*strict*)
   prefer 2
   apply (metis liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_front)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 \<beta> B1 y1 B2 y2 r ra l' l'a)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a)(*strict*)
  apply(thin_tac "prod_to_edge G' p1 = prod_to_edge G' p2")
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a)(*strict*)
  apply(erule disjE)+
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a)(*strict*)
   apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
    apply(clarsimp)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x y)(*strict*)
    apply(erule disjE)+
      apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x y)(*strict*)
      apply(simp add: prod_sets)
      apply(clarsimp)
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt qta)(*strict*)
      apply(subgoal_tac "\<alpha>1=l'a@[y]")
       apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt qta)(*strict*)
       prefer 2
       apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt qta)(*strict*)
      apply(subgoal_tac "\<alpha>2=l'a@[y]")
       apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt qta)(*strict*)
       prefer 2
       apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt qta)(*strict*)
      apply(clarsimp)
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x y)(*strict*)
     apply(simp add: prod_sets)
     apply(clarsimp)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt)(*strict*)
     apply(subgoal_tac "\<alpha>1=l'a@[y]")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt)(*strict*)
     apply(subgoal_tac "\<alpha>2=l'a@[y]")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt)(*strict*)
     apply(clarsimp)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x y)(*strict*)
    apply(erule disjE)+
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x y)(*strict*)
     apply(simp add: prod_sets)
     apply(clarsimp)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt)(*strict*)
     apply(subgoal_tac "\<alpha>1=l'a@[y]")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt)(*strict*)
     apply(subgoal_tac "\<alpha>2=l'a@[y]")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y qt)(*strict*)
     apply(clarsimp)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x y)(*strict*)
    apply(simp add: prod_sets)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y)(*strict*)
    apply(subgoal_tac "\<alpha>1=l'a@[y]")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y)(*strict*)
    apply(subgoal_tac "\<alpha>2=l'a@[y]")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x y)(*strict*)
    apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
    apply(simp add: prod_sets)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x)(*strict*)
    apply(subgoal_tac "\<alpha>1=l'a")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x)(*strict*)
    apply(subgoal_tac "\<alpha>2=l'a")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x)(*strict*)
    apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
   apply(simp add: prod_sets)
   apply(clarsimp)
   apply(erule disjE)+
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt qta)(*strict*)
     apply(subgoal_tac "\<alpha>1=l'a")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt qta)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt qta)(*strict*)
     apply(subgoal_tac "\<alpha>2=l'a")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt qta)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt qta)(*strict*)
     apply(clarsimp)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
    apply(erule disjE)+
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qt)(*strict*)
     apply(subgoal_tac "\<alpha>1=l'a")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qt)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qt)(*strict*)
     apply(subgoal_tac "\<alpha>2=l'a")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qt)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qt)(*strict*)
     apply(clarsimp)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt)(*strict*)
    apply(subgoal_tac "\<alpha>1=l'a")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt)(*strict*)
    apply(subgoal_tac "\<alpha>2=l'a")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt)(*strict*)
    apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
   apply(erule disjE)+
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qt)(*strict*)
     apply(subgoal_tac "\<alpha>1=l'a")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qt)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qt)(*strict*)
     apply(subgoal_tac "\<alpha>2=l'a")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qt)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qt)(*strict*)
     apply(clarsimp)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt)(*strict*)
    apply(subgoal_tac "\<alpha>1=l'a")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt)(*strict*)
    apply(subgoal_tac "\<alpha>2=l'a")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa qt)(*strict*)
    apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
   apply(erule disjE)+
     apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x)(*strict*)
     apply(subgoal_tac "\<alpha>1=l'a")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x)(*strict*)
     apply(subgoal_tac "\<alpha>2=l'a")
      apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x)(*strict*)
      prefer 2
      apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x)(*strict*)
     apply(clarsimp)
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs)(*strict*)
    apply(subgoal_tac "\<alpha>1=l'a")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs)(*strict*)
    apply(subgoal_tac "\<alpha>2=l'a")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs)(*strict*)
    apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs)(*strict*)
    apply(subgoal_tac "\<alpha>1=l'a")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs)(*strict*)
    apply(subgoal_tac "\<alpha>2=l'a")
     apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs)(*strict*)
     prefer 2
     apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs)(*strict*)
    apply(clarsimp)
   apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a x)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa)(*strict*)
   apply(subgoal_tac "\<alpha>1=l'a")
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa)(*strict*)
    prefer 2
    apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
   apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa)(*strict*)
   apply(subgoal_tac "\<alpha>2=l'a")
    apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa)(*strict*)
    prefer 2
    apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
   apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a x qs qsa)(*strict*)
   apply(clarsimp)
  apply(rename_tac p1 \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 p2 y1 y2 l'a)(*strict*)
  apply(simp add: prod_sets)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a i ia A Aa)(*strict*)
  apply(subgoal_tac "\<alpha>1=l'a")
   apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a i ia A Aa)(*strict*)
   prefer 2
   apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
  apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a i ia A Aa)(*strict*)
  apply(subgoal_tac "\<alpha>2=l'a")
   apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a i ia A Aa)(*strict*)
   prefer 2
   apply (metis ConsApp liftA.simps(2) append_Nil2 maximalPrefixB_liftA maximalPrefixB_drop_liftB maximalPrefixB_drop_teB)
  apply(rename_tac \<pi>1 \<alpha>1 \<alpha>2 v1 v2 \<pi>2 y1 y2 l'a i ia A Aa)(*strict*)
  apply(clarsimp)
  done

lemma prod_to_edge_eq_implies_same_terminal_production2: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA A1]\<rparr> \<pi>1 c1
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA A2]\<rparr> \<pi>2 c2
  \<Longrightarrow> notfinishingL \<pi>1
  \<Longrightarrow> notfinishingL \<pi>2
  \<Longrightarrow> cropTol3l2_single A1 = cropTol3l2_single A2
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> \<exists>\<alpha> v1 v2.
  cfg_conf c1 = liftB \<alpha> @ liftA v1
  \<and> cfg_conf c2 = liftB \<alpha> @ liftA v2"
  apply(case_tac c1)
  apply(rename_tac cfg_confa)(*strict*)
  apply(clarsimp)
  apply(case_tac c2)
  apply(rename_tac cfg_confa cfg_confaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac cfg_conf cfg_confa)(*strict*)
  apply(rename_tac x1 x2)
  apply(rename_tac x1 x2)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac x1 x2)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac x1 x2)(*strict*)
  apply(erule_tac
      x="d1"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA A1]\<rparr>"
      in allE)
  apply(erule_tac
      x="\<pi>1"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf=x1\<rparr>"
      in allE)
  apply(erule impE)
   apply(rename_tac x1 x2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
  apply(rename_tac x1 x2)(*strict*)
  apply(erule impE)
   apply(rename_tac x1 x2)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(force)
  apply(rename_tac x1 x2)(*strict*)
  apply(clarsimp)
  apply(rename_tac x2 w1 w2)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac x2 w1 w2)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac x2 w1 w2)(*strict*)
  apply(erule_tac
      x="d2"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA A2]\<rparr>"
      in allE)
  apply(erule_tac
      x="\<pi>2"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf=x2\<rparr>"
      in allE)
  apply(erule impE)
   apply(rename_tac x2 w1 w2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
  apply(rename_tac x2 w1 w2)(*strict*)
  apply(erule impE)
   apply(rename_tac x2 w1 w2)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(clarsimp)
   apply(rule_tac
      x="[X]" for X
      in exI)
   apply(clarsimp)
   apply(force)
  apply(rename_tac x2 w1 w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac w1 w2 w1a w2a)(*strict*)
  apply(subgoal_tac "w1=w1a")
   apply(rename_tac w1 w2 w1a w2a)(*strict*)
   apply(clarsimp)
   apply(rename_tac w2 w1a w2a)(*strict*)
   apply(rule_tac
      x="w1a"
      in exI)
   apply(clarsimp)
   apply(rule conjI)
    apply(rename_tac w2 w1a w2a)(*strict*)
    apply(force)
   apply(rename_tac w2 w1a w2a)(*strict*)
   apply(force)
  apply(rename_tac w1 w2 w1a w2a)(*strict*)
  apply(rename_tac \<alpha>1 v1 \<alpha>2 v2)
  apply(rename_tac \<alpha>1 v1 \<alpha>2 v2)(*strict*)
  apply(rule prod_to_edge_eq_implies_same_terminal_production)
         apply(rename_tac \<alpha>1 v1 \<alpha>2 v2)(*strict*)
         apply(force)+
  done

lemma cropTol3l2_single_equal_of_compatible_derivations: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA A1]\<rparr> \<pi>1 c1
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA A2]\<rparr> \<pi>2 c2
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> notfinishingL \<pi>1
  \<Longrightarrow> notfinishingL \<pi>2
  \<Longrightarrow> \<pi>1 \<noteq> []
  \<Longrightarrow> cropTol3l2_single A1 = cropTol3l2_single A2"
  apply(case_tac \<pi>1)
   apply(clarsimp)
  apply(rename_tac a list)(*strict*)
  apply(case_tac \<pi>2)
   apply(rename_tac a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac a list aa lista)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac p1 \<pi>1 p2 \<pi>2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d1"
      and i="0"
      and kleene_starT="True"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac p1 \<pi>1 p2 \<pi>2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac p1 \<pi>1 p2 \<pi>2)(*strict*)
    apply(force)
   apply(rename_tac p1 \<pi>1 p2 \<pi>2)(*strict*)
   apply(force)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d2"
      and i="0"
      and kleene_starT="True"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
    apply(force)
   apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
   apply(force)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci')(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
   prefer 2
   apply(rule_tac
      ?p1.0="p1"
      and ?p2.0="p2"
      in nonfinal_prod_to_edge_to_special_production_set)
         apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
         apply(force)
        apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
        apply(force)
       apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
       apply(simp add: cfgLM_step_relation_def)
      apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
      apply(simp add: cfgLM_step_relation_def)
     apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
     apply(force)
    apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
    apply(simp add: notfinishingL_def notfinishing_def)
    apply(erule_tac
      x="0"
      in allE)+
    apply(clarsimp)
   apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
   apply(simp add: notfinishingL_def notfinishing_def)
   apply(erule_tac
      x="0"
      in allE)+
   apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra)(*strict*)
  apply(case_tac l)
   apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra)(*strict*)
   prefer 2
   apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a l r la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra)(*strict*)
  apply(case_tac la)
   apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra)(*strict*)
   prefer 2
   apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a la ra)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a)(*strict*)
  apply(case_tac ci'a)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea ci'a cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea)(*strict*)
  apply(case_tac ci')
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ci' ea cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ea)(*strict*)
  apply(case_tac p1)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ea prod_lhsa prod_rhsa)(*strict*)
  apply(case_tac p2)
  apply(rename_tac p1 \<pi>1 p2 \<pi>2 e ea prod_lhsa prod_rhsa prod_lhsaa prod_rhsaa)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa)(*strict*)
  apply(erule disjE)+
   apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x y)(*strict*)
    apply(simp add: prod_sets)
    apply(erule disjE)+
      apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x y)(*strict*)
      apply(clarsimp)
      apply(rename_tac \<pi>1 \<pi>2 e ea x y qt qta)(*strict*)
      apply(simp add: cropTol3l2_single_def)
     apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x y)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<pi>1 \<pi>2 e ea x y qt)(*strict*)
     apply(simp add: cropTol3l2_single_def)
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x y)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhsa prod_rhsa x y)(*strict*)
    apply(erule disjE)+
     apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhsa prod_rhsa x y)(*strict*)
     apply(clarsimp)
     apply(rename_tac \<pi>1 \<pi>2 e ea x y qt)(*strict*)
     apply(simp add: cropTol3l2_single_def)
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhsa prod_rhsa x y)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
   apply(simp add: cropTol3l2_single_def)
   apply(simp add: prod_sets)
   apply(erule disjE)+
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
   apply(clarsimp)
   apply(erule disjE)+
     apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhsa prod_rhsa x qs qt)(*strict*)
    apply(erule disjE)+
     apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhsa prod_rhsa x qs qt)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhsa prod_rhsa x qs qt)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
   apply(erule disjE)+
     apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
   apply(erule disjE)+
     apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
     apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
   apply(erule disjE)+
    apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
    apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa x)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e ea prod_lhs prod_rhs prod_lhsa prod_rhsa)(*strict*)
  apply(simp add: prod_sets)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e ea i ia A Aa)(*strict*)
  apply(subgoal_tac "False")
   apply(rename_tac \<pi>1 \<pi>2 e ea i ia A Aa)(*strict*)
   apply(force)
  apply(rename_tac \<pi>1 \<pi>2 e ea i ia A Aa)(*strict*)
  apply(simp add: notfinishingL_def notfinishing_def)
  apply(erule_tac
      x="0"
      in allE)+
  apply(clarsimp)
  apply(simp add: isl3_def)
  done

lemma compatible_derivation_reach_empty_configuration_synchronously_ext: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d1 \<lparr>cfg_conf=[teA A1]\<rparr> \<pi>1 \<lparr>cfg_conf=liftB \<alpha>\<rparr>
  \<Longrightarrow> cfgLM.trans_der G d2 \<lparr>cfg_conf=[teA A2]\<rparr> \<pi>2 \<lparr>cfg_conf=liftB \<alpha>@liftA v\<rparr>
  \<Longrightarrow> map (prod_to_edge G') \<pi>1 = map (prod_to_edge G') \<pi>2
  \<Longrightarrow> notfinishingL \<pi>1
  \<Longrightarrow> notfinishingL \<pi>2
  \<Longrightarrow> v=[]"
  apply(subgoal_tac "cropTol3l2_single A1 = cropTol3l2_single A2")
   prefer 2
   apply(rule cropTol3l2_single_equal_of_compatible_derivations)
          apply(force)
         apply(force)
        apply(force)
       apply(force)
      apply(force)
     apply(force)
    apply(force)
   apply(case_tac \<pi>1)
    apply(clarsimp)
    apply(simp add: cfgLM.trans_der_def)
    apply(clarsimp)
    apply(case_tac \<alpha>)
     apply(clarsimp)
    apply(rename_tac a list)(*strict*)
    apply(clarsimp)
   apply(rename_tac a list)(*strict*)
   apply(clarsimp)
  apply(rule_tac
      xs="\<pi>1"
      in rev_cases)
   apply(clarsimp)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(case_tac \<alpha>)
    apply(clarsimp)
   apply(rename_tac a list)(*strict*)
   apply(clarsimp)
  apply(rename_tac ys y)(*strict*)
  apply(clarsimp)
  apply(rule_tac
      xs="\<pi>2"
      in rev_cases)
   apply(rename_tac ys y)(*strict*)
   apply(clarsimp)
  apply(rename_tac ys y ysa ya)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d1"
      and i="length \<pi>1"
      and kleene_starT="False"
      and END="True"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac \<pi>1 p1 \<pi>2 p2)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2)(*strict*)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci)(*strict*)
  apply(subgoal_tac "LR1ProdFormSimp G")
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci)(*strict*)
  apply(simp add: LR1ProdFormSimp_def)
  apply(erule_tac
      x="p1"
      in ballE)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci)(*strict*)
   prefer 2
   apply(simp add: cfgLM_step_relation_def)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci)(*strict*)
  apply(erule disjE)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci)(*strict*)
   prefer 2
   apply(clarsimp)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci b A B)(*strict*)
   apply(erule disjE)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci b A B)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ci b A B)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ci b A B l r)(*strict*)
    apply(rule liftB_with_nonterminal_inside)
    apply(case_tac ci)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ci b A B l r cfg_confa)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e b A B l r)(*strict*)
    apply(rule_tac
      ?w1.0="l@[teB b]"
      in liftB_with_nonterminal_inside)
    apply(force)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci b A B)(*strict*)
   apply(erule disjE)
    apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci b A B)(*strict*)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ci A B)(*strict*)
    apply(simp add: cfgLM_step_relation_def)
    apply(clarsimp)
    apply(rename_tac \<pi>1 \<pi>2 p2 e ci A B l r)(*strict*)
    apply(rule liftB_with_nonterminal_inside)
    apply(force)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci b A B)(*strict*)
   apply(simp add: cfgLM_step_relation_def)
   apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci A B)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 p2 e ci A B C l r)(*strict*)
   apply(rule liftB_with_nonterminal_inside)
   apply(force)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci)(*strict*)
  apply(case_tac p1)
  apply(rename_tac \<pi>1 p1 \<pi>2 p2 e ci prod_lhs prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e ci prod_lhs)(*strict*)
  apply(rename_tac X1)
  apply(rename_tac \<pi>1 \<pi>2 p2 e ci X1)(*strict*)
  apply(case_tac X1)
   apply(rename_tac \<pi>1 \<pi>2 p2 e ci X1 q b)(*strict*)
   apply(simp add: notfinishing_def notfinishingL_def)
   apply(erule_tac
      x="length \<pi>1"
      in allE)+
   apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 p2 e ci q b)(*strict*)
   apply(simp add: isl3_def)
  apply(rename_tac \<pi>1 \<pi>2 p2 e ci X1 q1 b q2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e ci q1 b q2)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e ci q1 b q2 l r)(*strict*)
  apply(case_tac ci)
  apply(rename_tac \<pi>1 \<pi>2 p2 e ci q1 b q2 l r cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l r)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l r)(*strict*)
   prefer 2
   apply(rule liftB_append)
   apply(rule sym)
   apply(force)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2)(*strict*)
  apply(erule_tac
      x="d1"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA A1]\<rparr>"
      in allE)
  apply(erule_tac
      x="\<pi>1"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = liftB l1 @ teA (cons_l3   q1 b q2) # liftB l2\<rparr>"
      in allE)
  apply(clarsimp)
  apply(erule impE)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2 ea)(*strict*)
   apply(rule_tac
      m="Suc 0 "
      and v="[Some \<lparr>prod_lhs = cons_l3 q1 b q2, prod_rhs = []\<rparr>]"
      in get_labels_drop_tail)
    apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2 ea)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2 ea)(*strict*)
   apply(force)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2)(*strict*)
  apply(erule impE)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(rule_tac
      x="[A1]"
      in exI)
   apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2 w1 w2)(*strict*)
  apply(subgoal_tac "l1=w1")
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2 w1 w2)(*strict*)
   prefer 2
   apply (metis append_Nil2 maxTermPrefix_liftA maxTermPrefix_mixed_string maxTermPrefix_shift)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l1 l2 w1 w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l2 w1 w2)(*strict*)
  apply(case_tac w2)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l2 w1 w2)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l2 w1 w2 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l2 w1 list)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l2 w1 list)(*strict*)
   prefer 2
   apply(rule liftB_eq_liftA_empty)
   apply(force)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 l2 w1 list)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1)(*strict*)
  apply(thin_tac "setA (liftB w1) = {}")
  apply(case_tac A1)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "X" for X)
    apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
    prefer 2
    apply(rule_tac
      ?w2.0="w1"
      and ?v1.0="[cons_l2 q ba]"
      and G="G"
      and G'="G'"
      and d="d1"
      and \<pi>="\<pi>1"
      and ?w1.0="[]"
      and ?v2.0="[cons_l3 q1 b q2]"
      in F_SDPDA_TO_CFG_STD__l3_l2_separation_ALT_preserved)
       apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
       apply(force)
      apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
      apply(force)
     apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
     apply(rule_tac
      n="length \<pi>1"
      and d="d1"
      in cfgLM.trans_der_crop)
         apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
         apply(simp add: split_TSstructure_def)
        apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
        apply(force)
       apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
       apply(force)
      apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
      apply(force)
     apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
    apply(simp add: l3_l2_separation_ALT_def)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q ba)(*strict*)
   apply(simp add: l3_l2_separation_ALT_def)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q1 b q2 w1 q1a ba q2a)(*strict*)
  apply(clarsimp)
  apply(rename_tac q11' X11' q12' w1 q11 X11 q12)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d2"
      and i="length \<pi>2"
      and kleene_starT="False"
      and END="True"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12)(*strict*)
   apply(force)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci)(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci)(*strict*)
   prefer 2
   apply(rule_tac
      ?p1.0="\<lparr>prod_lhs = cons_l3 q11' X11' q12', prod_rhs = []\<rparr>"
      and ?p2.0="p2"
      in nonfinal_prod_to_edge_to_special_production_set)
         apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci)(*strict*)
         apply(force)
        apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci)(*strict*)
        apply(force)
       apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci)(*strict*)
       apply(force)
      apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci)(*strict*)
      apply(simp add: cfgLM_step_relation_def)
     apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci)(*strict*)
    apply(simp add: notfinishingL_def notfinishing_def isl3_def)
   apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci)(*strict*)
   apply(clarsimp)
   apply(simp add: notfinishingL_def notfinishing_def)
   apply(erule_tac
      x="length \<pi>2"
      in allE)+
   apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci l r)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci l r)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (rule liftBDeConv2)
   apply (metis setA_liftB_substring liftB_commutes_over_concat)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci r l')(*strict*)
  apply(case_tac ci)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea ci r l' cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea r l')(*strict*)
  apply(thin_tac "setA (liftB l') = {}")
  apply(case_tac p2)
  apply(rename_tac \<pi>1 \<pi>2 p2 e q11' X11' q12' w1 q11 X11 q12 ea r l' prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e q11' X11' q12' w1 q11 X11 q12 ea r l' prod_lhs prod_rhs)(*strict*)
  apply(rename_tac X2 r2)
  apply(rename_tac \<pi>1 \<pi>2 e q11' X11' q12' w1 q11 X11 q12 ea r l' X2 r2)(*strict*)
  apply(erule disjE)
   apply(rename_tac \<pi>1 \<pi>2 e q11' X11' q12' w1 q11 X11 q12 ea r l' X2 r2)(*strict*)
   prefer 2
   apply(clarsimp)
   apply(simp add: prod_sets)
  apply(rename_tac \<pi>1 \<pi>2 e q11' X11' q12' w1 q11 X11 q12 ea r l' X2 r2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e q11' X11' q12' w1 q11 X11 q12 ea r l' X2 r2 x)(*strict*)
  apply(erule disjE)
   apply(rename_tac \<pi>1 \<pi>2 e q11' X11' q12' w1 q11 X11 q12 ea r l' X2 r2 x)(*strict*)
   apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 e q11' X11' q12' w1 q11 X11 q12 ea r l' X2 r2 x y)(*strict*)
   apply(simp add: prod_sets)
  apply(rename_tac \<pi>1 \<pi>2 e q11' X11' q12' w1 q11 X11 q12 ea r l' X2 r2 x)(*strict*)
  apply(erule disjE)
   apply(rename_tac \<pi>1 \<pi>2 e q11' X11' q12' w1 q11 X11 q12 ea r l' X2 r2 x)(*strict*)
   prefer 2
   apply(clarsimp)
   apply(simp add: prod_sets)
  apply(rename_tac \<pi>1 \<pi>2 e q11' X11' q12' w1 q11 X11 q12 ea r l' X2 r2 x)(*strict*)
  apply(simp add: prod_sets)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' x)(*strict*)
  apply(case_tac x)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' x edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' edge_src edge_pop edge_trg)(*strict*)
  apply(rename_tac qs X qt)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt)(*strict*)
  apply(subgoal_tac "(\<forall>d c \<pi> c'. cfgLM.trans_der G d c \<pi> c' \<longrightarrow> (\<exists>w1 w2. cfg_conf c = liftB w1 @ liftA w2) \<longrightarrow> (\<exists>w1 w2. cfg_conf c' = liftB w1 @ liftA w2))")
   apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt)(*strict*)
   prefer 2
   apply(simp add: split_TSstructure_def CFGtermLeft_def)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt)(*strict*)
  apply(erule_tac
      x="d2"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = [teA A2]\<rparr>"
      in allE)
  apply(erule_tac
      x="\<pi>2"
      in allE)
  apply(erule_tac
      x="\<lparr>cfg_conf = liftB l' @ teA (cons_l3   qs (X ! 0) qt) # r\<rparr>"
      in allE)
  apply(clarsimp)
  apply(erule impE)
   apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt)(*strict*)
   apply(simp add: cfgLM.trans_der_def)
   apply(clarsimp)
   apply(rule_tac
      m="Suc 0 "
      and v="[Some \<lparr>prod_lhs = cons_l3 qs (X ! 0) qt, prod_rhs = []\<rparr>]"
      in get_labels_drop_tail)
    apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt)(*strict*)
   apply(force)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt)(*strict*)
  apply(erule impE)
   apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt)(*strict*)
   apply(rule_tac
      x="[]"
      in exI)
   apply(rule_tac
      x="[A2]"
      in exI)
   apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt w1a w2)(*strict*)
  apply(subgoal_tac "l'=w1a")
   apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt w1a w2)(*strict*)
   prefer 2
   apply (metis initial_liftB_strings_coincide)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r l' qs X qt w1a w2)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r qs X qt w1a w2)(*strict*)
  apply(case_tac w2)
   apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r qs X qt w1a w2)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea r qs X qt w1a w2 a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea qs X qt w1a list)(*strict*)
  apply(subgoal_tac "w1=w1a")
   apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea qs X qt w1a list)(*strict*)
   prefer 2
   apply (metis liftB_liftA_inj1)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea qs X qt w1a list)(*strict*)
  apply(subgoal_tac "list=v")
   apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea qs X qt w1a list)(*strict*)
   prefer 2
   apply(rule sym)
   apply (metis liftB_liftA_inj2)
  apply(rename_tac \<pi>1 \<pi>2 e w1 q11 X11 q12 ea qs X qt w1a list)(*strict*)
  apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a)(*strict*)
  apply(case_tac A2)
   apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q b)(*strict*)
   apply(clarsimp)
   apply(simp add: cropTol3l2_single_def)
   apply(clarsimp)
   apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b)(*strict*)
   apply(subgoal_tac "X" for X)
    apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b)(*strict*)
    prefer 2
    apply(unfold cfgLM.trans_der_def)
    apply(erule exE)+
    apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
    apply(fold cfgLM.trans_der_def)
    apply(rule_tac
      ?x1.0="[]"
      and ?x2.0="[]"
      and ?v1.0="w1a"
      and ?w1.0="cons_l3 qs (X ! 0) qt # v"
      and ?v2.0="w1a"
      and ?w2.0="[cons_l3 qs (X ! 0) qt]"
      and n="(length \<pi>1)"
      and ?d2.0="d1"
      and ?d1.0="d2"
      and G="G"
      and G'="G'"
      in cfgLM_positions_remain_compatible_l2l3)
               apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
             apply(simp add: F2LR1inputx_def)
            apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
            apply(simp add: F2LR1inputx_def)
           apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
           apply(simp add: F2LR1inputx_def)
          apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
          apply(force)
         apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
         apply(force)
        apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
        apply(force)
       apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
       apply(rule_tac
      t="length \<pi>1"
      and s="length \<pi>2"
      in ssubst)
        apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
        apply(rule map_eq_imp_length_eq)
        apply(force)
       apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
       apply(force)
      apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
      apply(force)
     apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b eb ec)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 e q12 ea qs X qt w1a q b)(*strict*)
   apply(clarsimp)
  apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2)(*strict*)
  apply(clarsimp)
  apply(simp add: cropTol3l2_single_def)
  apply(subgoal_tac "X" for X)
   apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2)(*strict*)
   prefer 2
   apply(unfold cfgLM.trans_der_def)
   apply(erule exE)+
   apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
   apply(fold cfgLM.trans_der_def)
   apply(rule_tac
      ?x1.0="[]"
      and ?x2.0="[]"
      and ?v1.0="w1a"
      and ?w1.0="cons_l3 qs (X ! 0) qt # v"
      and ?v2.0="w1a"
      and ?w2.0="[cons_l3 qs (X ! 0) qt]"
      and n="(length \<pi>1)"
      and ?d2.0="d1"
      and ?d1.0="d2"
      and G="G'"
      and G'="G"
      in cfgLM_positions_remain_compatible_l3l3)
                 apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
                 apply(simp add: F2LR1inputx_def)
                apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
                apply(simp add: F2LR1inputx_def)
               apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
               apply(simp add: F2LR1inputx_def)
              apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
              apply(simp add: F2LR1inputx_def)
             apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
             apply(simp add: F2LR1inputx_def)
            apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
            apply(simp add: split_TSstructure_def)
           apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
           apply(force)
          apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
          apply(force)
         apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
         apply(force)
        apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
        apply(force)
       apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
       apply(force)
      apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
      apply(force)
     apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
     apply(rule_tac
      t="length \<pi>1"
      and s="length \<pi>2"
      in ssubst)
      apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
      apply(rule map_eq_imp_length_eq)
      apply(force)
     apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
     apply(force)
    apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
    apply(force)
   apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2 eb ec)(*strict*)
   apply(force)
  apply(rename_tac \<pi>1 \<pi>2 e q11 X11 q12 ea qs X qt w1a q1 b q2)(*strict*)
  apply(clarsimp)
  done

lemma trans_der_notfinishingL_froml3_ext: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgLM.trans_der G d \<lparr>cfg_conf = [teA (cons_l3   q A q')]\<rparr> \<pi> c
  \<Longrightarrow> notfinishingL \<pi>"
  apply(simp add: notfinishingL_def)
  apply(clarsimp)
  apply(rename_tac i)(*strict*)
  apply(simp add: notfinishing_def)
  apply(clarsimp)
  apply(case_tac "\<pi>!i")
  apply(rename_tac i prod_lhsa prod_rhsa)(*strict*)
  apply(clarsimp)
  apply(rename_tac i prod_lhs)(*strict*)
  apply(rename_tac n X)
  apply(rename_tac n X)(*strict*)
  apply(case_tac X)
   apply(rename_tac n X qa b)(*strict*)
   prefer 2
   apply(rename_tac n X q1 b q2)(*strict*)
   apply(simp add: isl3_def)
  apply(rename_tac n X qa b)(*strict*)
  apply(clarsimp)
  apply(rename_tac n qa b)(*strict*)
  apply(simp add: isl3_def)
  apply(subgoal_tac "X" for X)
   apply(rename_tac n qa b)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d"
      and i="n"
      and kleene_starT="False"
      and END="False"
      in cfgLM.trans_der_step_detail)
     apply(rename_tac n qa b)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac n qa b)(*strict*)
    apply(force)
   apply(rename_tac n qa b)(*strict*)
   apply(force)
  apply(rename_tac n qa b)(*strict*)
  apply(simp add: cfgLM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac n qa b e ci ci' l r)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = l")
   apply(rename_tac n qa b e ci ci' l r)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB l"
      in exI)
   apply (metis liftBDeConv2)
  apply(rename_tac n qa b e ci ci' l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac n qa b e ci ci' r l')(*strict*)
  apply(thin_tac "setA (liftB l') = {}")
  apply(case_tac ci)
  apply(rename_tac n qa b e ci ci' r l' cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n qa b e ci' r l')(*strict*)
  apply(case_tac ci')
  apply(rename_tac n qa b e ci' r l' cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n qa b e r l')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac n qa b e r l')(*strict*)
   prefer 2
   apply(rule_tac
      n="n"
      and d="d"
      in cfgLM.trans_der_crop)
       apply(rename_tac n qa b e r l')(*strict*)
       apply(simp add: split_TSstructure_def)
       apply(force)
      apply(rename_tac n qa b e r l')(*strict*)
      apply(force)
     apply(rename_tac n qa b e r l')(*strict*)
     apply(force)
    apply(rename_tac n qa b e r l')(*strict*)
    apply(force)
   apply(rename_tac n qa b e r l')(*strict*)
   apply(force)
  apply(rename_tac n qa b e r l')(*strict*)
  apply(thin_tac "cfgLM.trans_der G d \<lparr>cfg_conf = [teA (cons_l3   q A q')]\<rparr> \<pi> c")
  apply(rename_tac n qa b e r l')(*strict*)
  apply(subgoal_tac "X" for X)
   apply(rename_tac n qa b e r l')(*strict*)
   prefer 2
   apply(rule_tac
      \<pi>="take n \<pi>"
      and c'="\<lparr>cfg_conf = liftB l' @ teA (cons_l2   qa b) # r\<rparr>"
      and d="d"
      in only_l3_nonterminals_reachable)
        apply(rename_tac n qa b e r l')(*strict*)
        apply(simp add: F2LR1inputx_def)
        apply(force)
       apply(rename_tac n qa b e r l')(*strict*)
       apply(simp add: F2LR1inputx_def)
       apply(force)
      apply(rename_tac n qa b e r l')(*strict*)
      apply(simp add: F2LR1inputx_def)
     apply(rename_tac n qa b e r l')(*strict*)
     apply(simp add: split_TSstructure_def)
     apply(simp add: F2LR1inputx_def)
    apply(rename_tac n qa b e r l')(*strict*)
    apply(simp add: split_TSstructure_def)
   apply(rename_tac n qa b e r l')(*strict*)
   apply(force)
  apply(rename_tac n qa b e r l')(*strict*)
  apply(clarsimp)
  apply(simp add: setAConcat setBConcat setA_liftB setA_liftA setB_liftA setB_liftB)
  apply(force)
  done

lemma cfgRM_reachable_only_l3_nonterminals: "
  F2LR1inputx G G'
  \<Longrightarrow> split_TSstructure G
  \<Longrightarrow> cfgRM.trans_der G d \<lparr>cfg_conf=[teA (cfg_initial G)]\<rparr> \<pi> c
  \<Longrightarrow> n\<le>length \<pi>
  \<Longrightarrow> d n = Some (pair e \<lparr>cfg_conf=w\<rparr>)
  \<Longrightarrow> only_l3_nonterminals (filterA (butlast w))"
  apply(induct n arbitrary: e w)
   apply(rename_tac e w)(*strict*)
   apply(simp add: cfgRM.trans_der_def only_l3_nonterminals_def)
  apply(rename_tac n e w)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "X" for X)
   apply(rename_tac n e w)(*strict*)
   prefer 2
   apply(rule_tac
      G="G"
      and d="d"
      and i="n"
      and kleene_starT="False"
      and END="False"
      in cfgRM.trans_der_step_detail)
     apply(rename_tac n e w)(*strict*)
     apply(simp add: split_TSstructure_def)
    apply(rename_tac n e w)(*strict*)
    apply(force)
   apply(rename_tac n e w)(*strict*)
   apply(force)
  apply(rename_tac n e w)(*strict*)
  apply(simp add: cfgRM_step_relation_def)
  apply(clarsimp)
  apply(rename_tac n ea ci l r)(*strict*)
  apply(subgoal_tac "\<exists>l'. liftB l' = r")
   apply(rename_tac n ea ci l r)(*strict*)
   prefer 2
   apply(rule_tac
      x="filterB r"
      in exI)
   apply (rule liftBDeConv2)
   apply(force)
  apply(rename_tac n ea ci l r)(*strict*)
  apply(clarsimp)
  apply(rename_tac n ea ci l l')(*strict*)
  apply(case_tac ci)
  apply(rename_tac n ea ci l l' cfg_confa)(*strict*)
  apply(clarsimp)
  apply(rename_tac n ea l l')(*strict*)
  apply(thin_tac "setA (liftB l') = {}")
  apply(erule_tac
      x="ea"
      in meta_allE)
  apply(erule_tac
      x="l @ teA (prod_lhs (\<pi> ! n)) # liftB l'"
      in meta_allE)
  apply(clarsimp)
  apply(subgoal_tac "LR1ProdForm G")
   apply(rename_tac n ea l l')(*strict*)
   prefer 2
   apply(simp add: F2LR1input_def F2LR1inputx_def)
   apply(clarsimp)
   apply(rule sub_of_F_SDPDA_TO_CFG_STD__implies_LR1ProdForm)
   apply(force)
  apply(rename_tac n ea l l')(*strict*)
  apply(simp add: LR1ProdForm_def)
  apply(erule_tac
      x="\<pi>!n"
      in ballE)
   apply(rename_tac n ea l l')(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac n ea l l')(*strict*)
  apply(rule_tac
      xs="l'"
      in rev_cases)
   apply(rename_tac n ea l l')(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l)(*strict*)
   apply(erule disjE)
    apply(rename_tac n ea l)(*strict*)
    apply(clarsimp)
    apply(rule_tac
      xs="l"
      in rev_cases)
     apply(rename_tac n ea l)(*strict*)
     apply(clarsimp)
    apply(rename_tac n ea l ys y)(*strict*)
    apply(clarsimp)
    apply(rename_tac n ea ys y)(*strict*)
    apply(case_tac y)
     apply(rename_tac n ea ys y a)(*strict*)
     apply(clarsimp)
     apply(rename_tac n ea ys a)(*strict*)
     apply(simp add: filterA_distrib_append)
     apply (metis only_l3_nonterminals_take)
    apply(rename_tac n ea ys y b)(*strict*)
    apply(clarsimp)
    apply(rename_tac n ea ys b)(*strict*)
    apply(simp add: filterA_distrib_append)
   apply(rename_tac n ea l)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l b q1 q2 q3 q4 A1)(*strict*)
   apply(erule disjE)
    apply(rename_tac n ea l b q1 q2 q3 q4 A1)(*strict*)
    apply(clarsimp)
    apply(rename_tac n ea l b q1 q2 A1)(*strict*)
    apply(rule_tac
      t="butlast SSX" for SSX
      in ssubst)
     apply(rename_tac n ea l b q1 q2 A1)(*strict*)
     apply(rule butlast_direct)
     apply(force)
    apply(rename_tac n ea l b q1 q2 A1)(*strict*)
    apply(simp add: filterA_distrib_append)
   apply(rename_tac n ea l b q1 q2 q3 q4 A1)(*strict*)
   apply(erule disjE)
    apply(rename_tac n ea l b q1 q2 q3 q4 A1)(*strict*)
    apply(clarsimp)
    apply(rename_tac n ea l b q1 q2 q3 A1)(*strict*)
    apply(rule_tac
      t="butlast SSX" for SSX
      in ssubst)
     apply(rename_tac n ea l b q1 q2 q3 A1)(*strict*)
     apply(rule butlast_direct)
     apply(force)
    apply(rename_tac n ea l b q1 q2 q3 A1)(*strict*)
    apply(simp add: filterA_distrib_append)
   apply(rename_tac n ea l b q1 q2 q3 q4 A1)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l q1 q2 q3 q4 A1 A2)(*strict*)
   apply(erule disjE)
    apply(rename_tac n ea l q1 q2 q3 q4 A1 A2)(*strict*)
    apply(clarsimp)
   apply(rename_tac n ea l q1 q2 q3 q4 A1 A2)(*strict*)
   apply(erule disjE)
    apply(rename_tac n ea l q1 q2 q3 q4 A1 A2)(*strict*)
    apply(clarsimp)
    apply(rename_tac n ea l q1 q2 q3 A1 A2)(*strict*)
    apply(rule_tac
      t="butlast SSX" for SSX
      in ssubst)
     apply(rename_tac n ea l q1 q2 q3 A1 A2)(*strict*)
     apply(rule butlast_direct)
     apply(force)
    apply(rename_tac n ea l q1 q2 q3 A1 A2)(*strict*)
    apply(simp add: filterA_distrib_append)
    apply (metis only_l3_nonterminals_append1)
   apply(rename_tac n ea l q1 q2 q3 q4 A1 A2)(*strict*)
   apply(clarsimp)
   apply(rule_tac
      t="butlast SSX" for SSX
      in ssubst)
    apply(rename_tac n ea l q1 q2 q3 q4 A1 A2)(*strict*)
    apply(rule butlast_direct)
    apply(force)
   apply(rename_tac n ea l q1 q2 q3 q4 A1 A2)(*strict*)
   apply(simp add: filterA_distrib_append)
   apply (metis only_l3_nonterminals_append1)
  apply(rename_tac n ea l l' ys y)(*strict*)
  apply(clarsimp)
  apply(rename_tac n ea l ys y)(*strict*)
  apply(simp add: liftB_commutes_over_concat)
  apply(subgoal_tac "butlast (l @ teA (prod_lhs (\<pi> ! n)) # liftB ys @ [teB y]) = SSX" for SSX)
   apply(rename_tac n ea l ys y)(*strict*)
   prefer 2
   apply(rule butlast_direct)
   apply(force)
  apply(rename_tac n ea l ys y)(*strict*)
  apply(clarsimp)
  apply(simp add: filterA_distrib_append filterA_liftB)
  apply(erule disjE)
   apply(rename_tac n ea l ys y)(*strict*)
   apply(clarsimp)
   apply(rule_tac
      t="butlast SSX" for SSX
      in ssubst)
    apply(rename_tac n ea l ys y)(*strict*)
    apply(rule butlast_direct)
    apply(force)
   apply(rename_tac n ea l ys y)(*strict*)
   apply(simp add: filterA_distrib_append filterA_liftB)
   apply (metis only_l3_nonterminals_take)
  apply(rename_tac n ea l ys y)(*strict*)
  apply(clarsimp)
  apply(rename_tac n ea l ys y b q1 q2 q3 q4 A1)(*strict*)
  apply(erule disjE)
   apply(rename_tac n ea l ys y b q1 q2 q3 q4 A1)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l ys y b q1 q2 A1)(*strict*)
   apply(rule_tac
      t="butlast SSX" for SSX
      in ssubst)
    apply(rename_tac n ea l ys y b q1 q2 A1)(*strict*)
    apply(rule butlast_direct)
    apply(force)
   apply(rename_tac n ea l ys y b q1 q2 A1)(*strict*)
   apply(simp add: filterA_distrib_append filterA_liftB)
   apply (metis only_l3_nonterminals_drop only_l3_nonterminals_l2_at_front)
  apply(rename_tac n ea l ys y b q1 q2 q3 q4 A1)(*strict*)
  apply(erule disjE)
   apply(rename_tac n ea l ys y b q1 q2 q3 q4 A1)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l ys y b q1 q2 q3 A1)(*strict*)
   apply(rule_tac
      t="butlast SSX" for SSX
      in ssubst)
    apply(rename_tac n ea l ys y b q1 q2 q3 A1)(*strict*)
    apply(rule butlast_direct)
    apply(force)
   apply(rename_tac n ea l ys y b q1 q2 q3 A1)(*strict*)
   apply(simp add: filterA_distrib_append filterA_liftB)
   apply (metis only_l3_nonterminals_append1 only_l3_nonterminals_take)
  apply(rename_tac n ea l ys y b q1 q2 q3 q4 A1)(*strict*)
  apply(clarsimp)
  apply(rename_tac n ea l ys y q1 q2 q3 q4 A1 A2)(*strict*)
  apply(erule disjE)
   apply(rename_tac n ea l ys y q1 q2 q3 q4 A1 A2)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l ys y q1 q2 A1 A2)(*strict*)
   apply(subgoal_tac "False")
    apply(rename_tac n ea l ys y q1 q2 A1 A2)(*strict*)
    apply(force)
   apply(rename_tac n ea l ys y q1 q2 A1 A2)(*strict*)
   apply (metis only_l3_nonterminals_drop only_l3_nonterminals_l2_at_front)
  apply(rename_tac n ea l ys y q1 q2 q3 q4 A1 A2)(*strict*)
  apply(erule disjE)
   apply(rename_tac n ea l ys y q1 q2 q3 q4 A1 A2)(*strict*)
   apply(clarsimp)
   apply(rename_tac n ea l ys y q1 q2 q3 A1 A2)(*strict*)
   apply(subgoal_tac "False")
    apply(rename_tac n ea l ys y q1 q2 q3 A1 A2)(*strict*)
    apply(force)
   apply(rename_tac n ea l ys y q1 q2 q3 A1 A2)(*strict*)
   apply (metis only_l3_nonterminals_drop only_l3_nonterminals_l2_at_front)
  apply(rename_tac n ea l ys y q1 q2 q3 q4 A1 A2)(*strict*)
  apply(clarsimp)
  apply(rule_tac
      t="butlast SSX" for SSX
      in ssubst)
   apply(rename_tac n ea l ys y q1 q2 q3 q4 A1 A2)(*strict*)
   apply(rule butlast_direct)
   apply(force)
  apply(rename_tac n ea l ys y q1 q2 q3 q4 A1 A2)(*strict*)
  apply(simp add: filterA_distrib_append filterA_liftB)
  apply (metis ConsApp append_assoc only_l3_nonterminals_append only_l3_nonterminals_drop only_l3_nonterminals_replace_front only_l3_nonterminals_single only_l3_nonterminals_take)
  done

hide_fact always_no_repetition_in_left_degen_derivations
hide_fact CFGdetProduceLength2_hlp
hide_fact CFGdetProduceLength2_hlp2
hide_fact cfgLMMIP_nonterminal_tail_not_empty
hide_fact compatible_derivations_coincide_heavily_not_shorter
hide_fact compatible_elimination_must_have_same_components
hide_fact compatible_elimination_must_have_same_components_not_shorter
hide_fact compatible_elimination_must_have_same_length
hide_fact compatible_left_degen_l2l2
hide_fact compatible_pop_productions_have_equal_last_state
hide_fact compatible_prod_terminal_l2l2
hide_fact compatible_productions_l3_grows_faster_than_unknown
hide_fact duplicate_markingH_use_in_CFG
hide_fact F2LR1input_implies_CFGdetProduceLength2
hide_fact F2LR1input_implies_CFGprodXORelim
hide_fact F2LR1input_implies_LR1ProdFormSimp
hide_fact from_same_edge_implies_same_src
hide_fact F_SDPDA_TO_CFG_STD__only_l3_nonterminals_preserved
hide_fact last_back_state_is_preserved
hide_fact nonfinal_prod_to_edge_to_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_equality
hide_fact no_repeating_leading_nonterminal_Extended_hlp1
hide_fact no_repeating_leading_nonterminal_Extended_hlp2
hide_fact no_terminal_productions_for_2LR1Grammar
hide_fact only_l3_nonterminals_or_l3_l2_separation_ALT_preserved
hide_fact pointwise_equality
hide_fact preserve_only_l3_nonterminals
hide_fact prods_to_final_state
hide_fact prod_to_edge_eq_implies_same_terminal_production
hide_fact same_edge_productions_preserve_nonterminal_tail_length_l2l3
hide_fact same_edge_productions_preserve_nonterminal_tail_length_l3l3
hide_fact same_l3_string_source_and_same_target_liftB_and_same_prod_to_edge_implies_equal_prods
hide_fact same_l3_string_source_and_same_target_liftB_and_same_prod_to_edge_implies_equal_prods_hlp
hide_fact THE_unique_edge_is_in_delta_prime_1
hide_fact THE_unique_edge_is_in_delta_prime_1_enhanced
hide_fact THE_unique_edge_is_in_delta_prime_2
hide_fact THE_unique_edge_is_in_delta_prime_2_enhanced
hide_fact trans_der_notfinishingL_froml2
hide_fact trans_der_notfinishingL_froml3
hide_fact translate_into_creating_derivation_hlp
hide_fact unique_edge_exists_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1
  (* important cfgLMMIP_decompose_into_trans_der_and_cfgLMMIP *)
  (* important cfgLM_positions_remain_compatible_l2l3 *)
  (* important cfgRM_reachable_only_l3_nonterminals *)
  (* important compatible_cfgLMMIP_from_compatible_source *)
  (* important compatible_derivation_from_lxlx_remain_compatible_for_generations *)
  (* important compatible_derivation_reach_empty_configuration_synchronously_ext *)
  (* important compatible_derivations_coincide_heavily *)
  (* important compatible_productions_l3_does_not_end_faster *)
  (* important compatible_productions_l3_grows_faster_than_unknown_ext *)
  (* important cropTol3l2_single_equal_of_compatible_derivations *)
  (* important drop_drop_and_crop_empty *)
  (* important F2LR1input_implies_split_TSstructure *)
  (* important fillOptL_reflects_empty *)
  (* important F_SDPDA_TO_CFG_STD__l3_l2_separation_ALT_preserved *)
  (* important left_degen_derivation_preserve_equivalent_state_stack_top *)
  (* important left_degen_preserves_leading_nonterminal_prime *)
  (* important left_degen_repetitions_in_parallel_derivation *)
  (* important nonfinal_prod_to_edge_to_special_production_set *)
  (* important no_repeating_leading_nonterminal_Extended *)
  (* important only_l3_nonterminals_butlast_preserved *)
  (* important prod_to_edge_eq_implies_same_terminal_production2 *)
  (* important prod_to_edge_equality_for_nonterminal_generation *)
  (* important proper_l3_l2_seqI *)
  (* important proper_l3_l2_seqI2 *)
  (* important proper_l3_l2_seq_nol2_prime *)
  (* important realizable_length_eq *)
  (* important same_l3_source_and_same_target_liftB_and_same_prod_to_edge_implies_equal_prods *)
  (* important same_source_edge_productions_have_similar_lhs *)
  (* important THE_unique_edge_is_in_delta_prime_enhanced *)
  (* important trans_der_notfinishingL *)
  (* important trans_der_notfinishingL_froml3_ext *)
  (* important unique_edge_exists_F_DPDA_DRE__revert_F_SDPDA_TO_CFG_STD_1_enhanced *)

end
