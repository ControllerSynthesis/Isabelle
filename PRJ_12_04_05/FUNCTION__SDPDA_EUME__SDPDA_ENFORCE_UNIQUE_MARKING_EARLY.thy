section {*FUNCTION\_\_SDPDA\_EUME\_\_SDPDA\_ENFORCE\_UNIQUE\_MARKING\_EARLY*}
theory
  FUNCTION__SDPDA_EUME__SDPDA_ENFORCE_UNIQUE_MARKING_EARLY

imports
  PRJ_12_04_05__ENTRY

begin

definition F_DPDA_EUME__RL__edge :: "
  ('state DT_state_or_state, 'event, 'stack) epda_step_label
  \<Rightarrow> ('state, 'event, 'stack) epda_step_label"
  where
    "F_DPDA_EUME__RL__edge e \<equiv>
  \<lparr>edge_src =
      case edge_src e
      of cons_state_or_state_old q \<Rightarrow> q
      | cons_state_or_state_new q \<Rightarrow> q,
  edge_event = edge_event e,
  edge_pop = edge_pop e,
  edge_push = edge_push e,
  edge_trg =
    case edge_trg e
    of cons_state_or_state_old q \<Rightarrow> q
    | cons_state_or_state_new q \<Rightarrow> q\<rparr>"

definition F_DPDA_EUME__LR__configuration :: "
  ('state, 'event, 'stack) epdaS_conf
  \<Rightarrow> ('state \<Rightarrow> 'state DT_state_or_state)
  \<Rightarrow> ('state DT_state_or_state, 'event, 'stack) epdaS_conf"
  where
    "F_DPDA_EUME__LR__configuration c f \<equiv>
  \<lparr>epdaS_conf_state = f (epdaS_conf_state c),
  epdaS_conf_scheduler = epdaS_conf_scheduler c,
  epdaS_conf_stack = epdaS_conf_stack c\<rparr>"

definition F_DPDA_EUME__RL__configuration :: "
  ('state DT_state_or_state, 'event, 'stack) epdaS_conf
  \<Rightarrow> ('state, 'event, 'stack) epdaS_conf"
  where
    "F_DPDA_EUME__RL__configuration c \<equiv>
  \<lparr>epdaS_conf_state =
    case epdaS_conf_state c
    of cons_state_or_state_old q \<Rightarrow> q
    | cons_state_or_state_new q \<Rightarrow> q,
  epdaS_conf_scheduler = epdaS_conf_scheduler c,
  epdaS_conf_stack = epdaS_conf_stack c\<rparr>"

definition F_DPDA_EUME__RL__derivation :: "
  (('state DT_state_or_state, 'event, 'stack) epda_step_label, ('state DT_state_or_state, 'event, 'stack) epdaS_conf) derivation
  \<Rightarrow> (('state, 'event, 'stack) epda_step_label, ('state, 'event, 'stack) epdaS_conf) derivation"
  where
    "F_DPDA_EUME__RL__derivation d \<equiv>
  \<lambda>n. case d n
      of None \<Rightarrow> None
      | Some (pair e c) \<Rightarrow>
        Some (pair (case e
                    of None \<Rightarrow> None
                    | Some e \<Rightarrow> Some (F_DPDA_EUME__RL__edge e))
                   (F_DPDA_EUME__RL__configuration c))"

lemma F_DPDA_EUME__RL__configuration_preserves_epdaS_step_relation: "
  epdaS_step_relation (F_SDPDA_EUME G) c1 e2 c2
  \<Longrightarrow> epdaS_step_relation G (F_DPDA_EUME__RL__configuration c1) (F_DPDA_EUME__RL__edge e2) (F_DPDA_EUME__RL__configuration c2)"
  apply(simp add: epdaS_step_relation_def F_DPDA_EUME__RL__configuration_def F_DPDA_EUME__RL__edge_def)
  apply(clarsimp)
  apply(rename_tac w)(*strict*)
  apply(simp add: F_SDPDA_EUME_def)
  apply(clarsimp)
  apply(rename_tac w x)(*strict*)
  apply(simp add: F_SDPDA_EUME__edges_def)
  apply(case_tac "FB_executing_edge x")
   apply(rename_tac w x)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(erule disjE)
    apply(rename_tac w x)(*strict*)
    apply(clarsimp)
    apply(case_tac x)
    apply(rename_tac w x edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
    apply(clarsimp)
   apply(rename_tac w x)(*strict*)
   apply(clarsimp)
   apply(case_tac x)
   apply(rename_tac w x edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
   apply(clarsimp)
  apply(rename_tac w x)(*strict*)
  apply(clarsimp)
  apply(erule disjE)
   apply(rename_tac w x)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(case_tac x)
   apply(rename_tac w x edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
   apply(force)
  apply(rename_tac w x)(*strict*)
  apply(case_tac "edge_src x \<in> epda_marking G")
   apply(rename_tac w x)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(case_tac x)
   apply(rename_tac w x edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
   apply(force)
  apply(rename_tac w x)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(case_tac x)
  apply(rename_tac w x edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
  apply(force)
  done

lemma F_DPDA_EUME__RL__derivation_preserves_derivation: "
  valid_epda G
  \<Longrightarrow> epdaS.derivation (F_SDPDA_EUME G) d
  \<Longrightarrow> epdaS.derivation G (F_DPDA_EUME__RL__derivation d)"
  apply(simp (no_asm) add: epdaS.derivation_def)
  apply(clarsimp)
  apply(rename_tac i)(*strict*)
  apply(case_tac i)
   apply(rename_tac i)(*strict*)
   apply(clarsimp)
   apply(subgoal_tac "\<exists>c. d 0 = Some (pair None c)")
    apply(clarsimp)
    apply(rename_tac c)(*strict*)
    apply(simp add: F_DPDA_EUME__RL__derivation_def)
   apply (metis epdaS.some_position_has_details_at_0)
  apply(rename_tac i nat)(*strict*)
  apply(clarsimp)
  apply(rename_tac nat)(*strict*)
  apply(simp add: F_DPDA_EUME__RL__derivation_def)
  apply(case_tac "d (Suc nat)")
   apply(rename_tac nat)(*strict*)
   apply(clarsimp)
  apply(rename_tac nat a)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d nat = Some (pair e1 c1) \<and> d (Suc nat) = Some (pair (Some e2) c2) \<and> epdaS_step_relation (F_SDPDA_EUME G) c1 e2 c2")
   apply(rename_tac nat a)(*strict*)
   prefer 2
   apply(rule_tac
      m="Suc nat"
      in epdaS.step_detail_before_some_position)
     apply(rename_tac nat a)(*strict*)
     apply(force)
    apply(rename_tac nat a)(*strict*)
    apply(force)
   apply(rename_tac nat a)(*strict*)
   apply(force)
  apply(rename_tac nat a)(*strict*)
  apply(clarsimp)
  apply(rename_tac nat e1 e2 c1 c2)(*strict*)
  apply(simp add: F_DPDA_EUME__RL__derivation_def)
  apply(rule F_DPDA_EUME__RL__configuration_preserves_epdaS_step_relation)
  apply(force)
  done

lemma F_DPDA_EUME__RL__configuration_preserves_epdaS_initial_configurations: "
  valid_epda G
  \<Longrightarrow> c \<in> epdaS_initial_configurations (F_SDPDA_EUME G)
  \<Longrightarrow> F_DPDA_EUME__RL__configuration c \<in> epdaS_initial_configurations G"
  apply(simp add: F_SDPDA_EUME_def F_DPDA_EUME__RL__configuration_def epdaS_initial_configurations_def epdaS_configurations_def)
  apply(clarsimp)
  apply(rename_tac i)(*strict*)
  apply(simp add: valid_epda_def)
  done

lemma F_DPDA_EUME__RL__derivation_preserves_derivation_initial: "
  valid_epda G
  \<Longrightarrow> epdaS.derivation_initial (F_SDPDA_EUME G) d
  \<Longrightarrow> epdaS.derivation_initial G (F_DPDA_EUME__RL__derivation d)"
  apply(simp (no_asm) add: epdaS.derivation_initial_def)
  apply(rule conjI)
   apply(rule F_DPDA_EUME__RL__derivation_preserves_derivation)
    apply(force)
   apply(simp add: epdaS.derivation_initial_def)
  apply(subgoal_tac "\<exists>c. d 0 = Some (pair None c)")
   prefer 2
   apply (metis epdaS.derivation_initial_is_derivation epdaS.some_position_has_details_at_0)
  apply(clarsimp)
  apply(rename_tac c)(*strict*)
  apply(simp add: F_DPDA_EUME__RL__derivation_def)
  apply(simp add: epdaS.derivation_initial_def)
  apply(clarsimp)
  apply(rule F_DPDA_EUME__RL__configuration_preserves_epdaS_initial_configurations)
   apply(rename_tac c)(*strict*)
   apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
  apply(rename_tac c)(*strict*)
  apply(force)
  done

lemma F_SDPDA_EUME__preserves_epda: "
  valid_epda G
  \<Longrightarrow> valid_epda (F_SDPDA_EUME G)"
  apply(simp add: valid_simple_dpda_def valid_epda_def valid_pda_def valid_dpda_def F_SDPDA_EUME_def)
  apply(clarsimp)
  apply(rule conjI)
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edges_def)
  apply(rule conjI)
   apply(clarsimp)
   apply(rename_tac xa)(*strict*)
   apply(force)
  apply(clarsimp)
  apply(rename_tac a x)(*strict*)
  apply(simp add: valid_epda_step_label_def)
  apply(erule_tac
      x="a"
      in ballE)
   apply(rename_tac a x)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac a x)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_EUME__edges_def)
  apply(case_tac "FB_executing_edge a")
   apply(rename_tac a x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(erule disjE)
    apply(rename_tac a x)(*strict*)
    apply(clarsimp)
   apply(rename_tac a x)(*strict*)
   apply(clarsimp)
  apply(rename_tac a x)(*strict*)
  apply(clarsimp)
  apply(erule disjE)
   apply(rename_tac a x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac a x)(*strict*)
  apply(case_tac "edge_src a \<in> epda_marking G")
   apply(rename_tac a x)(*strict*)
   apply(clarsimp)
   apply(rename_tac a)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac a x)(*strict*)
  apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  done

lemma F_SDPDA_EUME__preserves_PDA: "
  valid_pda G
  \<Longrightarrow> valid_pda (F_SDPDA_EUME G)"
  apply(simp add: valid_pda_def)
  apply(rule conjI)
   apply(rule F_SDPDA_EUME__preserves_epda)
   apply(force)
  apply(clarsimp)
  apply(rename_tac e)(*strict*)
  apply(simp add: valid_simple_dpda_def valid_epda_def valid_pda_def valid_dpda_def F_SDPDA_EUME_def)
  apply(clarsimp)
  apply(rename_tac e x)(*strict*)
  apply(simp add: F_SDPDA_EUME__edges_def F_SDPDA_EUME__edge_annotation_def)
  apply(erule_tac
      x="x"
      and P="\<lambda>x. length (edge_pop x) = Suc 0"
      in ballE)
   apply(rename_tac e x)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac e x)(*strict*)
  apply(erule_tac
      x="x"
      in ballE)
   apply(rename_tac e x)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac e x)(*strict*)
  apply(case_tac "FB_executing_edge x")
   apply(rename_tac e x)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac e x)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac e x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac e x)(*strict*)
  apply(clarsimp)
  apply(erule disjE)
   apply(rename_tac e x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac e x)(*strict*)
  apply(case_tac "edge_src x \<in> epda_marking G")
   apply(rename_tac e x)(*strict*)
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac e x)(*strict*)
  apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  done

lemma F_SDPDA_EUME__preserves_DPDA: "
  valid_dpda G
  \<Longrightarrow> valid_dpda (F_SDPDA_EUME G)"
  apply(simp add: valid_dpda_def)
  apply(rule conjI)
   apply(rule F_SDPDA_EUME__preserves_PDA)
   apply(force)
  apply(simp (no_asm) add: epdaS.is_forward_edge_deterministic_accessible_def)
  apply(clarsimp)
  apply(rename_tac c c1 c2 e1 e2)(*strict*)
  apply(subgoal_tac "epdaS.is_forward_edge_deterministic_accessible G")
   apply(rename_tac c c1 c2 e1 e2)(*strict*)
   prefer 2
   apply(simp add: valid_simple_dpda_def)
  apply(rename_tac c c1 c2 e1 e2)(*strict*)
  apply(simp add: epdaS.is_forward_edge_deterministic_accessible_def)
  apply(erule_tac
      x="F_DPDA_EUME__RL__configuration c"
      in ballE)
   apply(rename_tac c c1 c2 e1 e2)(*strict*)
   prefer 2
   apply(subgoal_tac "F_DPDA_EUME__RL__configuration c \<in> epdaS.get_accessible_configurations G")
    apply(rename_tac c c1 c2 e1 e2)(*strict*)
    apply(force)
   apply(rename_tac c c1 c2 e1 e2)(*strict*)
   apply(thin_tac "F_DPDA_EUME__RL__configuration c \<notin> epdaS.get_accessible_configurations G")
   apply(rename_tac c c1 c2 e1 e2)(*strict*)
   apply(simp add: epdaS.get_accessible_configurations_def)
   apply(clarsimp)
   apply(rename_tac c c1 c2 e1 e2 d i)(*strict*)
   apply(rule_tac
      x="F_DPDA_EUME__RL__derivation d"
      in exI)
   apply(rule conjI)
    apply(rename_tac c c1 c2 e1 e2 d i)(*strict*)
    apply(rule F_DPDA_EUME__RL__derivation_preserves_derivation_initial)
     apply(rename_tac c c1 c2 e1 e2 d i)(*strict*)
     apply(simp add: valid_pda_def)
    apply(rename_tac c c1 c2 e1 e2 d i)(*strict*)
    apply(force)
   apply(rename_tac c c1 c2 e1 e2 d i)(*strict*)
   apply(rule_tac
      x="i"
      in exI)
   apply(simp add: F_DPDA_EUME__RL__derivation_def F_DPDA_EUME__RL__configuration_def get_configuration_def)
   apply(case_tac "d i")
    apply(rename_tac c c1 c2 e1 e2 d i)(*strict*)
    apply(force)
   apply(rename_tac c c1 c2 e1 e2 d i a)(*strict*)
   apply(clarsimp)
   apply(case_tac a)
   apply(rename_tac c c1 c2 e1 e2 d i a option b)(*strict*)
   apply(clarsimp)
   apply(rename_tac c c1 c2 e1 e2 d i option)(*strict*)
   apply(simp add: F_DPDA_EUME__RL__derivation_def F_DPDA_EUME__RL__configuration_def get_configuration_def)
  apply(rename_tac c c1 c2 e1 e2)(*strict*)
  apply(thin_tac "c \<in> epdaS.get_accessible_configurations (F_SDPDA_EUME G)")
  apply(rename_tac c c1 c2 e1 e2)(*strict*)
  apply(erule_tac
      x="F_DPDA_EUME__RL__configuration c1"
      in allE)
  apply(erule_tac
      x="F_DPDA_EUME__RL__configuration c2"
      in allE)
  apply(erule_tac
      x="F_DPDA_EUME__RL__edge e1"
      in allE)
  apply(erule_tac
      x="F_DPDA_EUME__RL__edge e2"
      in allE)
  apply(erule impE)
   apply(rename_tac c c1 c2 e1 e2)(*strict*)
   prefer 2
   apply(simp add: F_DPDA_EUME__RL__edge_def epdaS_step_relation_def)
   apply(clarsimp)
   apply(rename_tac c c1 c2 e1 e2 w)(*strict*)
   apply(simp add: F_SDPDA_EUME_def)
   apply(clarsimp)
   apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
   apply(simp add: F_SDPDA_EUME__edges_def)
   apply(case_tac "edge_event e1")
    apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
    apply(case_tac "FB_executing_edge x")
     apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
     apply(clarsimp)
     apply(simp add: FB_executing_edge_def)
     apply(erule disjE)
      apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
      apply(clarsimp)
      apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
    apply(case_tac "FB_executing_edge xa")
     apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
     apply(clarsimp)
     apply(simp add: FB_executing_edge_def)
     apply(erule_tac
      P="e2 = F_SDPDA_EUME__edge_annotation xa cons_state_or_state_old cons_state_or_state_old"
      in disjE)
      apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
      apply(clarsimp)
      apply(rename_tac c c1 c2 e1 w x xa y)(*strict*)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
    apply(clarsimp)
    apply(erule_tac
      P="e1 = F_SDPDA_EUME__edge_annotation x cons_state_or_state_new cons_state_or_state_new"
      in disjE)
     apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(erule disjE)
      apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
     apply(case_tac e2)
     apply(rename_tac c c1 c2 e1 e2 w x xa edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 w x xa)(*strict*)
     apply(case_tac "epdaS_conf_state c2")
      apply(rename_tac c c1 c2 w x xa q)(*strict*)
      apply(clarsimp)
      apply(rename_tac c c1 c2 w x xa)(*strict*)
      apply(case_tac "edge_src xa \<in> epda_marking G")
       apply(rename_tac c c1 c2 w x xa)(*strict*)
       apply(clarsimp)
       apply(simp add: F_SDPDA_EUME__edge_annotation_def)
      apply(rename_tac c c1 c2 w x xa)(*strict*)
      apply(clarsimp)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 w x xa q)(*strict*)
     apply(clarsimp)
    apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
    apply(erule disjE)
     apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(case_tac e1)
     apply(rename_tac c c1 c2 e1 e2 w x xa edge_srca edge_eventa edge_popa edge_pusha edge_trga)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 w x xa)(*strict*)
     apply(case_tac "epdaS_conf_state c1")
      apply(rename_tac c c1 c2 w x xa q)(*strict*)
      apply(clarsimp)
      apply(rename_tac c c1 c2 w x xa)(*strict*)
      apply(case_tac "edge_src x \<in> epda_marking G")
       apply(rename_tac c c1 c2 w x xa)(*strict*)
       apply(clarsimp)
       apply(simp add: F_SDPDA_EUME__edge_annotation_def)
      apply(rename_tac c c1 c2 w x xa)(*strict*)
      apply(clarsimp)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 w x xa q)(*strict*)
     apply(clarsimp)
    apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
    apply(case_tac "edge_src x \<in> epda_marking G")
     apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 e2 w x xa)(*strict*)
     apply(case_tac "edge_src xa \<in> epda_marking G")
      apply(rename_tac c c1 c2 e2 w x xa)(*strict*)
      apply(clarsimp)
      apply(rename_tac c c1 c2 w x xa)(*strict*)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 e2 w x xa)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 w x xa)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e1 e2 w x xa)(*strict*)
    apply(clarsimp)
    apply(rename_tac c c1 c2 e2 w x xa)(*strict*)
    apply(case_tac "edge_src xa \<in> epda_marking G")
     apply(rename_tac c c1 c2 e2 w x xa)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 w x xa)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e2 w x xa)(*strict*)
    apply(clarsimp)
    apply(rename_tac c c1 c2 w x xa)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
   apply(clarsimp)
   apply(case_tac "\<not> FB_executing_edge x")
    apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
    apply(clarsimp)
    apply(simp add: FB_executing_edge_def)
    apply(case_tac "edge_event xa")
     apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
     apply(clarsimp)
     apply(erule_tac
      P="e1 = F_SDPDA_EUME__edge_annotation x cons_state_or_state_new cons_state_or_state_new"
      in disjE)
      apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
      apply(clarsimp)
      apply(rename_tac c c1 c2 e2 w x xa a)(*strict*)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(erule disjE)
      apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
     apply(case_tac "edge_src xa \<in> epda_marking G")
      apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
      apply(clarsimp)
      apply(rename_tac c c1 c2 e1 w x xa a)(*strict*)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e1 e2 w x xa a aa)(*strict*)
    apply(clarsimp)
    apply(erule_tac
      P="e1 = F_SDPDA_EUME__edge_annotation x cons_state_or_state_new cons_state_or_state_new"
      in disjE)
     apply(rename_tac c c1 c2 e1 e2 w x xa a aa)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 e2 w x xa a aa)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e1 e2 w x xa a aa)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(erule disjE)
     apply(rename_tac c c1 c2 e1 e2 w x xa a aa)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 e1 w x xa aa)(*strict*)
     apply(case_tac "edge_src x \<in> epda_marking G")
      apply(rename_tac c c1 c2 e1 w x xa aa)(*strict*)
      apply(clarsimp)
      apply(rename_tac c c1 c2 w x xa aa)(*strict*)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 e1 w x xa aa)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e1 e2 w x xa a aa)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(case_tac "edge_src x \<in> epda_marking G")
     apply(rename_tac c c1 c2 e1 e2 w x xa a aa)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 w x xa aa)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e1 e2 w x xa a aa)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(case_tac "\<not> FB_executing_edge xa")
    apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
    apply(clarsimp)
    apply(simp add: FB_executing_edge_def)
    apply(case_tac "edge_event x")
     apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
     apply(clarsimp)
    apply(rename_tac c c1 c2 e1 e2 w x xa a aa)(*strict*)
    apply(erule_tac
      P="e1 = \<lparr>edge_src = cons_state_or_state_old (edge_src x), edge_event = edge_event x, edge_pop = edge_pop x, edge_push = edge_push x, edge_trg = cons_state_or_state_old (edge_trg x)\<rparr>"
      in disjE)
     apply(rename_tac c c1 c2 e1 e2 w x xa a aa)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(erule disjE)
      apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
     apply(case_tac "edge_src xa \<in> epda_marking G")
      apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
      apply(clarsimp)
      apply(rename_tac c c1 c2 w x xa y)(*strict*)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e1 e2 w x xa a aa)(*strict*)
    apply(clarsimp)
    apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
    apply(erule disjE)
     apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 w x xa y)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
    apply(case_tac "edge_src xa \<in> epda_marking G")
     apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 w x xa y)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e2 w x xa y)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
   apply(clarsimp)
   apply(erule_tac
      P="e1 = \<lparr>edge_src = cons_state_or_state_old (edge_src x), edge_event = edge_event x, edge_pop = edge_pop x, edge_push = edge_push x, edge_trg = cons_state_or_state_old (edge_trg x)\<rparr>"
      in disjE)
    apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
    apply(clarsimp)
    apply(rename_tac c c1 c2 e2 w x xa a)(*strict*)
    apply(erule disjE)
     apply(rename_tac c c1 c2 e2 w x xa a)(*strict*)
     apply(clarsimp)
     apply(rename_tac c c1 c2 w x xa a)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac c c1 c2 e2 w x xa a)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(erule disjE)
    apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
    apply(clarsimp)
   apply(rename_tac c c1 c2 e1 e2 w x xa a)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac c c1 c2 e1 e2)(*strict*)
  apply(rule conjI)
   apply(rename_tac c c1 c2 e1 e2)(*strict*)
   apply (metis F_DPDA_EUME__RL__configuration_preserves_epdaS_step_relation)
  apply(rename_tac c c1 c2 e1 e2)(*strict*)
  apply (metis F_DPDA_EUME__RL__configuration_preserves_epdaS_step_relation)
  done

theorem F_SDPDA_EUME__preserves_SDPDA: "
  valid_simple_dpda G
  \<Longrightarrow> valid_simple_dpda (F_SDPDA_EUME G)"
  apply(simp (no_asm) add: valid_simple_dpda_def)
  apply(rule conjI)
   apply(rule F_SDPDA_EUME__preserves_DPDA)
   apply(simp add: valid_simple_dpda_def)
  apply(clarsimp)
  apply(rename_tac e)(*strict*)
  apply(case_tac "edge_event e")
   apply(rename_tac e)(*strict*)
   prefer 2
   apply(rename_tac e a)(*strict*)
   apply(clarsimp)
   apply(simp add: F_SDPDA_EUME_def)
   apply(clarsimp)
   apply(rename_tac e a x)(*strict*)
   apply(simp add: valid_simple_dpda_def)
   apply(clarsimp)
   apply(erule_tac
      x="x"
      in ballE)
    apply(rename_tac e a x)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac e a x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edges_def)
   apply(case_tac "FB_executing_edge x")
    apply(rename_tac e a x)(*strict*)
    prefer 2
    apply(clarsimp)
    apply(simp add: FB_executing_edge_def)
    apply(erule_tac
      P="e = F_SDPDA_EUME__edge_annotation x cons_state_or_state_new cons_state_or_state_new"
      in disjE)
     apply(rename_tac e a x)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac e a x)(*strict*)
    apply(case_tac "edge_src x \<in> epda_marking G")
     apply(rename_tac e a x)(*strict*)
     apply(clarsimp)
     apply(rename_tac a x)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac e a x)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac e a x)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac e a x)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac e a x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac e)(*strict*)
  apply(clarsimp)
  apply(simp add: F_SDPDA_EUME_def)
  apply(clarsimp)
  apply(rename_tac e x)(*strict*)
  apply(simp add: valid_simple_dpda_def)
  apply(clarsimp)
  apply(erule_tac
      x="x"
      in ballE)
   apply(rename_tac e x)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac e x)(*strict*)
  apply(simp add: F_SDPDA_EUME__edges_def)
  apply(case_tac "FB_executing_edge x")
   apply(rename_tac e x)(*strict*)
   apply(simp add: FB_executing_edge_def)
   apply(clarsimp)
   apply(rename_tac e x y)(*strict*)
   apply(erule disjE)
    apply(rename_tac e x y)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac e x y)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac e x)(*strict*)
  apply(clarsimp)
  apply(erule disjE)
   apply(rename_tac e x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac e x)(*strict*)
  apply(case_tac "edge_src x \<in> epda_marking G")
   apply(rename_tac e x)(*strict*)
   apply(clarsimp)
   apply(rename_tac x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac e x)(*strict*)
  apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  done

lemma F_DPDA_EUME__RL__configuration_preserves_epdaS_marking_configurations: "
  valid_epda G
  \<Longrightarrow> c \<in> epdaS_marking_configurations (F_SDPDA_EUME G)
  \<Longrightarrow> F_DPDA_EUME__RL__configuration c \<in> epdaS_marking_configurations G"
  apply(simp add: epdaS_marking_configurations_def F_DPDA_EUME__RL__configuration_def F_SDPDA_EUME_def epdaS_configurations_def valid_epda_def)
  apply(clarsimp)
  apply(rename_tac x s)(*strict*)
  apply(force)
  done

lemma F_SDPDA_EUME__preserves_lang2: "
  valid_simple_dpda G
  \<Longrightarrow> epdaS.marked_language G \<supseteq> epdaS.marked_language (F_SDPDA_EUME G)"
  apply(simp add: epdaS.marked_language_def)
  apply(clarsimp)
  apply(rename_tac x d)(*strict*)
  apply(rule_tac
      x="F_DPDA_EUME__RL__derivation d"
      in exI)
  apply(rule conjI)
   apply(rename_tac x d)(*strict*)
   apply (rule F_DPDA_EUME__RL__derivation_preserves_derivation_initial)
    apply(rename_tac x d)(*strict*)
    apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
   apply(rename_tac x d)(*strict*)
   apply(force)
  apply(rename_tac x d)(*strict*)
  apply(rule conjI)
   apply(rename_tac x d)(*strict*)
   apply(simp add: epdaS_marked_effect_def)
   apply(clarsimp)
   apply(rename_tac d c)(*strict*)
   apply(simp add: F_DPDA_EUME__RL__derivation_def F_DPDA_EUME__RL__configuration_def)
  apply(rename_tac x d)(*strict*)
  apply(rule conjI)
   apply(rename_tac x d)(*strict*)
   apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
   apply (metis F_DPDA_EUME__RL__derivation_preserves_derivation)
  apply(rename_tac x d)(*strict*)
  apply(simp add: epdaS_marking_condition_def)
  apply(clarsimp)
  apply(rename_tac x d i e c)(*strict*)
  apply(rule_tac
      x="i"
      in exI)
  apply(simp add: F_DPDA_EUME__RL__derivation_def)
  apply(rule F_DPDA_EUME__RL__configuration_preserves_epdaS_marking_configurations)
   apply(rename_tac x d i e c)(*strict*)
   apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
  apply(rename_tac x d i e c)(*strict*)
  apply(force)
  done

lemma F_DPDA_EUME__RL__derivation_preserves_derivation_REV: "
  valid_simple_dpda G
  \<Longrightarrow> epdaS.derivation G d
  \<Longrightarrow> maximum_of_domain d n
  \<Longrightarrow> \<exists>d'. epdaS.derivation (F_SDPDA_EUME G) d' \<and> F_DPDA_EUME__RL__derivation d' = d \<and> (epdaS.derivation_initial G d \<longrightarrow> epdaS.derivation_initial (F_SDPDA_EUME G) d')"
  apply(induct n arbitrary: d)
   apply(rename_tac d)(*strict*)
   apply(subgoal_tac "\<exists>c. d 0 = Some (pair None c)")
    apply(rename_tac d)(*strict*)
    apply(clarsimp)
    apply(rename_tac d c)(*strict*)
    apply(rule_tac
      x="der1 (F_DPDA_EUME__LR__configuration c cons_state_or_state_old)"
      in exI)
    apply(rule context_conjI)
     apply(rename_tac d c)(*strict*)
     apply(rule epdaS.der1_is_derivation)
    apply(rename_tac d c)(*strict*)
    apply(rule conjI)
     apply(rename_tac d c)(*strict*)
     apply(simp add: F_DPDA_EUME__RL__derivation_def der1_def)
     apply(rule ext)
     apply(rename_tac d c n)(*strict*)
     apply(clarsimp)
     apply(case_tac n)
      apply(rename_tac d c n)(*strict*)
      apply(clarsimp)
      apply(rename_tac d c)(*strict*)
      apply(simp add: F_DPDA_EUME__RL__configuration_def F_DPDA_EUME__LR__configuration_def)
     apply(rename_tac d c n nat)(*strict*)
     apply(clarsimp)
     apply(rename_tac d c nat)(*strict*)
     apply (metis Zero_not_Suc epdaS.derivation_take_id_prime_prime epdaS.maximum_of_domainUnique maximum_of_domain_derivation_take less_eq_nat.simps(1))
    apply(rename_tac d c)(*strict*)
    prefer 2
    apply(rename_tac d)(*strict*)
    apply (metis epdaS.some_position_has_details_at_0)
   apply(rename_tac d c)(*strict*)
   apply(clarsimp)
   apply(rule epdaS.derivation_initialI)
    apply(rename_tac d c)(*strict*)
    apply(force)
   apply(rename_tac d c)(*strict*)
   apply(clarsimp)
   apply(rename_tac d c ca)(*strict*)
   apply(simp add: get_configuration_def)
   apply(simp add: der1_def)
   apply(clarsimp)
   apply(rename_tac d c)(*strict*)
   apply(simp add: epdaS.derivation_initial_def)
   apply(simp add: epdaS_initial_configurations_def epdaS_configurations_def F_SDPDA_EUME_def F_DPDA_EUME__LR__configuration_def)
   apply(rule conjI)
    apply(rename_tac d c)(*strict*)
    apply(force)
   apply(rename_tac d c)(*strict*)
   apply(rule conjI)
    apply(rename_tac d c)(*strict*)
    apply(force)
   apply(rename_tac d c)(*strict*)
   apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def valid_epda_def)
  apply(rename_tac n d)(*strict*)
  apply(clarsimp)
  apply(erule_tac
      x="derivation_take d n"
      in meta_allE)
  apply(erule meta_impE)
   apply(rename_tac n d)(*strict*)
   apply (metis epdaS.derivation_take_preserves_derivation)
  apply(rename_tac n d)(*strict*)
  apply(erule meta_impE)
   apply(rename_tac n d)(*strict*)
   apply (metis diff_Suc_Suc diff_le_self epdaS.allPreMaxDomSome maximum_of_domain_derivation_take minus_nat.diff_0)
  apply(rename_tac n d)(*strict*)
  apply(clarsimp)
  apply(rename_tac n d d')(*strict*)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d n = Some (pair e1 c1) \<and> d (Suc n) = Some (pair (Some e2) c2) \<and> epdaS_step_relation G c1 e2 c2")
   apply(rename_tac n d d')(*strict*)
   prefer 2
   apply(rule_tac
      m="Suc n"
      in epdaS.step_detail_before_some_position)
     apply(rename_tac n d d')(*strict*)
     apply(force)
    apply(rename_tac n d d')(*strict*)
    apply(simp add: maximum_of_domain_def)
   apply(rename_tac n d d')(*strict*)
   apply(force)
  apply(rename_tac n d d')(*strict*)
  apply(clarsimp)
  apply(rename_tac n d d' e1 e2 c1 c2)(*strict*)
  apply(case_tac "FB_executing_edge e2")
   apply(rename_tac n d d' e1 e2 c1 c2)(*strict*)
   apply(case_tac "epdaS_conf_state (the(get_configuration(d' n)))")
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule_tac
      x="derivation_append d' (der2 (the (get_configuration (d' n))) (F_SDPDA_EUME__edge_annotation e2 cons_state_or_state_old cons_state_or_state_old) (F_DPDA_EUME__LR__configuration c2 cons_state_or_state_old)) n"
      in exI)
    apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n = derivation_take d n n")
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule_tac
      t="the (get_configuration (d' n))"
      and s="F_DPDA_EUME__LR__configuration c1 cons_state_or_state_old"
      in ssubst)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
     apply(simp add: F_DPDA_EUME__RL__derivation_def derivation_take_def)
     apply(case_tac "d' n")
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q a)(*strict*)
     apply(case_tac a)
     apply(rename_tac n d d' e1 e2 c1 c2 q a option b)(*strict*)
     apply(clarsimp)
     apply(rename_tac n d d' e2 c2 q option b)(*strict*)
     apply(simp add: get_configuration_def)
     apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule context_conjI)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(rule epdaS.derivation_append_preserves_derivation)
       apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      apply(rule epdaS.der2_is_derivation)
      apply(simp add: epdaS_step_relation_def F_SDPDA_EUME__edge_annotation_def F_DPDA_EUME__LR__configuration_def F_SDPDA_EUME_def)
      apply(clarsimp)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      apply(rule_tac
      x="e2"
      in bexI)
       apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
       prefer 2
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      apply(simp add: F_SDPDA_EUME__edges_def)
      apply(rule disjI1)
      apply(simp add: F_SDPDA_EUME__edge_annotation_def)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
     apply(simp add: derivation_take_def F_DPDA_EUME__RL__derivation_def)
     apply(case_tac "d' n")
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q a)(*strict*)
     apply(clarsimp)
     apply(case_tac a)
     apply(rename_tac n d d' e1 e2 c1 c2 q a option b)(*strict*)
     apply(clarsimp)
     apply(rename_tac n d d' e2 c2 q option b)(*strict*)
     apply(simp add: der2_def)
     apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def get_configuration_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule conjI)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     prefer 2
     apply(clarsimp)
     apply(rule epdaS.derivation_initialI)
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
     apply(simp add: derivation_append_def)
     apply(erule impE)
      apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
      apply(rule epdaS.derivation_take_preserves_derivation_initial)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
     apply(simp add: epdaS.derivation_initial_def)
     apply(case_tac "d 0")
      apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
      apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q c a)(*strict*)
     apply(clarsimp)
     apply(simp add: get_configuration_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule ext)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' x= derivation_take d n x")
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
    apply(simp add: F_DPDA_EUME__RL__derivation_def derivation_append_def)
    apply(rule conjI)
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     apply(clarsimp)
     apply(simp add: derivation_take_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(clarsimp)
    apply(simp add: der2_def)
    apply(case_tac "x-n=Suc 0")
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     apply(clarsimp)
     apply(simp add: derivation_take_def)
     apply(subgoal_tac "x=Suc n")
      apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
      prefer 2
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(simp add: F_DPDA_EUME__RL__configuration_def F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__edge_def F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(clarsimp)
    apply(case_tac "d x")
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
    apply(rule_tac
      m="x"
      in epdaS.no_some_beyond_maximum_of_domain)
       apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule_tac
      x="derivation_append d' (der2 (the (get_configuration (d' n))) (F_SDPDA_EUME__edge_annotation e2 cons_state_or_state_new cons_state_or_state_old) (F_DPDA_EUME__LR__configuration c2 cons_state_or_state_old)) n"
      in exI)
   apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n = derivation_take d n n")
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule_tac
      t="the (get_configuration (d' n))"
      and s="F_DPDA_EUME__LR__configuration c1 cons_state_or_state_new"
      in ssubst)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
    apply(simp add: F_DPDA_EUME__RL__derivation_def derivation_take_def)
    apply(case_tac "d' n")
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(clarsimp)
    apply(rename_tac n d d' e1 e2 c1 c2 q a)(*strict*)
    apply(case_tac a)
    apply(rename_tac n d d' e1 e2 c1 c2 q a option b)(*strict*)
    apply(clarsimp)
    apply(rename_tac n d d' e2 c2 q option b)(*strict*)
    apply(simp add: get_configuration_def)
    apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule context_conjI)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule epdaS.derivation_append_preserves_derivation)
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(rule epdaS.der2_is_derivation)
     apply(simp add: epdaS_step_relation_def F_SDPDA_EUME__edge_annotation_def F_DPDA_EUME__LR__configuration_def F_SDPDA_EUME_def)
     apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
     apply(rule_tac
      x="e2"
      in bexI)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      prefer 2
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
     apply(simp add: F_SDPDA_EUME__edges_def)
     apply(rule disjI2)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
    apply(simp add: derivation_take_def F_DPDA_EUME__RL__derivation_def)
    apply(case_tac "d' n")
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q a)(*strict*)
    apply(clarsimp)
    apply(case_tac a)
    apply(rename_tac n d d' e1 e2 c1 c2 q a option b)(*strict*)
    apply(clarsimp)
    apply(rename_tac n d d' e2 c2 q option b)(*strict*)
    apply(simp add: der2_def)
    apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def get_configuration_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule conjI)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    prefer 2
    apply(clarsimp)
    apply(rule epdaS.derivation_initialI)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(clarsimp)
    apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
    apply(simp add: derivation_append_def)
    apply(erule impE)
     apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
     apply(rule epdaS.derivation_take_preserves_derivation_initial)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
    apply(simp add: epdaS.derivation_initial_def)
    apply(case_tac "d 0")
     apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
     apply(clarsimp)
    apply(rename_tac n d d' e1 e2 c1 c2 q c a)(*strict*)
    apply(clarsimp)
    apply(simp add: get_configuration_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule ext)
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' x= derivation_take d n x")
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
   apply(simp add: F_DPDA_EUME__RL__derivation_def derivation_append_def)
   apply(rule conjI)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(clarsimp)
    apply(simp add: derivation_take_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(clarsimp)
   apply(simp add: der2_def)
   apply(case_tac "x-n=Suc 0")
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(clarsimp)
    apply(simp add: derivation_take_def)
    apply(subgoal_tac "x=Suc n")
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(clarsimp)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(simp add: F_DPDA_EUME__RL__configuration_def F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__edge_def F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(clarsimp)
   apply(case_tac "d x")
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
   apply(rule_tac
      m="x"
      in epdaS.no_some_beyond_maximum_of_domain)
      apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
   apply(force)
  apply(rename_tac n d d' e1 e2 c1 c2)(*strict*)
  apply(case_tac "epdaS_conf_state (the(get_configuration(d' n)))")
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(case_tac "q \<in> epda_marking G")
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule_tac
      x="derivation_append d' (der2 (the (get_configuration (d' n))) (F_SDPDA_EUME__edge_annotation e2 cons_state_or_state_old cons_state_or_state_new) (F_DPDA_EUME__LR__configuration c2 cons_state_or_state_new)) n"
      in exI)
    apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n = derivation_take d n n")
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule_tac
      t="the (get_configuration (d' n))"
      and s="F_DPDA_EUME__LR__configuration c1 cons_state_or_state_old"
      in ssubst)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
     apply(simp add: F_DPDA_EUME__RL__derivation_def derivation_take_def)
     apply(case_tac "d' n")
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q a)(*strict*)
     apply(case_tac a)
     apply(rename_tac n d d' e1 e2 c1 c2 q a option b)(*strict*)
     apply(clarsimp)
     apply(rename_tac n d d' e2 c2 q option b)(*strict*)
     apply(simp add: get_configuration_def)
     apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule context_conjI)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(rule epdaS.derivation_append_preserves_derivation)
       apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      apply(rule epdaS.der2_is_derivation)
      apply(simp add: epdaS_step_relation_def F_SDPDA_EUME__edge_annotation_def F_DPDA_EUME__LR__configuration_def F_SDPDA_EUME_def)
      apply(clarsimp)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      apply(rule_tac
      x="e2"
      in bexI)
       apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
       prefer 2
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      apply(simp add: F_SDPDA_EUME__edges_def)
      apply(rule conjI)
       apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
       apply(rule impI)
       apply(rule disjI2)
       apply(simp add: F_SDPDA_EUME__edge_annotation_def)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      apply(rule impI)
      apply(subgoal_tac "False")
       apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n= derivation_take d n n")
       apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
       prefer 2
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
      apply(simp add: derivation_take_def F_DPDA_EUME__RL__derivation_def)
      apply(case_tac "d' n")
       apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q w a)(*strict*)
      apply(clarsimp)
      apply(case_tac a)
      apply(rename_tac n d d' e1 e2 c1 c2 q w a option b)(*strict*)
      apply(clarsimp)
      apply(rename_tac n d d' e2 c2 q w option b)(*strict*)
      apply(simp add: get_configuration_def)
      apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def get_configuration_def)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n= derivation_take d n n")
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      prefer 2
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
     apply(clarsimp)
     apply(simp add: derivation_take_def F_DPDA_EUME__RL__derivation_def)
     apply(case_tac "d' n")
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q a)(*strict*)
     apply(clarsimp)
     apply(case_tac a)
     apply(rename_tac n d d' e1 e2 c1 c2 q a option b)(*strict*)
     apply(clarsimp)
     apply(rename_tac n d d' e2 c2 q option b)(*strict*)
     apply(simp add: get_configuration_def)
     apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def get_configuration_def der2_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule conjI)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     prefer 2
     apply(clarsimp)
     apply(rule epdaS.derivation_initialI)
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
     apply(simp add: derivation_append_def)
     apply(erule impE)
      apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
      apply(rule epdaS.derivation_take_preserves_derivation_initial)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
     apply(simp add: epdaS.derivation_initial_def)
     apply(case_tac "d 0")
      apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
      apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q c a)(*strict*)
     apply(clarsimp)
     apply(simp add: get_configuration_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule ext)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' x= derivation_take d n x")
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
    apply(simp add: F_DPDA_EUME__RL__derivation_def derivation_append_def)
    apply(rule conjI)
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     apply(clarsimp)
     apply(simp add: derivation_take_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(clarsimp)
    apply(simp add: der2_def)
    apply(case_tac "x-n=Suc 0")
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     apply(clarsimp)
     apply(simp add: derivation_take_def)
     apply(subgoal_tac "x=Suc n")
      apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
      prefer 2
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(simp add: F_DPDA_EUME__RL__configuration_def F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__edge_def F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(clarsimp)
    apply(case_tac "d x")
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
    apply(rule_tac
      m="x"
      in epdaS.no_some_beyond_maximum_of_domain)
       apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule_tac
      x="derivation_append d' (der2 (the (get_configuration (d' n))) (F_SDPDA_EUME__edge_annotation e2 cons_state_or_state_old cons_state_or_state_old) (F_DPDA_EUME__LR__configuration c2 cons_state_or_state_old)) n"
      in exI)
   apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n = derivation_take d n n")
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule_tac
      t="the (get_configuration (d' n))"
      and s="F_DPDA_EUME__LR__configuration c1 cons_state_or_state_old"
      in ssubst)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
    apply(simp add: F_DPDA_EUME__RL__derivation_def derivation_take_def)
    apply(case_tac "d' n")
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(clarsimp)
    apply(rename_tac n d d' e1 e2 c1 c2 q a)(*strict*)
    apply(case_tac a)
    apply(rename_tac n d d' e1 e2 c1 c2 q a option b)(*strict*)
    apply(clarsimp)
    apply(rename_tac n d d' e2 c2 q option b)(*strict*)
    apply(simp add: get_configuration_def)
    apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule context_conjI)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule epdaS.derivation_append_preserves_derivation)
      apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(rule epdaS.der2_is_derivation)
     apply(simp add: epdaS_step_relation_def F_SDPDA_EUME__edge_annotation_def F_DPDA_EUME__LR__configuration_def F_SDPDA_EUME_def)
     apply(clarsimp)
     apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
     apply(rule_tac
      x="e2"
      in bexI)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      prefer 2
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
     apply(simp add: F_SDPDA_EUME__edges_def)
     apply(rule conjI)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      apply(rule impI)
      apply(subgoal_tac "False")
       apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n= derivation_take d n n")
       apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
       prefer 2
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
      apply(simp add: derivation_take_def F_DPDA_EUME__RL__derivation_def)
      apply(case_tac "d' n")
       apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
       apply(force)
      apply(rename_tac n d d' e1 e2 c1 c2 q w a)(*strict*)
      apply(clarsimp)
      apply(case_tac a)
      apply(rename_tac n d d' e1 e2 c1 c2 q w a option b)(*strict*)
      apply(clarsimp)
      apply(rename_tac n d d' e2 c2 q w option b)(*strict*)
      apply(simp add: get_configuration_def)
      apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def get_configuration_def)
     apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
     apply(rule impI)
     apply(rule disjI2)
     apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n= derivation_take d n n")
      apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
      prefer 2
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
     apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n= derivation_take d n n")
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
    apply(clarsimp)
    apply(simp add: derivation_take_def F_DPDA_EUME__RL__derivation_def)
    apply(case_tac "d' n")
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(clarsimp)
    apply(rename_tac n d d' e1 e2 c1 c2 q a)(*strict*)
    apply(clarsimp)
    apply(case_tac a)
    apply(rename_tac n d d' e1 e2 c1 c2 q a option b)(*strict*)
    apply(clarsimp)
    apply(rename_tac n d d' e2 c2 q option b)(*strict*)
    apply(simp add: get_configuration_def)
    apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def get_configuration_def der2_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule conjI)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    prefer 2
    apply(clarsimp)
    apply(rule epdaS.derivation_initialI)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(clarsimp)
    apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
    apply(simp add: derivation_append_def)
    apply(erule impE)
     apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
     apply(rule epdaS.derivation_take_preserves_derivation_initial)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
    apply(simp add: epdaS.derivation_initial_def)
    apply(case_tac "d 0")
     apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
     apply(clarsimp)
    apply(rename_tac n d d' e1 e2 c1 c2 q c a)(*strict*)
    apply(clarsimp)
    apply(simp add: get_configuration_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule ext)
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' x= derivation_take d n x")
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
   apply(simp add: F_DPDA_EUME__RL__derivation_def derivation_append_def)
   apply(rule conjI)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(clarsimp)
    apply(simp add: derivation_take_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(clarsimp)
   apply(simp add: der2_def)
   apply(case_tac "x-n=Suc 0")
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(clarsimp)
    apply(simp add: derivation_take_def)
    apply(subgoal_tac "x=Suc n")
     apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(clarsimp)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(simp add: F_DPDA_EUME__RL__configuration_def F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__edge_def F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(clarsimp)
   apply(case_tac "d x")
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
   apply(rule_tac
      m="x"
      in epdaS.no_some_beyond_maximum_of_domain)
      apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
      apply(force)
     apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
   apply(force)
  apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
  apply(rule_tac
      x="derivation_append d' (der2 (the (get_configuration (d' n))) (F_SDPDA_EUME__edge_annotation e2 cons_state_or_state_new cons_state_or_state_new) (F_DPDA_EUME__LR__configuration c2 cons_state_or_state_new)) n"
      in exI)
  apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n = derivation_take d n n")
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
  apply(rule_tac
      t="the (get_configuration (d' n))"
      and s="F_DPDA_EUME__LR__configuration c1 cons_state_or_state_new"
      in ssubst)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
   apply(simp add: F_DPDA_EUME__RL__derivation_def derivation_take_def)
   apply(case_tac "d' n")
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(clarsimp)
   apply(rename_tac n d d' e1 e2 c1 c2 q a)(*strict*)
   apply(case_tac a)
   apply(rename_tac n d d' e1 e2 c1 c2 q a option b)(*strict*)
   apply(clarsimp)
   apply(rename_tac n d d' e2 c2 q option b)(*strict*)
   apply(simp add: get_configuration_def)
   apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def)
  apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
  apply(rule context_conjI)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(rule epdaS.derivation_append_preserves_derivation)
     apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(rule epdaS.der2_is_derivation)
    apply(simp add: epdaS_step_relation_def F_SDPDA_EUME__edge_annotation_def F_DPDA_EUME__LR__configuration_def F_SDPDA_EUME_def)
    apply(clarsimp)
    apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
    apply(rule_tac
      x="e2"
      in bexI)
     apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
     prefer 2
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
    apply(simp add: F_SDPDA_EUME__edges_def)
    apply(subgoal_tac "\<lparr>edge_src = cons_state_or_state_new (edge_src e2), edge_event = edge_event e2, edge_pop = edge_pop e2, edge_push = edge_push e2, edge_trg = cons_state_or_state_new (edge_trg e2)\<rparr> = F_SDPDA_EUME__edge_annotation e2 cons_state_or_state_new cons_state_or_state_new")
     apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q w)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' n= derivation_take d n n")
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
   apply(clarsimp)
   apply(simp add: derivation_take_def F_DPDA_EUME__RL__derivation_def)
   apply(case_tac "d' n")
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(clarsimp)
   apply(rename_tac n d d' e1 e2 c1 c2 q a)(*strict*)
   apply(clarsimp)
   apply(case_tac a)
   apply(rename_tac n d d' e1 e2 c1 c2 q a option b)(*strict*)
   apply(clarsimp)
   apply(rename_tac n d d' e2 c2 q option b)(*strict*)
   apply(simp add: get_configuration_def)
   apply(simp add: F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__configuration_def get_configuration_def der2_def)
  apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
  apply(rule conjI)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   prefer 2
   apply(clarsimp)
   apply(rule epdaS.derivation_initialI)
    apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(clarsimp)
   apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
   apply(simp add: derivation_append_def)
   apply(erule impE)
    apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
    apply(rule epdaS.derivation_take_preserves_derivation_initial)
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
   apply(simp add: epdaS.derivation_initial_def)
   apply(case_tac "d 0")
    apply(rename_tac n d d' e1 e2 c1 c2 q c)(*strict*)
    apply(clarsimp)
   apply(rename_tac n d d' e1 e2 c1 c2 q c a)(*strict*)
   apply(clarsimp)
   apply(simp add: get_configuration_def)
  apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
  apply(rule ext)
  apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
  apply(subgoal_tac "F_DPDA_EUME__RL__derivation d' x= derivation_take d n x")
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
  apply(thin_tac "F_DPDA_EUME__RL__derivation d' = derivation_take d n")
  apply(simp add: F_DPDA_EUME__RL__derivation_def derivation_append_def)
  apply(rule conjI)
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(clarsimp)
   apply(simp add: derivation_take_def)
  apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
  apply(clarsimp)
  apply(simp add: der2_def)
  apply(case_tac "x-n=Suc 0")
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(clarsimp)
   apply(simp add: derivation_take_def)
   apply(subgoal_tac "x=Suc n")
    apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
    prefer 2
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(clarsimp)
   apply(rename_tac n d d' e1 e2 c1 c2 q)(*strict*)
   apply(simp add: F_DPDA_EUME__RL__configuration_def F_DPDA_EUME__LR__configuration_def F_DPDA_EUME__RL__edge_def F_SDPDA_EUME__edge_annotation_def )
  apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
  apply(clarsimp)
  apply(case_tac "d x")
   apply(rename_tac n d d' e1 e2 c1 c2 q x)(*strict*)
   apply(force)
  apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
  apply(rule_tac
      m="x"
      in epdaS.no_some_beyond_maximum_of_domain)
     apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
     apply(force)
    apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
    apply(force)
   apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
   prefer 2
   apply(force)
  apply(rename_tac n d d' e1 e2 c1 c2 q x a)(*strict*)
  apply(force)
  done

lemma F_SDPDA_EUME__old_state_has_accepting_new_state_predecessor: "
  valid_simple_dpda G
  \<Longrightarrow> epdaS.derivation_initial (F_SDPDA_EUME G) d
  \<Longrightarrow> d n = Some (pair e c)
  \<Longrightarrow> epdaS_conf_state c = cons_state_or_state_new q
  \<Longrightarrow> \<exists>k<n. \<exists>e' c'. d k = Some (pair e' c') \<and> epdaS_conf_scheduler c = epdaS_conf_scheduler c' \<and> epdaS_conf_state c' \<in> epda_marking (F_SDPDA_EUME G)"
  apply(induct n arbitrary: e c q)
   apply(rename_tac e c q)(*strict*)
   apply(clarsimp)
   apply(simp add: epdaS.derivation_initial_def)
   apply(simp add: F_SDPDA_EUME_def epdaS_initial_configurations_def)
  apply(rename_tac n e c q)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d n = Some (pair e1 c1) \<and> d (Suc n) = Some (pair (Some e2) c2) \<and> epdaS_step_relation (F_SDPDA_EUME G) c1 e2 c2")
   apply(rename_tac n e c q)(*strict*)
   prefer 2
   apply(rule_tac
      m="Suc n"
      in epdaS.step_detail_before_some_position)
     apply(rename_tac n e c q)(*strict*)
     apply (metis epdaS.derivation_initial_is_derivation)
    apply(rename_tac n e c q)(*strict*)
    apply(force)
   apply(rename_tac n e c q)(*strict*)
   apply(force)
  apply(rename_tac n e c q)(*strict*)
  apply(clarsimp)
  apply(rename_tac n c q e1 e2 c1)(*strict*)
  apply(erule_tac
      x="e1"
      in meta_allE)
  apply(erule_tac
      x="c1"
      in meta_allE)
  apply(clarsimp)
  apply(case_tac "epdaS_conf_state c1")
   apply(rename_tac n c q e1 e2 c1 qa)(*strict*)
   apply(clarsimp)
   apply(rename_tac n c q e1 e2 c1 qa)(*strict*)
   apply(rule_tac
      x="n"
      in exI)
   apply(clarsimp)
   apply(simp add: epdaS_step_relation_def)
   apply(clarsimp)
   apply(rename_tac n c q e1 e2 c1 qa w)(*strict*)
   apply(simp add: F_SDPDA_EUME_def)
   apply(clarsimp)
   apply(rename_tac n c q e1 e2 c1 qa w x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edges_def)
   apply(case_tac "FB_executing_edge x")
    apply(rename_tac n c q e1 e2 c1 qa w x)(*strict*)
    apply(simp add: FB_executing_edge_def)
    apply(clarsimp)
    apply(rename_tac n c q e1 e2 c1 qa w x y)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(force)
   apply(rename_tac n c q e1 e2 c1 qa w x)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac n c q e1 e2 c1 qa w x)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac n c q e1 e2 c1 qa w x)(*strict*)
   apply(case_tac "edge_src x \<in> epda_marking G")
    apply(rename_tac n c q e1 e2 c1 qa w x)(*strict*)
    apply(clarsimp)
    apply(rename_tac n c q e1 c1 qa w x)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(simp add: FB_executing_edge_def option_to_list_def)
   apply(rename_tac n c q e1 e2 c1 qa w x)(*strict*)
   apply(clarsimp)
   apply(rename_tac n c q e1 c1 qa w x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac n c q e1 e2 c1 qa)(*strict*)
  apply(erule_tac
      x="qa"
      in meta_allE)
  apply(clarsimp)
  apply(rename_tac n c q e1 e2 c1 qa k e' c')(*strict*)
  apply(rule_tac
      x="k"
      in exI)
  apply(clarsimp)
  apply(simp add: epdaS_step_relation_def)
  apply(clarsimp)
  apply(rename_tac n c q e1 e2 c1 qa k e' c' w)(*strict*)
  apply(simp add: F_SDPDA_EUME_def)
  apply(clarsimp)
  apply(rename_tac n c q e1 e2 c1 qa k e' c' w x xa)(*strict*)
  apply(simp add: F_SDPDA_EUME__edges_def)
  apply(case_tac "FB_executing_edge xa")
   apply(rename_tac n c q e1 e2 c1 qa k e' c' w x xa)(*strict*)
   apply(simp add: FB_executing_edge_def)
   apply(clarsimp)
   apply(rename_tac n c q e1 e2 c1 qa k e' c' w x xa y)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(force)
  apply(rename_tac n c q e1 e2 c1 qa k e' c' w x xa)(*strict*)
  apply(clarsimp)
  apply(erule disjE)
   apply(rename_tac n c q e1 e2 c1 qa k e' c' w x xa)(*strict*)
   apply(clarsimp)
   apply(rename_tac n c q e1 c1 qa k e' c' w x xa)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(simp add: FB_executing_edge_def option_to_list_def)
  apply(rename_tac n c q e1 e2 c1 qa k e' c' w x xa)(*strict*)
  apply(case_tac "edge_src xa \<in> epda_marking G")
   apply(rename_tac n c q e1 e2 c1 qa k e' c' w x xa)(*strict*)
   apply(clarsimp)
   apply(rename_tac n c q e1 c1 qa k e' c' w x xa)(*strict*)
   apply(simp add: FB_executing_edge_def option_to_list_def F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac n c q e1 e2 c1 qa k e' c' w x xa)(*strict*)
  apply(simp add: FB_executing_edge_def option_to_list_def F_SDPDA_EUME__edge_annotation_def)
  done

lemma F_SDPDA_EUME__preserves_lang1: "
  valid_simple_dpda G
  \<Longrightarrow> epdaS.marked_language G \<subseteq> epdaS.marked_language (F_SDPDA_EUME G)"
  apply(rule_tac
      t="epdaS.marked_language G"
      and s="epdaS.finite_marked_language G"
      in subst)
   apply(rule epdaS.AX_marked_language_finite)
   apply (simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
  apply(rule_tac
      t="epdaS.marked_language (F_SDPDA_EUME G)"
      and s="epdaS.finite_marked_language (F_SDPDA_EUME G)"
      in subst)
   apply(rule epdaS.AX_marked_language_finite)
   apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
   apply (metis F_SDPDA_EUME__preserves_epda)
  apply(simp add: epdaS.finite_marked_language_def)
  apply(clarsimp)
  apply(rename_tac x d n)(*strict*)
  apply(simp add: epdaS_marking_condition_def)
  apply(clarsimp)
  apply(rename_tac x d n i e c)(*strict*)
  apply(subgoal_tac "\<exists>d'. epdaS.derivation (F_SDPDA_EUME G) d' \<and> F_DPDA_EUME__RL__derivation d' = d \<and> (epdaS.derivation_initial G d \<longrightarrow> epdaS.derivation_initial (F_SDPDA_EUME G) d')")
   apply(rename_tac x d n i e c)(*strict*)
   prefer 2
   apply(rule F_DPDA_EUME__RL__derivation_preserves_derivation_REV)
     apply(rename_tac x d n i e c)(*strict*)
     apply(force)+
    apply(rename_tac x d n i e c)(*strict*)
    apply (metis epdaS.derivation_initial_is_derivation)
   apply(rename_tac x d n i e c)(*strict*)
   apply(force)
  apply(rename_tac x d n i e c)(*strict*)
  apply(clarsimp)
  apply(rename_tac x n i e c d')(*strict*)
  apply(rule_tac
      x="d'"
      in exI)
  apply(rule conjI)
   apply(rename_tac x n i e c d')(*strict*)
   apply(rule epdaS.derivation_initialI)
    apply(rename_tac x n i e c d')(*strict*)
    apply(force)
   apply(rename_tac x n i e c d')(*strict*)
   apply(clarsimp)
   apply(rename_tac x n i e c d' ca)(*strict*)
   apply(simp add: get_configuration_def)
   apply(simp add: epdaS.derivation_initial_def)
  apply(rename_tac x n i e c d')(*strict*)
  apply(rule conjI)
   apply(rename_tac x n i e c d')(*strict*)
   apply(simp add: epdaS_marked_effect_def F_DPDA_EUME__RL__derivation_def)
   apply(clarsimp)
   apply(rename_tac n i e c d' ca)(*strict*)
   apply(case_tac "d' 0")
    apply(rename_tac n i e c d' ca)(*strict*)
    apply(clarsimp)
   apply(rename_tac n i e c d' ca a)(*strict*)
   apply(clarsimp)
   apply(case_tac a)
   apply(rename_tac n i e c d' ca a option b)(*strict*)
   apply(clarsimp)
   apply(rename_tac n i e c d' option b)(*strict*)
   apply(case_tac option)
    apply(rename_tac n i e c d' option b)(*strict*)
    apply(clarsimp)
    apply(rename_tac n i e c d' b)(*strict*)
    prefer 2
    apply(rename_tac n i e c d' option b a)(*strict*)
    apply(clarsimp)
   apply(rename_tac n i e c d' b)(*strict*)
   apply(simp add: F_DPDA_EUME__RL__configuration_def)
  apply(rename_tac x n i e c d')(*strict*)
  apply(rule conjI)
   apply(rename_tac x n i e c d')(*strict*)
   prefer 2
   apply(rule_tac
      x="n"
      in exI)
   apply(simp add: maximum_of_domain_def F_DPDA_EUME__RL__derivation_def)
   apply(clarsimp)
   apply(rename_tac x n i e c d' y)(*strict*)
   apply(rule conjI)
    apply(rename_tac x n i e c d' y)(*strict*)
    prefer 2
    apply(case_tac "d'(Suc n)")
     apply(rename_tac x n i e c d' y)(*strict*)
     apply(force)
    apply(rename_tac x n i e c d' y a)(*strict*)
    apply(clarsimp)
    apply(case_tac a)
    apply(rename_tac x n i e c d' y a option b)(*strict*)
    apply(clarsimp)
   apply(rename_tac x n i e c d' y)(*strict*)
   apply(case_tac "d' n")
    apply(rename_tac x n i e c d' y)(*strict*)
    apply(force)
   apply(rename_tac x n i e c d' y a)(*strict*)
   apply(clarsimp)
  apply(rename_tac x n i e c d')(*strict*)
  apply(thin_tac "x \<in> epdaS_marked_effect G (F_DPDA_EUME__RL__derivation d')")
  apply(subgoal_tac "\<exists>e c. d' i = Some (pair e c)")
   apply(rename_tac x n i e c d')(*strict*)
   prefer 2
   apply(simp add: F_DPDA_EUME__RL__derivation_def)
   apply(rename_tac n i e c d')(*strict*)
   apply(case_tac "d' i")
    apply(rename_tac n i e c d')(*strict*)
    apply(clarsimp)
   apply(rename_tac n i e c d' a)(*strict*)
   apply(clarsimp)
   apply(case_tac a)
   apply(rename_tac n i e c d' a option b)(*strict*)
   apply(force)
  apply(rename_tac x n i e c d')(*strict*)
  apply(clarsimp)
  apply(rename_tac n i e c d' ea ca)(*strict*)
  apply(case_tac "epdaS_conf_state ca")
   apply(rename_tac n i e c d' ea ca q)(*strict*)
   prefer 2
   apply(rename_tac n i e c d' ea ca state)(*strict*)
   apply(subgoal_tac "\<exists>k<i. \<exists>e' c'. d' k = Some (pair e' c') \<and> epdaS_conf_scheduler ca=epdaS_conf_scheduler c' \<and> epdaS_conf_state c' \<in> epda_marking (F_SDPDA_EUME G)")
    apply(rename_tac n i e c d' ea ca q)(*strict*)
    prefer 2
    apply(rename_tac n i e c d' ea ca state)(*strict*)
    apply(rule F_SDPDA_EUME__old_state_has_accepting_new_state_predecessor)
       apply(rename_tac n i e c d' ea ca q)(*strict*)
       apply(force)
      apply(rename_tac n i e c d' ea ca q)(*strict*)
      apply(force)
     apply(rename_tac n i e c d' ea ca q)(*strict*)
     apply(force)
    apply(rename_tac n i e c d' ea ca q)(*strict*)
    apply(force)
   apply(rename_tac n i e c d' ea ca q)(*strict*)
   apply(clarsimp)
   apply(rename_tac n i e c d' ea ca q k e' c')(*strict*)
   apply(rule_tac
      x="k"
      in exI)
   apply(clarsimp)
   apply(simp add: F_DPDA_EUME__RL__configuration_def epdaS_marking_configurations_def)
   apply(clarsimp)
   apply(rule conjI)
    apply(rename_tac n i e c d' ea ca q k e' c')(*strict*)
    apply(simp add: F_DPDA_EUME__RL__derivation_def F_DPDA_EUME__RL__configuration_def)
    apply(clarsimp)
   apply(rename_tac n i e c d' ea ca q k e' c')(*strict*)
   apply(rule epdaS.belongs_configurations)
    apply(rename_tac n i e c d' ea ca q k e' c')(*strict*)
    apply(rule epdaS.derivation_initial_belongs)
     apply(rename_tac n i e c d' ea ca q k e' c')(*strict*)
     apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
     apply (metis F_SDPDA_EUME__preserves_epda)
    apply(rename_tac n i e c d' ea ca q k e' c')(*strict*)
    apply(force)
   apply(rename_tac n i e c d' ea ca q k e' c')(*strict*)
   apply(force)
  apply(rename_tac n i e c d' ea ca q)(*strict*)
  apply(rule_tac
      x="i"
      in exI)
  apply(clarsimp)
  apply(simp add: F_DPDA_EUME__RL__configuration_def epdaS_marking_configurations_def)
  apply(clarsimp)
  apply(rule conjI)
   apply(rename_tac n i e c d' ea ca q)(*strict*)
   apply(simp add: F_DPDA_EUME__RL__derivation_def F_DPDA_EUME__RL__configuration_def)
   apply(case_tac c)
   apply(rename_tac n i e c d' ea ca q epdaS_conf_statea epdaS_conf_schedulera epdaS_conf_stacka)(*strict*)
   apply(force)
  apply(rename_tac n i e c d' ea ca q)(*strict*)
  apply(subgoal_tac "ca \<in> epdaS_configurations (F_SDPDA_EUME G)")
   apply(rename_tac n i e c d' ea ca q)(*strict*)
   apply(clarsimp)
   apply(simp add: epdaS_configurations_def)
   apply(clarsimp)
   apply(rename_tac n i e d' ea q qa ib s sa)(*strict*)
   apply(simp add: F_SDPDA_EUME_def F_DPDA_EUME__RL__derivation_def F_DPDA_EUME__RL__configuration_def)
  apply(rename_tac n i e c d' ea ca q)(*strict*)
  apply(rule epdaS.belongs_configurations)
   apply(rename_tac n i e c d' ea ca q)(*strict*)
   apply(rule epdaS.derivation_initial_belongs)
    apply(rename_tac n i e c d' ea ca q)(*strict*)
    apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
    apply (metis F_SDPDA_EUME__preserves_epda)
   apply(rename_tac n i e c d' ea ca q)(*strict*)
   apply(force)
  apply(rename_tac n i e c d' ea ca q)(*strict*)
  apply(force)
  done

theorem F_SDPDA_EUME__preserves_lang: "
  valid_simple_dpda G
  \<Longrightarrow> epdaS.marked_language G = epdaS.marked_language (F_SDPDA_EUME G)"
  apply(rule order_antisym)
   apply (metis F_SDPDA_EUME__preserves_lang1)
  apply (metis F_SDPDA_EUME__preserves_lang2)
  done

lemma F_SDPDA_EUME__from_new_to_old_must_read: "
  valid_simple_dpda G
  \<Longrightarrow> epdaS.derivation_initial (F_SDPDA_EUME G) d
  \<Longrightarrow> d i = Some (pair e c)
  \<Longrightarrow> d (i+j) = Some (pair e' c')
  \<Longrightarrow> epdaS_conf_state c = cons_state_or_state_new q
  \<Longrightarrow> epdaS_conf_state c' = cons_state_or_state_old q'
  \<Longrightarrow> epdaS_conf_scheduler c \<noteq> epdaS_conf_scheduler c'"
  apply(subgoal_tac "\<exists>k\<le>SSn. (\<forall>i<k. \<not> SSP i) \<and> SSP k" for SSn SSP)
   prefer 2
   apply(rule_tac
      n="j"
      and P="\<lambda>k. \<exists>q. epdaS_conf_state(the(get_configuration(d (i+j-k))))=cons_state_or_state_new q"
      in ex_least_nat_le_prime)
   apply(simp add: get_configuration_def)
  apply(clarsimp)
  apply(rename_tac k qa)(*strict*)
  apply(subgoal_tac "\<exists>n. k+n=j")
   apply(rename_tac k qa)(*strict*)
   prefer 2
   apply (metis le_iff_add)
  apply(rename_tac k qa)(*strict*)
  apply(clarsimp)
  apply(rename_tac k qa n)(*strict*)
  apply(case_tac k)
   apply(rename_tac k qa n)(*strict*)
   apply(clarsimp)
   apply(rename_tac qa n)(*strict*)
   apply(simp add: get_configuration_def)
  apply(rename_tac k qa n nat)(*strict*)
  apply(clarsimp)
  apply(rename_tac qa n nat)(*strict*)
  apply(erule_tac
      x="nat"
      in allE)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>e c. d (Suc (i+n)) = Some (pair (Some e) c)")
   apply(rename_tac qa n nat)(*strict*)
   prefer 2
   apply(rule_tac
      m="Suc (i + (nat + n))"
      in epdaS.pre_some_position_is_some_position_prime)
      apply(rename_tac qa n nat)(*strict*)
      apply(rule epdaS.derivation_initial_is_derivation)
      apply(force)
     apply(rename_tac qa n nat)(*strict*)
     apply(force)
    apply(rename_tac qa n nat)(*strict*)
    apply(force)
   apply(rename_tac qa n nat)(*strict*)
   apply(force)
  apply(rename_tac qa n nat)(*strict*)
  apply(subgoal_tac "\<exists>e c. d ((i+n)) = Some (pair e c)")
   apply(rename_tac qa n nat)(*strict*)
   prefer 2
   apply(rule_tac
      m="Suc (i + (nat + n))"
      in epdaS.pre_some_position_is_some_position)
     apply(rename_tac qa n nat)(*strict*)
     apply(rule epdaS.derivation_initial_is_derivation)
     apply(force)
    apply(rename_tac qa n nat)(*strict*)
    apply(force)
   apply(rename_tac qa n nat)(*strict*)
   apply(force)
  apply(rename_tac qa n nat)(*strict*)
  apply(clarsimp)
  apply(rename_tac qa n nat ea eaa ca caa)(*strict*)
  apply(simp add: get_configuration_def)
  apply(case_tac "epdaS_conf_state ca")
   apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
   prefer 2
   apply(rename_tac qa n nat ea eaa ca caa state)(*strict*)
   apply(force)
  apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "epdaS_conf_scheduler caa = epdaS_conf_scheduler ca")
   apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
   prefer 2
   apply(subgoal_tac "\<exists>w. epdaS_string_state c = w @ epdaS_string_state caa")
    apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
    prefer 2
    apply(rule_tac
      j="n"
      and P="F_SDPDA_EUME G"
      in epdaS.derivation_monotonically_dec)
         apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
         apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
         apply (metis F_SDPDA_EUME__preserves_epda)
        apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
        apply(force)
       apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
       apply(rule epdaS.derivation_initial_belongs)
        apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
        apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
        apply (metis F_SDPDA_EUME__preserves_epda)
       apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
       apply(force)
      apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
      apply(rule epdaS.derivation_initial_is_derivation)
      apply(force)
     apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
     apply(force)
    apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
    apply(force)
   apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
   apply(subgoal_tac "\<exists>w. epdaS_string_state caa = w @ epdaS_string_state ca")
    apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
    prefer 2
    apply(rule_tac
      j="Suc 0"
      and P="F_SDPDA_EUME G"
      in epdaS.derivation_monotonically_dec)
         apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
         apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
         apply (metis F_SDPDA_EUME__preserves_epda)
        apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
        apply(force)
       apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
       apply(rule epdaS.derivation_initial_belongs)
        apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
        apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
        apply (metis F_SDPDA_EUME__preserves_epda)
       apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
       apply(force)
      apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
      apply(rule epdaS.derivation_initial_is_derivation)
      apply(force)
     apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
     apply(force)
    apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
    apply(force)
   apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
   apply(subgoal_tac "\<exists>w. epdaS_string_state ca = w @ epdaS_string_state c'")
    apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
    prefer 2
    apply(rule_tac
      j="nat"
      and P="F_SDPDA_EUME G"
      in epdaS.derivation_monotonically_dec)
         apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
         apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
         apply (metis F_SDPDA_EUME__preserves_epda)
        apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
        apply(force)
       apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
       apply(rule epdaS.derivation_initial_belongs)
        apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
        apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
        apply (metis F_SDPDA_EUME__preserves_epda)
       apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
       apply(force)
      apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
      apply(rule epdaS.derivation_initial_is_derivation)
      apply(force)
     apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
     apply(force)
    apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
    apply(rule_tac
      t="Suc (i + n) + nat"
      and s="Suc (i + (nat + n))"
      in ssubst)
     apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
     apply(force)
    apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
    apply(force)
   apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
   apply(clarsimp)
   apply(rename_tac qa n nat ea eaa ca caa qaa w wa wb)(*strict*)
   apply(simp add: epdaS_string_state_def)
  apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d (i+n) = Some (pair e1 c1) \<and> d (Suc (i+n)) = Some (pair (Some e2) c2) \<and> epdaS_step_relation (F_SDPDA_EUME G) c1 e2 c2")
   apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
   prefer 2
   apply(rule_tac
      m="Suc (i+n)"
      in epdaS.step_detail_before_some_position)
     apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
     apply(rule epdaS.derivation_initial_is_derivation)
     apply(force)
    apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
    apply(force)
   apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
   apply(force)
  apply(rename_tac qa n nat ea eaa ca caa qaa)(*strict*)
  apply(clarsimp)
  apply(simp add: epdaS_step_relation_def)
  apply(clarsimp)
  apply(rename_tac qa n nat ea eaa ca caa qaa w)(*strict*)
  apply(simp add: F_SDPDA_EUME_def F_SDPDA_EUME__edges_def)
  apply(clarsimp)
  apply(erule disjE)
   apply(rename_tac qa n nat ea eaa ca caa qaa w)(*strict*)
   apply(clarsimp)
   apply(rename_tac qa n nat ea eaa ca caa qaa w x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(erule disjE)
    apply(rename_tac qa n nat ea eaa ca caa qaa w x)(*strict*)
    apply(clarsimp)
   apply(rename_tac qa n nat ea eaa ca caa qaa w x)(*strict*)
   apply(clarsimp)
   apply(rename_tac n nat ea ca caa w x)(*strict*)
   apply(simp add: FB_executing_edge_def option_to_list_def)
   apply(clarsimp)
  apply(rename_tac qa n nat ea eaa ca caa qaa w)(*strict*)
  apply(clarsimp)
  apply(rename_tac qa n nat ea eaa ca caa qaa w x)(*strict*)
  apply(erule disjE)
   apply(rename_tac qa n nat ea eaa ca caa qaa w x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac qa n nat ea eaa ca caa qaa w x)(*strict*)
  apply(case_tac "edge_src x \<in> epda_marking G")
   apply(rename_tac qa n nat ea eaa ca caa qaa w x)(*strict*)
   apply(clarsimp)
   apply(rename_tac qa n nat ea ca caa qaa w x)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac qa n nat ea eaa ca caa qaa w x)(*strict*)
  apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  done

theorem F_SDPDA_EUME__no_duplicate_marking: "
  valid_simple_dpda G
  \<Longrightarrow> \<not> duplicate_marking (F_SDPDA_EUME G)"
  apply(simp add: duplicate_marking_def)
  apply(clarsimp)
  apply(rename_tac d i j y)(*strict*)
  apply(subgoal_tac "\<exists>e c. d i = Some (pair e c)")
   apply(rename_tac d i j y)(*strict*)
   prefer 2
   apply(rule epdaS.pre_some_position_is_some_position)
     apply(rename_tac d i j y)(*strict*)
     apply(rule epdaS.derivation_initial_is_derivation)
     apply(force)
    apply(rename_tac d i j y)(*strict*)
    apply(force)
   apply(rename_tac d i j y)(*strict*)
   apply(force)
  apply(rename_tac d i j y)(*strict*)
  apply(clarsimp)
  apply(rename_tac d i j y e c)(*strict*)
  apply(subgoal_tac "\<exists>e c. d (Suc (i+j)) = Some (pair (Some e) c)")
   apply(rename_tac d i j y e c)(*strict*)
   prefer 2
   apply(rule epdaS.pre_some_position_is_some_position_prime)
      apply(rename_tac d i j y e c)(*strict*)
      apply(rule epdaS.derivation_initial_is_derivation)
      apply(force)
     apply(rename_tac d i j y e c)(*strict*)
     apply(force)
    apply(rename_tac d i j y e c)(*strict*)
    apply(force)
   apply(rename_tac d i j y e c)(*strict*)
   apply(force)
  apply(rename_tac d i j y e c)(*strict*)
  apply(clarsimp)
  apply(rename_tac d i j e c ea ca)(*strict*)
  apply(simp add: get_configuration_def)
  apply(case_tac "epdaS_conf_state c")
   apply(rename_tac d i j e c ea ca q)(*strict*)
   prefer 2
   apply(rename_tac d i j e c ea ca state)(*strict*)
   apply(simp add: F_SDPDA_EUME_def)
   apply(force)
  apply(rename_tac d i j e c ea ca q)(*strict*)
  apply(case_tac "epdaS_conf_state ca")
   apply(rename_tac d i j e c ea ca q qa)(*strict*)
   prefer 2
   apply(rename_tac d i j e c ea ca q state)(*strict*)
   apply(simp add: F_SDPDA_EUME_def)
   apply(force)
  apply(rename_tac d i j e c ea ca q qa)(*strict*)
  apply(clarsimp)
  apply(subgoal_tac "\<exists>e1 e2 c1 c2. d i = Some (pair e1 c1) \<and> d (Suc i) = Some (pair (Some e2) c2) \<and> epdaS_step_relation (F_SDPDA_EUME G) c1 e2 c2")
   apply(rename_tac d i j e c ea ca q qa)(*strict*)
   prefer 2
   apply(rule_tac
      m="Suc (i+j)"
      in epdaS.step_detail_before_some_position)
     apply(rename_tac d i j e c ea ca q qa)(*strict*)
     apply (metis epdaS.derivation_initial_is_derivation)
    apply(rename_tac d i j e c ea ca q qa)(*strict*)
    apply(force)
   apply(rename_tac d i j e c ea ca q qa)(*strict*)
   apply(force)
  apply(rename_tac d i j e c ea ca q qa)(*strict*)
  apply(clarsimp)
  apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
  apply(subgoal_tac "\<exists>w. epdaS_string_state c = w @ epdaS_string_state c2")
   apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
   prefer 2
   apply(rule_tac
      j="Suc 0"
      and P="F_SDPDA_EUME G"
      in epdaS.derivation_monotonically_dec)
        apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
        apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
        apply (metis F_SDPDA_EUME__preserves_epda)
       apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
       apply(force)
      apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
      apply(rule epdaS.derivation_initial_belongs)
       apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
       apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply (metis F_SDPDA_EUME__preserves_epda)
      apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
      apply(force)
     apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
     apply(rule epdaS.derivation_initial_is_derivation)
     apply(force)
    apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
    apply(force)
   apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
   apply(force)
  apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
  apply(subgoal_tac "\<exists>w. epdaS_string_state c2 = w @ epdaS_string_state ca")
   apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
   prefer 2
   apply(rule_tac
      j="j"
      and P="F_SDPDA_EUME G"
      in epdaS.derivation_monotonically_dec)
        apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
        apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
        apply (metis F_SDPDA_EUME__preserves_epda)
       apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
       apply(force)
      apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
      apply(rule epdaS.derivation_initial_belongs)
       apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
       apply(simp add: valid_simple_dpda_def valid_dpda_def valid_pda_def)
       apply (metis F_SDPDA_EUME__preserves_epda)
      apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
      apply(force)
     apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
     apply(rule epdaS.derivation_initial_is_derivation)
     apply(force)
    apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
    apply(force)
   apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
   apply(force)
  apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
  apply(simp add: epdaS_string_state_def)
  apply(clarify)
  apply(rename_tac d i j e c ea ca q qa e2 c2 w wa)(*strict*)
  apply(subgoal_tac "w=[] \<and> wa=[]")
   apply(rename_tac d i j e c ea ca q qa e2 c2 w wa)(*strict*)
   prefer 2
   apply(rule_tac
      ?v1.0="epdaS_conf_scheduler ca"
      and ?v2.0="epdaS_conf_scheduler c2"
      in listeq_by_mutual_append)
    apply(rename_tac d i j e c ea ca q qa e2 c2 w wa)(*strict*)
    apply(force)
   apply(rename_tac d i j e c ea ca q qa e2 c2 w wa)(*strict*)
   apply(force)
  apply(rename_tac d i j e c ea ca q qa e2 c2 w wa)(*strict*)
  apply(clarify)
  apply(subgoal_tac "epdaS_conf_scheduler ca = epdaS_conf_scheduler c2")
   apply(rename_tac d i j e c ea ca q qa e2 c2 w wa)(*strict*)
   prefer 2
   apply (metis append_Nil)
  apply(rename_tac d i j e c ea ca q qa e2 c2 w wa)(*strict*)
  apply(thin_tac "epdaS_conf_scheduler ca = [] @ epdaS_conf_scheduler c2")
  apply(thin_tac "epdaS_conf_scheduler c2 = [] @ epdaS_conf_scheduler ca")
  apply(clarsimp)
  apply(rename_tac d i j e c ea ca q qa e2 c2)(*strict*)
  apply(case_tac "epdaS_conf_state c2")
   apply(rename_tac d i j e c ea ca q qa e2 c2 qb)(*strict*)
   apply(simp add: epdaS_step_relation_def)
   apply(clarsimp)
   apply(rename_tac d i j e c ea ca q qa e2 c2 qb w)(*strict*)
   apply(simp add: F_SDPDA_EUME_def)
   apply(clarsimp)
   apply(rename_tac d i j e c ea ca e2 c2 qb w x xa xb)(*strict*)
   apply(simp add: F_SDPDA_EUME__edges_def)
   apply(case_tac "FB_executing_edge xb")
    apply(rename_tac d i j e c ea ca e2 c2 qb w x xa xb)(*strict*)
    apply(clarsimp)
    apply(simp add: FB_executing_edge_def option_to_list_def)
    apply(clarsimp)
    apply(rename_tac d i j e c ea ca e2 c2 qb w x xa xb y)(*strict*)
    apply(erule disjE)
     apply(rename_tac d i j e c ea ca e2 c2 qb w x xa xb y)(*strict*)
     apply(clarsimp)
     apply(rename_tac d i j e c ea ca c2 qb w x xa xb y)(*strict*)
     apply(simp add: F_SDPDA_EUME__edge_annotation_def)
    apply(rename_tac d i j e c ea ca e2 c2 qb w x xa xb y)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac d i j e c ea ca e2 c2 qb w x xa xb)(*strict*)
   apply(clarsimp)
   apply(erule disjE)
    apply(rename_tac d i j e c ea ca e2 c2 qb w x xa xb)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac d i j e c ea ca e2 c2 qb w x xa xb)(*strict*)
   apply(case_tac "edge_src xb \<in> epda_marking G")
    apply(rename_tac d i j e c ea ca e2 c2 qb w x xa xb)(*strict*)
    apply(clarsimp)
    apply(rename_tac d i j e c ea ca c2 qb w x xa xb)(*strict*)
    apply(simp add: F_SDPDA_EUME__edge_annotation_def)
   apply(rename_tac d i j e c ea ca e2 c2 qb w x xa xb)(*strict*)
   apply(clarsimp)
   apply(rename_tac d i j e c ea ca c2 qb w x xa xb)(*strict*)
   apply(simp add: F_SDPDA_EUME__edge_annotation_def)
  apply(rename_tac d i j e c ea ca q qa e2 c2 qb)(*strict*)
  apply(subgoal_tac "epdaS_conf_scheduler c2 \<noteq> epdaS_conf_scheduler ca")
   apply(rename_tac d i j e c ea ca q qa e2 c2 qb)(*strict*)
   apply(force)
  apply(rename_tac d i j e c ea ca q qa e2 c2 qb)(*strict*)
  apply(rule F_SDPDA_EUME__from_new_to_old_must_read)
       apply(rename_tac d i j e c ea ca q qa e2 c2 qb)(*strict*)
       apply(force)
      apply(rename_tac d i j e c ea ca q qa e2 c2 qb)(*strict*)
      apply(force)
     apply(rename_tac d i j e c ea ca q qa e2 c2 qb)(*strict*)
     apply(force)
    apply(rename_tac d i j e c ea ca q qa e2 c2 qb)(*strict*)
    apply(force)
   apply(rename_tac d i j e c ea ca q qa e2 c2 qb)(*strict*)
   apply(force)
  apply(rename_tac d i j e c ea ca q qa e2 c2 qb)(*strict*)
  apply(force)
  done

definition F_SDPDA_EUME__SpecInput :: "
  ('state, 'event, 'stack) epda
  \<Rightarrow> bool"
  where
    "F_SDPDA_EUME__SpecInput G \<equiv>
  valid_simple_dpda G"

definition F_SDPDA_EUME__SpecOutput :: "
  ('statesA, 'event, 'stack) epda
  \<Rightarrow> ('statesB, 'event, 'stack) epda
  \<Rightarrow> bool"
  where
    "F_SDPDA_EUME__SpecOutput Gi Go \<equiv>
  valid_simple_dpda Go
  \<and> \<not> duplicate_marking Go
  \<and> epdaS.marked_language Gi = epdaS.marked_language Go"

theorem F_SDPDA_EUME__SOUND: "
  F_SDPDA_EUME__SpecInput G
  \<Longrightarrow> F_SDPDA_EUME__SpecOutput G (F_SDPDA_EUME G)"
  apply(simp add: F_SDPDA_EUME__SpecOutput_def F_SDPDA_EUME__SpecInput_def F_SDPDA_EUME__no_duplicate_marking F_SDPDA_EUME__preserves_lang)
  apply(rule F_SDPDA_EUME__preserves_SDPDA)
  apply(force)
  done

end
